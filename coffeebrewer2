#!/bin/sh

baseapps="amd-ucode mkinitcpio texinfo base base-devel dhcpcd intel-ucode iwd linux linux-firmware man-db man-pages nano networkmanager nmap sudo"

baseapps2="git device-mapper gettext xz dosfstools efibootmgr freetype2 fuse2 libisoburn lzop mtools autogen help2man python rsync ttf-dejavu system-config-printer net-tools nfs-utils systemd-resolvconf tcpdump terminus-font testdisk ntfs-3g nvme-cli openconnect open-iscsi openssh open-vm-tools tmux tpm2-tss udftools usb_modeswitch usbmuxd usbutils openvpn partclone pcsclite ppp pptpclient qemu-guest-agent vpnc wireless-regdb wireless_tools wpa_supplicant xfsprogs xl2tpd zsh refind reflector rp-pppoe rsync rxvt-unicode-terminfo sbctl sbsigntools screen sdparm sg3_utils smartmontools sof-firmware squashfs-tools mkinitcpio mkinitcpio-archiso mkinitcpio-nfs-utils modemmanager mokutil mtools apparmor archinstall mlocate arch-install-scripts b43-fwcutter bind brltty broadcom-wl btrfs-progs clonezilla cloud-init cryptsetup darkhttpd ddrescue dhclient diffutils dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools exfatprogs f2fs-tools fatresize fsarchiver gpm gptfdisk grml-zsh-config hdparm hyperv jfsutils kitty-terminfo libfido2 libusb-compat linux linux-headers"

coffeeapps="faudio pavucontrol fwupd fwupd-efi glfw-wayland vulkan-validation-layers npm boost-libs gtk-update-icon-cache hwinfo libpwquality squashfs-tools yaml-cpp boost extra-cmake-modules git rhythmbox alsa-lib alsa-plugins amd-ucode rust archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server blueman bluez-libs cabextract chrony clang cmake colord cronie cups dbus dbus-python dconf directx-headers dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak gettext giflib gimp git glib2 glibc glslang gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk-engine-murrine hicolor-icon-theme innoextract lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libxcomposite lib32-libxinerama lib32-libxslt  lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libunwind libva libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors make meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opengl-man-pages pipewire pipewire-alsa pipewire-jack pipewire-pulse power-profiles-daemon python-gobject python-mako samba shellcheck shotwell  sudo systemd terminus-font tesseract-data-eng ttf-liberation udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vulkan-icd-loader w3m wireplumber xdg-utils xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader zenity zstd vlc opencl-clhpp opencl-headers"

javaapps="jre-openjdk"

gnomeapps="phonon-qt5-gstreamer qt6 qt6-multimedia-ffmpeg gnome-shell-extension-appindicator libpulse noto-fonts noto-fonts-emoji gnu-free-fonts pyside2 cronie tesseract-data-eng wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack gdm gnome gnome-photos gnome-color-manager gnome-console gnome-extra gnome-firmware gnome-keyring gnome-menus gnome-online-accounts gnome-text-editor gtk4 polkit-gnome xdg-desktop-portal-gnome libsecret"

kdeapps="phonon-qt5-gstreamer libpulse noto-fonts noto-fonts-emoji gnu-free-fonts pyside2 cronie tesseract-data-eng qt6-multimedia-ffmpeg kpmcore wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack appstream-qt ark colord-kde gnome-color-manager gnome-disk-utility gnome-menus gtk4 kde-applications-meta kdevelop-python kgamma qt6 plasma plasma-nm kscreen kvantum plasma-meta plasma-wayland-protocols plasma-wayland-session sddm sddm-kcm xdg-desktop-portal-kde libsecret"

cinnamonapps="phonon-qt5-gstreamer qt6 libpulse qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring libsecret wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack cinnamon cinnamon-translations geary gnome-calculator gnome-color-manager gnome-disk-utility gnome-keyring gnome-menus gnome-photos gnome-software gnome-console gnome-system-monitor gtk4 lightdm lightdm-slick-greeter xdg-desktop-portal-gnome gnome-text-editor"

mateapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji mate-polkit polkit libsecret gtk3 gtk4 wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack engrampa eom gnome-calculator gnome-color-manager gnome-console gnome-disk-utility gnome-keyring gnome-menus leafpad marco mate mate-applet-dock mate-applet-streamer mate-common mate-extra mate-media mate-netbook mate-power-manager mate-system-monitor mate-terminal mozo orca pluma lightdm lightdm-slick-greeter gnome-text-editor"

xfceapps="phonon-qt5-gstreamer qt6 gtk4 libpulse qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring libsecret gtk3 wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack arc-gtk-theme galculator geary gnome-disk-utility gnome-keyring leafpad lightdm lightdm-slick-greeter pavucontrol thunar-archive-plugin thunar-media-tags-plugin xfce4 xfce4-battery-plugin xfce4-datetime-plugin xfce4-goodies xfce4-mount-plugin xfce4-netload-plugin xfce4-notifyd xfce4-screensaver xfce4-taskmanager xfce4-wavelan-plugin xfce4-weather-plugin xfce4-whiskermenu-plugin xfce4-xkb-plugin xfwm4"

lxdeapps="phonon-qt5-gstreamer qt6 gtk3 gtk4 libpulse qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack lxde lxde-common lxdm lxpanel lxsession mousepad xcompmgr xdg-desktop-portal-lxqt libsecret"

lxqtapps="phonon-qt5-gstreamer gtk3 gtk4 libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack lightdm lightdm-gtk-greeter lximage-qt lxqt lxqt-about lxqt-admin lxqt-archiver lxqt-config lxqt-globalkeys lxqt-notificationd lxqt-openssh-askpass lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-runner lxqt-session lxqt-sudo lxqt-themes mousepad obconf-qt oxygen-icons pavucontrol-qt pcmanfm-qt qterminal screengrab sddm xdg-desktop-portal-lxqt libsecret"

deepinapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring gnome-extra libsecret deepin gtk3 gtk4 deepin-anything-arch deepin-kwin deepin-extra lightdm lightdm-deepin-greeter wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack"

i3apps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring libsecret gnome-text-editor gnome-console gnome-system-monitor nautilus i3-wm i3lock gtk3 gtk4 i3status i3blocks micro lightdm lightdm-gtk-greeter rofi feh wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

swayapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji sddm gnome-disk-utility gnome-text-editor htop nemo polkit polkit-gnome gnome-keyring libsecret egl-wayland xorg-xwayland dmenu bemenu bemenu-wayland gtk3 bemenu-x11 bemenu-ncurses i3blocks sway swaybg swayidle swayimg swaylock wlroots seatd wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol wofi gnome-terminal j4-dmenu-desktop xdg-desktop-portal-gtk"

swayappsv2="polkit-gnome gnome-keyring breeze-gtk breeze-icons breeze phonon-qt5-gstreamer libpulse gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji qt6 appstream-qt ark colord-kde qt6-multimedia-ffmpeg sddm gnome-disk-utility kate htop dolphin polkit libsecret egl-wayland xorg-xwayland dmenu bemenu bemenu-wayland gtk3 bemenu-x11 bemenu-ncurses i3blocks sway swaybg swayidle swayimg swaylock wlroots seatd wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol wofi konsole j4-dmenu-desktop xdg-desktop-portal-kde"

cutefishapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring libsecret cutefish-calculator gtk3 gtk4 cutefish-core cutefish-dock cutefish-filemanager cutefish-icons cutefish-launcher cutefish-qt-plugins cutefish-screenlocker cutefish-settings cutefish-statusbar cutefish-terminal cutefish-wallpapers fishui libcutefish sddm rofi feh wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

budgieapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring gnome-extra gnome-shell libsecret budgie-control-center gtk3 budgie-desktop budgie-desktop-view budgie-extras budgie-screensaver lightdm lightdm-gtk-greeter rofi gtk4 wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

awesomeapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring libsecret awesome xterm gtk3 gtk4 awesome-terminal-fonts lightdm lightdm-gtk-greeter rofi feh wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

enlightenmentapps="phonon-qt5-gstreamer libpulse qt6 qt6-multimedia-ffmpeg gnu-free-fonts pyside2 cronie tesseract-data-eng noto-fonts noto-fonts-emoji polkit polkit-gnome gnome-keyring libsecret enlightenment gtk3 gtk4 lightdm lightdm-gtk-greeter rofi wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

#legiongo=""

customtype2(){

clear

while [ "$usercheck02" != "1" ] && [ "$usercheck02" != "2" ]; do

printf "%b\nWould you like to set your username? (Default: 2)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r usercheck02
case $usercheck02 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

clear

if [ "$usercheck02" = "1" ]; then
printf "%b\nSet your Username.\n" "$*"
read -r user00
printf "%b\n$user00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r usercheck
case $usercheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

elif [ "$usercheck02" = "2" ]; then

usercheck=1
user00=defaultuser

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

elif [ "$usercheck02" != "1" ] && [ "$usercheck02" != "2" ]; then

usercheck02=2
usercheck=1
user00=defaultuser

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

fi
done
#

clear

while [ "$userpasscheck00" != "1" ] && [ "$userpasscheck00" != "2" ]; do

printf "%b\nWould you like to set your user password? (Default: 2)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r userpasscheck00
case $userpasscheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

clear

if [ "$userpasscheck00" = "1" ]; then

printf "%b\nSet your User Password.\n" "$*"
read -r userpass00
printf "%b\n$userpass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

elif [ "$userpasscheck00" = "2" ]; then

userpass00=coffee
userpasscheck=1

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

elif [ "$userpasscheck00" != "1" ] && [ "$userpasscheck00" != "2" ]; then

userpasscheck00=2
userpass00=coffee
userpasscheck=1

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

fi
done
#

clear

while [ "$rootpasscheck00" != "1" ] && [ "$rootpasscheck00" != "2" ]; do

printf "%b\nWould you like to set your root password? (Default: 2)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r rootpasscheck00
case $rootpasscheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

clear

if [ "$rootpasscheck00" = "1" ]; then

printf "%b\nSet your Root Password.\n" "$*"
read -r userpass01
printf "%b\n$userpass01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

elif [ "$rootpasscheck00" = "2" ]; then

userpass01=coffee
rootpasscheck=1

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

elif [ "$rootpasscheck00" != "1" ] && [ "$rootpasscheck00" != "2" ]; then

rootpasscheck00=2
userpass01=coffee
rootpasscheck=1

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

fi
done

clear

while [ "$namepasscheck00" != "1" ] && [ "$namepasscheck00" != "2" ]; do

printf "%b\nWould you like to set your PC Name? (Default: 2)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r namepasscheck00
case $namepasscheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

clear

if [ "$namepasscheck00" = "1" ]; then

printf "%b\nSet your PC name.\n" "$*"
read -r name00
printf "%b\n$name00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

elif [ "$namepasscheck00" = "2" ]; then

name00=coffeelinux
namepasscheck=1

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

elif [ "$namepasscheck00" != "1" ] && [ "$namepasscheck00" != "2" ]; then

namepasscheck00=2
name00=coffeelinux
namepasscheck=1

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

fi
done
#

clear

while [ "$name2passcheck02" != "1" ] && [ "$name2passcheck02" != "2" ]; do

printf "%b\nWould you like to set your Hard Drive Label? (Default: 2)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r name2passcheck02
case $name2passcheck02 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

clear

if [ "$name2passcheck02" = "1" ]; then

printf "%b\nSet your HardDrive Label (OS Partition Label).\n" "$*"
read -r name01
printf "%b\n$name01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

elif [ "$name2passcheck02" = "2" ]; then

name01=coffeedisk
name2passcheck=1

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

elif [ "$name2passcheck02" != "1" ] && [ "$name2passcheck02" != "2" ]; then

name2passcheck02=2
name01=coffeedisk
name2passcheck=1

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

fi
done

clear

while [ "$driveXpasscheck" != "1" ]; do
printf "%b\nListing Storage Devices for you.\n" "$*"
fdisk -l
printf "%b\n" "$*"
printf "%b\nWhich drive do you want Coffee Linux to install to? (Default: 1)\n" "$*"
printf "%b\n1 - NVME0N1" "$*"
printf "%b\n2 - NVME1N1" "$*"
printf "%b\n3 - SDA" "$*"
printf "%b\n4 - SDB" "$*"
printf "%b\n5 - VDA" "$*"
printf "%b\n6 - VDB\n" "$*"

read -r driveX
if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

elif [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

elif [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

elif [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

elif [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

elif [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

elif [ "$driveX" != "1" ] && [ "$driveX" != "2" ] && [ "$driveX" != "3" ] && [ "$driveX" != "4" ] && [ "$driveX" != "5" ] && [ "$driveX" != "6" ]; then
driveX=1
drive="nvme0n1"
boot=p1
swap=p2
system=p3
driveXpasscheck=1

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
done

clear

while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; do
printf "%b\nWhat type of GPU do you have? (Default: 1)\n" "$*"
printf "%b\n1 - AMD\n" "$*"
printf "%b\n2 - Nvidia\n" "$*"
printf "%b\n3 - Intel\n" "$*"
printf "%b\n4 - Virtual GPU (VMware etc.)\n" "$*"

read -r gpucheck
case $gpucheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  3) printf "%b\nA good choice.\n" "$*" ;;
  4) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$gpucheck" = "1" ]; then
gpu0="amd"
elif [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
elif [ "$gpucheck" = "3" ]; then
gpu0="intel"
elif [ "$gpucheck" = "4" ]; then
gpu0="vm"
elif [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; then
gpucheck=1
gpu0="amd"
fi
done

clear

while [ "$desktopcheck" != "1" ] && [ "$desktopcheck" != "2" ] && [ "$desktopcheck" != "3" ] && [ "$desktopcheck" != "4" ] && [ "$desktopcheck" != "5" ] && [ "$desktopcheck" != "6" ] && [ "$desktopcheck" != "7" ] && [ "$desktopcheck" != "8" ] && [ "$desktopcheck" != "9" ] && [ "$desktopcheck" != "10" ] && [ "$desktopcheck" != "11" ] && [ "$desktopcheck" != "12" ] && [ "$desktopcheck" != "13" ] && [ "$desktopcheck" != "14" ] && [ "$desktopcheck" != "15" ] && [ "$desktopcheck" != "16" ] && [ "$desktopcheck" != "17" ] && [ "$desktopcheck" != "18" ] && [ "$desktopcheck" != "19" ]; do

printf "%b\nWhat desktop environment do you want? (Default: 1)\n" "$*"
printf "%b\n1 - Gnome (Ubuntu version)\n" "$*"
printf "%b\n2 - Gnome (Standard version)\n" "$*"
printf "%b\n3 - KDE\n" "$*"
printf "%b\n4 - Cinnamon (Mint version)\n" "$*"
printf "%b\n5 - Cinnamon (Standard version)\n" "$*"
printf "%b\n6 - Mate (Mint version)\n" "$*"
printf "%b\n7 - Mate (Standard version)\n" "$*"
printf "%b\n8 - LXDE (WIP May not work)\n" "$*"
printf "%b\n9 - LXQT (WIP May not work)\n" "$*"
printf "%b\n10 - XFCE (Mint Version)\n" "$*"
printf "%b\n11 - XFCE (Standard version)\n" "$*"
printf "%b\n12 - Deepin (WIP May not work). \n" "$*"
printf "%b\n13 - i3 (WIP May not work)\n" "$*"
printf "%b\n14 - Sway (Gnome version)\n" "$*"
printf "%b\n15 - Sway (KDE version)\n" "$*"
printf "%b\n16 - Cutefish (WIP May not work)\n" "$*"
printf "%b\n17 - Budgie (WIP May not work)\n" "$*"
printf "%b\n18 - Enlightenment (WIP May not work)\n" "$*"
printf "%b\n19 - Awesome (WIP May not work)\n" "$*"

read -r desktopcheck
case $desktopcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  3) printf "%b\nA good choice.\n" "$*" ;;
  4) printf "%b\nA good choice.\n" "$*" ;;
  5) printf "%b\nA good choice.\n" "$*" ;;
  6) printf "%b\nA good choice.\n" "$*" ;;
  7) printf "%b\nA good choice.\n" "$*" ;;
  8) printf "%b\nA brave choice.\n" "$*" ;;
  9) printf "%b\nA super choice.\n" "$*" ;;
  10) printf "%b\nA super choice.\n" "$*" ;;
  11) printf "%b\nA super choice.\n" "$*" ;;
  12) printf "%b\nA super choice.\n" "$*" ;;
  13) printf "%b\nA super choice.\n" "$*" ;;
  14) printf "%b\nA super choice.\n" "$*" ;;
  15) printf "%b\nA super choice.\n" "$*" ;;
  16) printf "%b\nA super choice.\n" "$*" ;;
  17) printf "%b\nA super choice.\n" "$*" ;;
  18) printf "%b\nA super choice.\n" "$*" ;;
  19) printf "%b\nA super choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$desktopcheck" = "1" ]; then
desktop0="gnome"

elif [ "$desktopcheck" = "2" ]; then
desktop0="gnomev2"

elif [ "$desktopcheck" = "3" ]; then
desktop0="kde"

elif [ "$desktopcheck" = "4" ]; then
desktop0="cinnamon"

elif [ "$desktopcheck" = "5" ]; then
desktop0="cinnamonv2"

elif [ "$desktopcheck" = "6" ]; then
desktop0="mate"

elif [ "$desktopcheck" = "7" ]; then
desktop0="matev2"

elif [ "$desktopcheck" = "8" ]; then
desktop0="lxde"

elif [ "$desktopcheck" = "9" ]; then
desktop0="lxqt"

elif [ "$desktopcheck" = "10" ]; then
desktop0="xfce"

elif [ "$desktopcheck" = "11" ]; then
desktop0="xfcev2"

elif [ "$desktopcheck" = "12" ]; then
desktop0="deepin"

elif [ "$desktopcheck" = "13" ]; then
desktop0="i3"

elif [ "$desktopcheck" = "14" ]; then
desktop0="sway"

elif [ "$desktopcheck" = "15" ]; then
desktop0="swayv2"

elif [ "$desktopcheck" = "16" ]; then
desktop0="cutefish"

elif [ "$desktopcheck" = "17" ]; then
desktop0="budgie"

elif [ "$desktopcheck" = "18" ]; then
desktop0="enlightenment"

elif [ "$desktopcheck" = "19" ]; then
desktop0="awesome"

elif [ "$desktopcheck" != "1" ] && [ "$desktopcheck" != "2" ] && [ "$desktopcheck" != "3" ] && [ "$desktopcheck" != "4" ] && [ "$desktopcheck" != "5" ] && [ "$desktopcheck" != "6" ] && [ "$desktopcheck" != "7" ] && [ "$desktopcheck" != "8" ] && [ "$desktopcheck" != "9" ] && [ "$desktopcheck" != "10" ] && [ "$desktopcheck" != "11" ] && [ "$desktopcheck" != "12" ] && [ "$desktopcheck" != "13" ] && [ "$desktopcheck" != "14" ] && [ "$desktopcheck" != "15" ] && [ "$desktopcheck" != "16" ] && [ "$desktopcheck" != "17" ] && [ "$desktopcheck" != "18" ] && [ "$desktopcheck" != "19" ]; then
desktopcheck=1
desktop0="gnome"

fi
done

clear

}

questionare (){

while [ "$netcheck00" != "1" ] && [ "$netcheck00" != "2" ] && [ "$netcheck00" != "3" ]; do

clear


printf "%b\nWhat type of network do you have? (Default: 1)\n" "$*"
printf "%b\n1 - Ethernet\n" "$*"
printf "%b\n2 - Wifi\n" "$*"
printf "%b\n3 - I have already connected to the internet\n" "$*"
read -r netcheck00
case $netcheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  3) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$netcheck00" = "1" ]; then
netpass00=ethernet
elif [ "$netcheck00" = "2" ]; then
netpass00=wifi
elif [ "$netcheck00" = "3" ]; then
netpass00=ethernet
elif [ "$netcheck00" != "3" ] && [ "$netcheck00" != "2" ] && [ "$netcheck00" != "1" ]; then
netcheck00=3
netpass00=ethernet
fi
done

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b\nEthernet selected, or already connected, skipping this part.\n" "$*"
elif [ "$netpass00" = "wifi" ]; then
while [ "$wifipasscheck" != "1" ]; do
clear

while [ "$adaptercheck00" != "1" ] && [ "$adaptercheck00" != "2" ]; do
printf "%b\nIs your wifi adapter Realtek? (Default: 2)\n" "$*"
printf "%b\n1 - Realtek\n" "$*"
printf "%b\n2 - Other\n" "$*"
read -r adaptercheck00
printf "%b\n$adaptercheck00 Is this correct?\n" "$*"
case $adaptercheck00 in
1) printf "%b\nPerfect\n" "$*" ;;
2) printf "%b\nLet's move on then.\n" "$*" ;;
*) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac
if [ "$adaptercheck00" = "1" ]; then
wifiadapter0="realtek"
elif [ "$adaptercheck00" = "2" ]; then
wifiadapter0="other"
elif [ "$adaptercheck00" != "2" ] && [ "$adaptercheck00" != "1" ]; then
adaptercheck00=2
wifiadapter0="other"
fi
done
clear

rfkill unblock all
iwctl station list
printf "%b\nSet your Wifi device ID. (Usually 'wlan0')\n" "$*"
read -r wifi00
wifi0=$wifi00
printf "%b\n$wifi00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r wifipasscheck
case $wifipasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac
done
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b\nNo Wifi, skipping this part.\n" "$*"
elif [ "$netpass00" = "wifi" ]; then
while [ "$ssidcheck" != "1" ]; do
iwctl station $wifi0 get-networks
printf "%b\nSet your Network SSID (Your network name).\n" "$*"
read -r ssid00
ssid0=$ssid00
printf "%b\n$ssid00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r ssidcheck
case $ssidcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac
done
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b\nNo Wifi, skipping this part.\n" "$*"
elif [ "$netpass00" = "wifi" ]; then
while [ "$netpasswordcheck" != "1" ]; do
printf "%b\nEnter your Wifi password.\n" "$*"
read -r netpassword00
netpassword0=$netpassword00
printf "%b\n$netpassword00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r netpasswordcheck
case $netpasswordcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac
done
fi

clear

while [ "$sbpasscheck" != "1" ] && [ "$sbpasscheck" != "2" ]; do
printf "%b\nWould you like to enable Secure-Boot in the OS? (requires systemd-bootloader) (Default: 2)\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r sbpasscheck
case $sbpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$sbpasscheck" = "1" ]; then
sbpass0=yes
elif [ "$sbpasscheck" = "2" ]; then
sbpass0=no
elif [ "$sbpasscheck" != "2" ] && [ "$sbpasscheck" != "1" ]; then
sbpasscheck=2
sbpass0=no
fi
done

#
if [ "$sbpass0" = "no" ]; then
printf "%b\nNo SB, skipping this part.\n" "$*"
elif [ "$sbpass0" = "yes" ]; then
while [ "$uefipasscheck" != "1" ]; do
printf "%b\nSet your UEFI/MOK Secure-Boot Password.\n" "$*"
read -r uefipass00
printf "%b\n$uefipass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r uefipasscheck
case $uefipasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
esac
done
fi

if [ "$uefipasscheck" = "1" ]; then
uefipass0=$uefipass00
fi

clear

native1=yes

clear

while [ "$swapcheck" != "1" ] && [ "$swapcheck" != "2" ]; do
printf "%b\nSetting up swap size, do you want to manually configure or auto configure it based on your RAM size ? (Default: 2)\n" "$*"
printf "%b\n1 - Manual\n" "$*"
printf "%b\n2 - Auto\n" "$*"
read -r swapcheck
case $swapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default...\n" "$*" ;;
esac
if [ "$swapcheck" != "1" ] && [ "$swapcheck" != "2" ]; then
swapcheck=2
fi
done

clear

while [ "$hibernationpasscheck" != "1" ] && [ "$hibernationpasscheck" != "2" ]; do
printf "%b\nWould you like to enable hibernation? (Default: 1)\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"

read -r hibernationpasscheck
case $hibernationpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default.\n" "$*" ;;
esac
if [ "$hibernationpasscheck" != "1" ] && [ "$hibernationpasscheck" != "2" ]; then
hibernationpasscheck=1
fi
done

clear

while [ "$coffeecheck00" != "1" ] && [ "$coffeecheck00" != "2" ]; do

clear

printf "%b\nWould you like to install CoffeeLinux Extras (Default: 1)?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r coffeecheck00
case $coffeecheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again..\n" "$*" ;;
esac

if [ "$coffeecheck00" = "1" ]; then
coffeeon00=yes
elif [ "$coffeecheck00" = "2" ]; then
coffeeon00=no
elif [ "$coffeecheck00" != "1" ] && [ "$coffeecheck00" != "2" ]; then
coffeecheck00=1
coffeeon00=yes
fi
done

clear

while [ "$webcheck00" != "1" ] && [ "$webcheck00" != "2" ] && [ "$webcheck00" != "3" ]; do

clear

printf "%b\nWhat Web Browser do you prefer? (Default: 2)\n" "$*"
printf "%b\n1 - Google Chrome\n" "$*"
printf "%b\n2 - Firefox\n" "$*"
printf "%b\n3 - Microsoft Edge\n" "$*"
read -r webcheck00
case $webcheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  3) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac
if [ "$webcheck00" = "1" ]; then
webbrowser00=chrome
elif [ "$webcheck00" = "2" ]; then
webbrowser00=firefox
elif [ "$webcheck00" = "3" ]; then
webbrowser00=edge
elif [ "$webcheck00" != "1" ] && [ "$webcheck00" != "2" ] && [ "$webcheck00" != "3" ]; then
webcheck00=2
webbrowser00=firefox
fi
done

clear

while [ "$heroiccheck00" != "1" ] && [ "$heroiccheck00" != "2" ]; do

clear

printf "%b\nWould you like to install Heroic Games Launcher for Epic Games and GoG games? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r heroiccheck00
case $heroiccheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again..\n" "$*" ;;
esac

if [ "$heroiccheck00" = "1" ]; then
epicon00=yes
elif [ "$heroiccheck00" = "2" ]; then
epicon00=no
elif [ "$heroiccheck00" != "1" ] && [ "$heroiccheck00" != "2" ]; then
heroiccheck00=1
epicon00=yes
fi
done

clear

while [ "$githubcheck00" != "1" ] && [ "$githubcheck00" != "2" ]; do

clear

printf "%b\nWould you like to install Github Desktop app? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r githubcheck00
case $githubcheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$githubcheck00" = "1" ]; then
giton00=yes
elif [ "$githubcheck00" = "2" ]; then
giton00=no
elif [ "$githubcheck00" != "1" ] && [ "$githubcheck00" != "2" ]; then
githubcheck00=1
giton00=yes
fi
done

clear

while [ "$steamcheck00" != "1" ] && [ "$steamcheck00" != "2" ]; do

clear

printf "%b\nWould you like to install Steam Desktop? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r steamcheck00
case $steamcheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again..\n" "$*" ;;
esac

if [ "$steamcheck00" = "1" ]; then
steamon00=yes
elif [ "$steamcheck00" = "2" ]; then
steamon00=no
elif [ "$steamcheck00" != "1" ] && [ "$steamcheck00" != "2" ]; then
steamcheck00=1
steamon00=yes
fi
done

clear

while [ "$discordcheck00" != "1" ] && [ "$discordcheck00" != "2" ]; do

clear

printf "%b\nWould you like to install Discord app? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r discordcheck00
case $discordcheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$discordcheck00" = "1" ]; then
discordon00=yes
elif [ "$discordcheck00" = "2" ]; then
discordon00=no
elif [ "$discordcheck00" != "1" ] && [ "$discordcheck00" != "2" ]; then
discordcheck00=1
discordon00=yes
fi
done

clear

while [ "$lutrischeck00" != "1" ] && [ "$lutrischeck00" != "2" ]; do

printf "%b\nWould you like to install Lutris app? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r lutrischeck00
case $lutrischeck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$lutrischeck00" = "1" ]; then
lutrison00=yes
elif [ "$lutrischeck00" = "2" ]; then
lutrison00=no
elif [ "$lutrischeck00" != "1" ] && [ "$lutrischeck00" != "2" ]; then
lutrischeck00=1
lutrison00=yes
fi
done

clear

while [ "$officecheck00" != "1" ] && [ "$officecheck00" != "2" ]; do

printf "%b\nWould you like to install LibreOffice app bundle? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r officecheck00
case $officecheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$officecheck00" = "1" ]; then
officeon00=yes
elif [ "$officecheck00" = "2" ]; then
officeon00=no
elif [ "$officecheck00" != "1" ] && [ "$officecheck00" != "2" ]; then
officecheck00=1
officeon00=yes
fi
done

clear

while [ "$javacheck00" != "1" ] && [ "$javacheck00" != "2" ]; do

printf "%b\nWould you like to install Java / OpenJDK? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r javacheck00
case $javacheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$javacheck00" = "1" ]; then
javaon00=yes
elif [ "$javacheck00" = "2" ]; then
javaon00=no
elif [ "$javacheck00" != "1" ] && [ "$javacheck00" != "2" ]; then
javacheck00=1
javaon00=yes
fi
done

clear

while [ "$snapcheck" != "1" ] && [ "$snapcheck" != "2" ]; do
printf "%b\nWould you like Snap-Store support (Snapd) ? (Default: 1)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r snapcheck
case $snapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$snapcheck" = "1" ]; then
snapon="yes"
elif [ "$snapcheck" = "2" ]; then
snapon="no"
elif [ "$snapcheck" != "1" ] && [ "$snapcheck" != "2" ]; then
snapcheck=1
snapon=yes
fi
done

clear

while [ "$vmwarecheck" != "1" ] && [ "$vmwarecheck" != "2" ]; do
printf "%b\nWould you like VMWare Workstation? (Default: 2)\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r vmwarecheck
case $vmwarecheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$vmwarecheck" = "1" ]; then
vmwareon="yes"
elif [ "$vmwarecheck" = "2" ]; then
vmwareon="no"
elif [ "$vmwarecheck" != "1" ] && [ "$vmwarecheck" != "2" ]; then
vmwarecheck=2
vmwareon=no
fi
done

clear

while [ "$fscheck" != "1" ] && [ "$fscheck" != "2" ]; do
printf "%b\nWould you like Ext4 or BTRFS Filesystem type? (Default: 2)\n" "$*"
printf "%b\n1 - Ext4\n" "$*"
printf "%b\n2 - BTRFS\n" "$*"

read -r fscheck
case $fscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$fscheck" = "1" ]; then
fs0="ext4"
elif [ "$fscheck" = "2" ]; then
fs0="btrfs"
elif [ "$fscheck" != "1" ] && [ "$fscheck" != "2" ]; then
fscheck=2
fs0=btrfs
fi
done

clear

while [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ] && [ "$grubcheck" != "3" ]; do
printf "%b\nWould you like GRUB or SystemD-Bootloader?\nGRUB is more compatible with VMs. (Default: 1)\n" "$*"
printf "%b\n1 - GRUB UEFI version\n" "$*"
printf "%b\n2 - GRUB BIOS/MBR version\n" "$*"
printf "%b\n3 - SystemD-Bootloader UEFI-Only (secure-boot installations must use this option.)\n" "$*"
read -r grubcheck
case $grubcheck in
  1) printf "%b\nPerfect.\n" "$*" ;;
  2) printf "%b\nGreat Choice.\n" "$*" ;;
  3) printf "%b\nGood Choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$grubcheck" = "1" ]; then
grub0="true"
questionspassed="yes"
elif [ "$grubcheck" = "2" ]; then
grub0="true2"
questionspassed="yes"
elif [ "$grubcheck" = "3" ]; then
grub0="false"
questionspassed="yes"
elif [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ] && [ "$grubcheck" != "3" ]; then
grubcheck=1
grub0=true
questionspassed=yes
fi
done

}

set_swap (){

clear

while [ "$command0finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$hibernationpasscheck" = "1" ]; then
HIBERNATING="1"
fi

while [ "$rampasscheck" != "1" ]; do

RAM=$(free -m | grep Mem | awk '{print $2}')

if [ "$RAM" -gt 2048 ] && [ "$RAM" -lt 8192 ]; then # if RAM is between 2 and 8 GB

    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="3"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 8192 ] && [ "$RAM" -lt 16384 ]; then # if RAM is between 8 and 16 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="2"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 32768  ]; then    # if RAM is more than 32 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="1"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$swapcheck" = "1" ]; then
    printf "%b\nEnter swap size in GB\n" "$*"
    read -r swapsize1
    swapsize="+""$((swapsize1))G"
    swap1=$swapsize
elif [ "$swapcheck" = "2" ]; then
    swapsize="+""$((RAM*MULTIPLIER))M"
    swap1=$swapsize
fi

rampasscheck="1"

done

command0finished="1"
else
command0finished="0"
fi
done
command0finished="0"

}

clear

set_network (){

while [ "$command17finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
#- Set variables for iwctl
clear
if [ "$netpass00" = "wifi" ]; then
rfkill unblock all
printf "%b\n" "$*" | iwctl device $wifi0 set-property Powered on
printf "%b\nPowering on wifi device for a minute..\n" "$*"
sleep 5
printf "%b\n" "$*" | iwctl --passphrase $netpassword0 station $wifi0 connect $ssid0
printf "%b\nEnsuring we have a connection...\n" "$*"
sleep 10
printf "%b\nSetting intial pacman keyring up...\n" "$*"
pacman-key --init
pacman-key --populate archlinux
printf "%b\nSet keys successfully..\n" "$*"
sleep 5
pacman -Syy --noconfirm archlinux-keyring
else
printf "%b\nWe are already connected to the internet, preparing for launch..\n" "$*"
sleep 10
printf "%b\nSetting intial local pacman keyring up...\n" "$*"
pacman-key --init
pacman-key --populate archlinux
printf "%b\nSet local pacman keys successfully..\n" "$*"
sleep 5
pacman -Syy --noconfirm archlinux-keyring
clear
fi

fi
command17finished="1"
done
command17finished="0"
}

format_disks (){

clear

while [ "$command1finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b\nFormatting Partitions\n" "$*"
printf "%bg\nn\n1\n\n\nt\n20\nw\n" "$*" | fdisk -W always "$drive0"
printf "%bg\nn\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n19\nt\n3\n20\nw\n" "$*" | fdisk -W always "$drive0"
mkfs.vfat -F 32 "$boot0"
mkswap "$swap0"
swapon "$swap0"

if [ "$fs0" = "btrfs" ]; then
mkfs.btrfs -f -L "$drivename0" "$system0"
elif [ "$fs0" = "ext4" ]; then
mkfs.ext4 -L "$drivename0" "$system0"
fi
printf "%b\nMounting Disks\n" "$*"
mount "$system0" /mnt
mkdir /mnt/boot
mount "$boot0" /mnt/boot
clear

command1finished="1"
else
command1finished="0"
fi
done
command1finished="0"

}

base_install (){

clear

while [ "$pacstrapfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
pacstrap /mnt $baseapps
clear
arch-chroot /mnt pacman -Sy --noconfirm $baseapps2
clear

pacstrapfinished="1"
else
pacstrapfinished="0"
fi

done

}

set_locale (){

clear

while [ "$command2finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt /bin/bash <<"EOT"
printf "%b\nSetting Locale\n" "$*"
ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc
printf "%b\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\n" "$*" >> /etc/locale.gen
printf "%b\nKEYMAP=us\n" "$*" >> /etc/vconsole.conf
printf "%b\nLANG=en_US.UTF-8" "$*" >> /etc/locale.conf
export LANG=en_US.UTF-8
locale-gen
cd /
printf "%b\n%%"w"heel ALL=(ALL:ALL) NOPASSWD: ALL\n" "$*" > /etc/sudoers.d/wheel
mkinitcpio -P

EOT

cp --dereference /etc/resolv.conf /mnt/etc/
arch-chroot /mnt pacman -Syu --noconfirm
clear

command2finished="1"
else
command2finished="0"
fi
done
command2finished="0"

}

set_passwords (){

clear

while [ "$command3finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear
cp /etc/pacman.conf /mnt/etc/pacman.conf
printf "%b\nSet Root Password\n" "$*"
printf "%b$userpass1\n$userpass1\n" "$*" | arch-chroot /mnt passwd
printf "%bAdding User Account\n" "$*"
arch-chroot /mnt useradd -m -G wheel,audio,video,users $user01
printf "%b\nSet User Password\n" "$*"
printf "%b$userpass0\n$userpass0\n" "$*" | arch-chroot /mnt passwd $user01
printf "%b$hostname0\n" "$*" >> /mnt/etc/hostname
printf "%b\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0\n" "$*" >> /mnt/etc/hosts
printf "%bCreating Links\n" "$*"
genfstab -U /mnt >> /mnt/etc/fstab
clear

command3finished="1"
else
command3finished="0"
fi
done
command3finished="0"

}

desktop_install (){

clear

while [ "$command4finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$desktop0" = "gnome" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $gnomeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt pacman -R --noconfirm gedit gnome-terminal
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable gdm

elif [ "$desktop0" = "gnomev2" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $gnomeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt pacman -R --noconfirm gedit gnome-terminal
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable gdm

elif [ "$desktop0" = "kde" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $kdeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

elif [ "$desktop0" = "cinnamon" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $cinnamonapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

arch-chroot /mnt pacman -Rdd --noconfirm gnome-session

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "cinnamonv2" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $cinnamonapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

arch-chroot /mnt pacman -Rdd --noconfirm gnome-session

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "mate" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $mateapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "matev2" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $mateapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "lxde" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $lxdeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lxdm

elif [ "$desktop0" = "lxqt" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $lxqtapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

elif [ "$desktop0" = "xfce" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $xfceapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "xfcev2" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $xfceapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "deepin" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $deepinapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "i3" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $i3apps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "sway" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $swayapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
cp /opt/config /mnt/etc/sway/config
printf "%b\nif [ -z ""\$"\{DISPLAY\}" ] && [ ""\$"\{XDG_VTNR\}" -eq 1 ]; then\nexec sway\nfi\n" "$*" >> /mnt/etc/profile

if [ "$gpu0" = "nvidia" ]; then
printf "%b\nexec_always export WLR_NO_HARDWARE_CURSORS=1\n" "$*" >> /mnt/etc/sway/config
fi
if [ "$gpu0" = "vm" ]; then
printf "%b\nexec_always export WLR_NO_HARDWARE_CURSORS=1\n" "$*" >> /mnt/etc/sway/config
gpu0="amd"
fi

arch-chroot /mnt pacman -Rdd --noconfirm gnome-session

elif [ "$desktop0" = "swayv2" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $swayappsv2
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
cp /opt/configv2 /mnt/etc/sway/config
printf "%b\nif [ -z ""\$"\{DISPLAY\}" ] && [ ""\$"\{XDG_VTNR\}" -eq 1 ]; then\nexec sway\nfi\n" "$*" >> /mnt/etc/profile

if [ "$gpu0" = "nvidia" ]; then
printf "%b\nexec_always export WLR_NO_HARDWARE_CURSORS=1\n" "$*" >> /mnt/etc/sway/config
fi
if [ "$gpu0" = "vm" ]; then
printf "%b\nexec_always export WLR_NO_HARDWARE_CURSORS=1\n" "$*" >> /mnt/etc/sway/config
gpu0="amd"
fi

arch-chroot /mnt pacman -Rdd --noconfirm gnome-session

elif [ "$desktop0" = "cutefish" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $cutefishapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

elif [ "$desktop0" = "budgie" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $budgieapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "enlightenment" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $enlightenmentapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

elif [ "$desktop0" = "awesome" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $awesomeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable lightdm

fi

if [ $wifiadapter0 = "realtek" ]; then
clear
sleep 5
printf "%b\nCopying realtek dkms packages..\n" "$*"
sleep 5
cp /opt/rtw89bt-dkms-1.0.0-1-any.pkg.tar.zst /mnt/opt/
cp /opt/rtw89-dkms-1.0.2-1-any.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling drealtek dkms packages.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/rtw89bt-dkms-1.0.0-1-any.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm /opt/rtw89-dkms-1.0.2-1-any.pkg.tar.zst
sleep 2
printf "%b\nInstalled realtek dkms packages successfully.\n" "$*"
clear
fi

command4finished="1"
else
command4finished="0"
fi
done

}

coffee_install (){

clear

while [ "$pacmanfinished" != "1" ] && [ "$coffeeon00" = "yes" ]; do
if [ "$questionspassed" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $coffeeapps
clear
pacmanfinished="1"
else
pacmanfinished="0"
fi
done

}

bootloader_install (){

clear

while [ "$command8finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$grub0" = "true" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b\nGRUB UEFI for Nvidia selected.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

if [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

elif [ "$gpu0" = "amd" ]; then

printf "%b\nGRUB UEFI for AMD selected.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font efivar

if [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

elif [ "$gpu0" = "intel" ]; then

printf "%b\nGRUB UEFI for Intel selected.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

if [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub
cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi

elif [ "$grub0" = "true2" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b\nGRUB BIOS for Nvidia selected.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font

if [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
pacman -Sy --noconfirm
mkinitcpio -P
EOT

arch-chroot /mnt grub-install --target=i386-pc "$drive0"
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

elif [ "$gpu0" = "amd" ]; then

printf "%b\nGRUB BIOS for AMD selected.\n" "$*"


arch-chroot /mnt pacman -S --needed --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font

if [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc "$drive0"
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

elif [ "$gpu0" = "intel" ]; then

printf "%b\nGRUB BIOS for Intel selected.\n" "$*"

arch-chroot /mnt pacman -S --needed --noconfirm libadwaita grub os-prober breeze-grub terminus-font

if [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc "$drive0"
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi

elif [ "$grub0" = "false" ]; then

arch-chroot /mnt /bin/bash <<"EOT"
printf "%bInstalling SystemD-Bootloader UEFI\n" "$*"
mkinitcpio -P
bootctl install
EOT

printf "%bdefault arch.conf\ntimeout 5\nconsole-mode max\neditor no\n" "$*" >> /mnt/boot/loader/loader.conf

if [ "$native1" = "yes" ]; then
printf "%btitle Coffee-Linux 'Winey' (23.6.0)\n" "$*" >> /mnt/boot/loader/entries/arch.conf
fi

printf "%blinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /amd-ucode.img\ninitrd /initramfs-linux.img\n" "$*" >> /mnt/boot/loader/entries/arch.conf

fi

#-Bootloader-End

command8finished="1"
else
command8finished="0"
fi
done
command8finished="0"


}

gpu_install (){

clear

while [ "$command9finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$gpu0" = "nvidia" ]; then
printf "%b\nNvidia GPU selected.\nInstalling GPU Drivers first.\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
 if [ "$grub0" = "false" ]; then
  printf "%b\noptions root=LABEL=$drivename0 rw nvidia-drm.modeset=1 lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
 fi
 if [ "$desktop0" = "sway" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y sway-nvidia
 fi
 if [ "$desktop0" = "swayv2" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y sway-nvidia
 fi
elif [ "$gpu0" = "amd" ]; then
printf "%b\nAMD GPU selected.\nInstalling amdgpu-fan and corectrl as well\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm lib32-mesa lib32-libva-mesa-driver lib32-mesa-vdpau lib32-vulkan-mesa-layers libva-mesa-driver mesa mesa-utils mesa-vdpau opencl-clover-mesa opencl-rusticl-mesa vulkan-mesa-layers lib32-vulkan-radeon lib32-vulkan-radeon vulkan-radeon xf86-video-amdgpu
 if [ "$grub0" = "false" ]; then
  printf "%b\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
 fi
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl
elif [ "$gpu0" = "intel" ]; then
printf "%b\nIntel GPU selected.\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm mesa lib32-mesa xorg-server vulkan-intel vulkan-intel lib32-vulkan-intel libva-intel-driver libva-utils
 if [ "$grub0" = "false" ]; then
  printf "%b\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
 fi
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
fi

command9finished="1"
else
command9finished="0"
fi
done
command9finished="0"

}

java_install (){

clear

while [ "$command5finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear

if [ "$javaon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $javaapps
clear
fi

java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"
if [[ -z "$java1" ]] ; then
    echo "I'm broken :("
fi

arch-chroot /mnt archlinux-java set "$java1"

command5finished="1"
else
command5finished="0"
fi
done
command5finished="0"

}

vmware_install (){

clear

while [ "$command6finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$vmwareon" = "yes" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y vmware-workstation
clear
printf "%b1\n[Unit]\nDescription=VMware daemon\nRequires=vmware-usbarbitrator.service\nBefore=vmware-usbarbitrator.service\nAfter=network.target\n[Service]\nExecStart=/etc/init.d/vmware start\nExecStop=/etc/init.d/vmware stop\nPIDFile=/var/lock/subsys/vmware\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware.service

printf "%b1\n[Unit]\nDescription=VMware USB Arbitrator\nRequires=vmware.service\n[Service]\nExecStart=/usr/bin/vmware-usbarbitrator\nExecStop=/usr/bin/vmware-usbarbitrator --kill\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-usbarbitrator.service

printf "%b\n[Unit]\nDescription=VMware Networks\nWants=vmware-networks-configuration.service\nAfter=vmware-networks-configuration.service\n[Service]\nType=forking\nExecStartPre=-/sbin/modprobe vmnet\nExecStart=/usr/bin/vmware-networks --start\nExecStop=/usr/bin/vmware-networks --stop\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-networks-server.service

arch-chroot /mnt systemctl enable vmware-networks-server.service
arch-chroot /mnt systemctl enable vmware-usbarbitrator.service
arch-chroot /mnt systemctl enable vmware.service

fi


command6finished="1"
else
command6finished="0"
fi
done
command6finished="0"

}

browser_install (){

clear

while [ "$command18finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$webbrowser00" = "chrome" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
clear
elif [ "$webbrowser00" = "firefox" ]; then
arch-chroot /mnt pacman -Sy --noconfirm firefox
clear
elif [ "$webbrowser00" = "edge" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y microsoft-edge-stable
clear
fi

command18finished="1"
else
command18finished="0"
fi
done
command18finished="0"

}

office_install (){

clear

while [ "$command24finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$officeon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm libreoffice-fresh
clear
fi

command24finished="1"
else
command24finished="0"
fi
done
command24finished="0"

}

steam_install (){

clear

while [ "$command21finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$steamon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm mangohud gamescope steam-native-runtime wine wine-gecko wine-mono winetricks
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ntfix
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protonup-qt
clear
fi

command21finished="1"
else
command21finished="0"
fi
done
command21finished="0"

}

discord_install (){

clear

while [ "$command22finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$discordon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm discord
clear
fi

command22finished="1"
else
command22finished="0"
fi
done
command22finished="0"

}

lutris_install (){

clear

while [ "$command23finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$lutrison00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm lutris wine wine-gecko wine-mono winetricks
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
clear
fi

command23finished="1"
else
command23finished="0"
fi
done
command23finished="0"

}

heroic_install (){

clear

while [ "$command19finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$epicon00" = "yes" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
clear
arch-chroot /mnt pacman -Sy --noconfirm wine wine-gecko wine-mono winetricks
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
elif [ "$epicon00" = "no" ]; then
printf "%b\nHeroic not selected, moving on." "$*"
clear
fi

command19finished="1"
else
command19finished="0"
fi
done
command19finished="0"

}

github_install (){

clear

while [ "$command20finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$giton00" = "yes" ]; then
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y github-desktop
clear
elif [ "$giton00" = "no" ]; then
printf "%b\nGithub Desktop not selected, moving on." "$*"
clear
fi

command20finished="1"
else
command20finished="0"
fi
done
command20finished="0"

}

snapd_install (){

clear

while [ "$command7finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$snapon" = "yes" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
clear
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd
cp /opt/snapd-updater /mnt/opt/
arch-chroot /mnt chmod 755 /opt/snapd-updater
cp /opt/snapd-updater.service /mnt/lib/systemd/system/
arch-chroot /mnt systemctl enable snapd-updater.service

fi

command7finished="1"
else
command7finished="0"
fi
done
command7finished="0"

}

yay_install (){

clear

while [ "$yayinstallfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
 if [ "$coffeeon00" = "yes" ]; then
  arch-chroot /mnt pacman -Rdd --noconfirm archlinux-appstream-data
  clear
  printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y pamac-aur
  clear
  printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
  clear
  printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
  clear
  printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git
  clear
  printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-openswap
  clear
 fi
  if [ "$desktop0" = "gnome" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-themes-extra
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-ubuntu-dock
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-gtk4-desktop-icons-ng
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y yaru-gtk-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-icon-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-gnome-shell-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-session
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-sound-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-unity-theme
     clear
     arch-chroot /mnt pacman -Rdd --noconfirm mutter
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mutter-dynamic-buffering
     clear
     printf "%b1\ny\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gdm-settings
     clear
     rm -r /mnt/usr/share/wayland-sessions/gnome*
     rm -r /mnt/usr/share/xsessions/gnome*
  elif [ "$desktop0" = "gnomev2" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-themes-extra
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
     printf "%b1\ny\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gdm-settings
     clear
  elif [ "$desktop0" = "kde" ]; then
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y systemd-kcm
     clear
     if [ "$grub0" = "true" ]; then
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y kcm-grub2
     clear
     fi
   elif [ "$desktop0" = "cinnamon" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-themes
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-x-icons
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-y-icons
     clear
     printf "%b5\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-backgrounds
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mintlocale
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-themes-legacy
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-artwork
     clear
     arch-chroot /mnt pacman -Rdd --noconfirm lightdm-settings
     clear
     rm -r /mnt/usr/share/wayland-sessions/gnome*
     rm -r /mnt/usr/share/xsessions/gnome*
     clear
  elif [ "$desktop0" = "cinnamonv2" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
     rm -r /mnt/usr/share/wayland-sessions/gnome*
     rm -r /mnt/usr/share/xsessions/gnome*
     clear
  elif [ "$desktop0" = "mate" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mate-screensaver-hacks
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mate-tweak
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mate-menu
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-themes
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-x-icons
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-y-icons
     clear
     printf "%b5\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-backgrounds
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mintlocale
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-themes-legacy
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-artwork
     clear
  elif [ "$desktop0" = "matev2" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
     clear
  elif [ "$desktop0" = "xfce" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-themes
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-x-icons
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-y-icons
     clear
     printf "%b5\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-backgrounds
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mintlocale
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-themes-legacy
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-artwork
     clear
  elif [ "$desktop0" = "xfcev2" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
  elif [ "$desktop0" = "lxde" ]; then
     printf "%b1\n" "$*"
  elif [ "$desktop0" = "lxqt" ]; then
     printf "%b1\n" "$*"
  elif [ "$desktop0" = "sway" ]; then
     mkdir -p /mnt/usr/share/wayland-sessions/
     cp /opt/sway.desktop /mnt/usr/share/wayland-sessions/sway.desktop
     chmod +x /mnt/usr/share/wayland-sessions/sway.desktop
     arch-chroot /mnt systemctl enable sddm
     clear
  elif [ "$desktop0" = "swayv2" ]; then
     mkdir -p /mnt/usr/share/wayland-sessions/
     cp /opt/sway.desktop /mnt/usr/share/wayland-sessions/sway.desktop
     chmod +x /mnt/usr/share/wayland-sessions/sway.desktop
     arch-chroot /mnt systemctl enable sddm
     clear
  fi
yayinstallfinished="1"
else
yayinstallfinished="0"
fi
done

}

secureboot_install (){

clear

while [ "$command10finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$sbpass0" = "yes" ]; then
printf "%bGenerating CoffeeLinux Secure-Boot keys for your machine\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm efitools mokutil sbsigntools apparmor sbctl
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y shim-signed
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y preloader-signed
clear
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --reset
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password

arch-chroot /mnt cp /usr/share/preloader-signed/PreLoader.efi /boot/EFI/systemd
arch-chroot /mnt cp /usr/share/preloader-signed/HashTool.efi /boot/EFI/systemd
arch-chroot /mnt cp /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/loader.efi
arch-chroot /mnt efibootmgr --unicode --disk "$drive0" --part 1 --create --label "PreLoader" --loader /EFI/systemd/PreLoader.efi

arch-chroot /mnt mv /boot/EFI/BOOT/BOOTx64.EFI /boot/EFI/BOOT/grubx64.efi
arch-chroot /mnt cp /usr/share/shim-signed/shimx64.efi /boot/EFI/BOOT/BOOTx64.EFI
arch-chroot /mnt cp /usr/share/shim-signed/mmx64.efi /boot/EFI/BOOT/
arch-chroot /mnt efibootmgr --unicode --disk "$drive0" --part 1 --create --label "Shim" --loader /EFI/BOOT/BOOTx64.EFI

arch-chroot /mnt openssl req -newkey rsa:4096 -nodes -keyout MOK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Machine Owner Key/" -out MOK.crt
arch-chroot /mnt openssl x509 -outform DER -in MOK.crt -out MOK.cer
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/EFI/BOOT/grubx64.efi /boot/EFI/BOOT/grubx64.efi
cp /opt/999-sign_kernel_for_secureboot.hook /mnt/etc/pacman.d/hooks/999-sign_kernel_for_secureboot.hook
arch-chroot /mnt cp MOK.cer /boot/
arch-chroot /mnt cp MOK.crt /boot/
arch-chroot /mnt cp MOK.key /boot/
arch-chroot /mnt pacman -Sy --noconfirm
arch-chroot /mnt systemctl enable apparmor
arch-chroot /mnt systemctl enable systemd-boot-update.service
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl enable bluetooth.service
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service
clear

elif [ "$sbpass0" = "no" ]; then
printf "%b\nAdding AppArmor\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm apparmor
clear
arch-chroot /mnt systemctl enable apparmor
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl enable bluetooth.service
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

fi

command10finished="1"
else
command10finished="0"
fi
done
command10finished="0"

}


homedir_fix (){

clear

while [ "$command11finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%bAttempting to fix the home directory automatically now...\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart
clear
arch-chroot /mnt xdg-user-dirs-update
printf "%bCleaning up\n" "$*"

command11finished="1"
else
command11finished="0"
fi
done
command11finished="0"

}

lightdm_fix (){

clear

while [ "$command12finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt pacman -Syu
printf "%b\n[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm

command12finished="1"
else
command12finished="0"
fi
done
command12finished="0"

}

lightdm_fixv2 (){

clear

while [ "$command12finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt pacman -Syu
arch-chroot /mnt systemctl enable lightdm

command12finished="1"
else
command12finished="0"
fi
done
command12finished="0"

}

lightdm_fix_deepin (){

clear

while [ "$command13finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt pacman -Syu
printf "%b\n[Seat:*]\ngreeter-session=lightdm-deepin-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm

command13finished="1"
else
command13finished="0"
fi
done
command13finished="0"

}

lightdm_fix_xfce (){

clear

while [ "$command14finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b\n[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm
arch-chroot /mnt xfconf-query -c xfwm4 -p /general/vblank_mode -s glx
#rm -R /mnt/usr/share/backgrounds/linuxmint/default_background.jpg

command14finished="1"
else
command14finished="0"
fi
done
command14finished="0"

}

lightdm_fix_xfcev2 (){

clear

while [ "$command14finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt systemctl enable lightdm
arch-chroot /mnt xfconf-query -c xfwm4 -p /general/vblank_mode -s glx
#rm -R /mnt/usr/share/backgrounds/linuxmint/default_background.jpg

command14finished="1"
else
command14finished="0"
fi
done
command14finished="0"

}

success_check (){

clear

while [ "$command15finished" != "1" ] && [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$native1" = "yes" ]; then
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
  if [ "$coffeeon00" = "yes" ]; then
   cp -r /opt/* /mnt/opt/
   cp /usr/local/bin/coffeebrewer2 /mnt/usr/local/bin/
   arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer2
   mkdir -p /mnt/usr/share/wallpapers/coffee/
   mkdir -p /mnt/usr/share/backgrounds/gnome/
   cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
   cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
    if [ "$desktop0" = "gnome" ]; then
     cp /opt/coffee-updater /mnt/opt/
     arch-chroot /mnt chmod 755 /opt/coffee-updater
     cp /opt/coffee-updater.service /mnt/lib/systemd/system/
     arch-chroot /mnt systemctl enable coffee-updater.service
    elif [ "$desktop0" = "cinnamon" ]; then
     cp /opt/coffee-updater /mnt/opt/
     arch-chroot /mnt chmod 755 /opt/coffee-updater
     cp /opt/coffee-updater.service /mnt/lib/systemd/system/
     arch-chroot /mnt systemctl enable coffee-updater.service
    fi
   cp /opt/wallpaper-updater /mnt/opt/
   arch-chroot /mnt chmod 755 /opt/wallpaper-updater
   cp /opt/coffee-wallpapers.service /mnt/lib/systemd/system/
   arch-chroot /mnt systemctl enable coffee-wallpapers.service
  fi
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
fi

printf "%b\n Did the installer complete sussessfully? (Default: 1)\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's exit, something went wrong...\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac

if [ "$rebootcheck" = "1" ]; then
printf "%b\n" "$*"
elif [ "$rebootcheck" = "2" ]; then
umount -R /mnt
swapoff "$swap0"
printf "%bg\nn\n1\n\n\nt\n20\nw\n" "$*" | fdisk -W always "$drive0"
exit
elif [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; then
rebootcheck=1
printf "%b\n" "$*"
fi

command15finished="1"
else
command15finished="0"
fi
done
command15finished="0"

}

#=================================================
#-Main
#=================================================

#clear

while [ "$installationcheck" != "1" ] && [ "$installationcheck" != "2" ]; do

printf "%b\n Would you like to install Coffee Linux? (Default: 1)\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r installationcheck
case $installationcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's exit.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, selecting default..\n" "$*" ;;
esac


if [ "$installationcheck" = "1" ]; then
customtype2
questionare
set_swap
format_disks
set_network
base_install
set_locale
set_passwords
desktop_install
coffee_install
bootloader_install
gpu_install
java_install
vmware_install
browser_install
office_install
steam_install
discord_install
lutris_install
heroic_install
github_install
snapd_install
yay_install
secureboot_install
homedir_fix
 if [ "$desktop0" = "cinnamon" ]; then
  lightdm_fix
 elif [ "$desktop0" = "cinnamonv2" ]; then
  lightdm_fixv2
 elif [ "$desktop0" = "mate" ]; then
  lightdm_fix
 elif [ "$desktop0" = "matev2" ]; then
  lightdm_fixv2
 elif [ "$desktop0" = "xfce" ]; then
  lightdm_fix_xfce
 elif [ "$desktop0" = "xfcev2" ]; then
  lightdm_fix_xfcev2
 elif [ "$desktop0" = "deepin" ]; then
  lightdm_fix_deepin
 fi
success_check
printf "%b\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n" "$*"
umount -R /mnt
reboot
elif [ "$installationcheck" = "2" ]; then
printf "%b\nOkay, exiting the installer now..\n" "$*"
sleep 5
exit
elif [ "$installationcheck" != "1" ] && [ "$installationcheck" != "2" ]; then
installationcheck=1
customtype2
questionare
set_swap
format_disks
set_network
base_install
set_locale
set_passwords
desktop_install
coffee_install
bootloader_install
gpu_install
java_install
vmware_install
browser_install
office_install
steam_install
discord_install
lutris_install
heroic_install
github_install
snapd_install
yay_install
secureboot_install
homedir_fix
 if [ "$desktop0" = "cinnamon" ]; then
  lightdm_fix
 elif [ "$desktop0" = "cinnamonv2" ]; then
  lightdm_fixv2
 elif [ "$desktop0" = "mate" ]; then
  lightdm_fix
 elif [ "$desktop0" = "matev2" ]; then
  lightdm_fixv2
 elif [ "$desktop0" = "xfce" ]; then
  lightdm_fix_xfce
 elif [ "$desktop0" = "xfcev2" ]; then
  lightdm_fix_xfcev2
 elif [ "$desktop0" = "deepin" ]; then
  lightdm_fix_deepin
 fi
success_check
printf "%b\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n" "$*"
umount -R /mnt
reboot

fi
done

#============================
#End-Main
#============================

#End-Script
