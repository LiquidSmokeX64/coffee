#!/bin/sh

baseapps="dbus-broker-units amd-ucode mkinitcpio texinfo base base-devel dhcpcd intel-ucode iwd linux linux-firmware man-db man-pages nano networkmanager nmap sudo"

baseapps2="at-spi2-core git device-mapper gettext xz dosfstools efibootmgr freetype2 fuse2 libisoburn lzop mtools autogen help2man python rsync ttf-dejavu system-config-printer net-tools nfs-utils systemd-resolvconf tcpdump terminus-font testdisk ntfs-3g nvme-cli openconnect open-iscsi openssh open-vm-tools tmux tpm2-tss udftools usb_modeswitch usbmuxd usbutils openvpn partclone pcsclite ppp pptpclient qemu-guest-agent vpnc wireless-regdb wireless_tools wpa_supplicant xfsprogs xl2tpd zsh refind reflector rp-pppoe rsync rxvt-unicode-terminfo sbctl sbsigntools screen sdparm sg3_utils smartmontools sof-firmware squashfs-tools mkinitcpio mkinitcpio-archiso mkinitcpio-nfs-utils modemmanager mokutil mtools apparmor archinstall mlocate arch-install-scripts b43-fwcutter bind brltty broadcom-wl btrfs-progs clonezilla cloud-init cryptsetup darkhttpd ddrescue dhclient diffutils dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools exfatprogs f2fs-tools fatresize fsarchiver gpm gptfdisk grml-zsh-config hdparm hyperv jfsutils kitty-terminfo libfido2 libusb-compat linux linux-headers"

coffeeapps="faudio pavucontrol fwupd fwupd-efi glfw-wayland vulkan-validation-layers npm boost-libs gtk-update-icon-cache hwinfo libpwquality squashfs-tools yaml-cpp boost extra-cmake-modules git rhythmbox alsa-lib alsa-plugins amd-ucode rust archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server blueman bluez-libs cabextract chrony clang cmake colord cronie cups dbus dbus-python dconf directx-headers dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak gettext giflib gimp git glib2 glibc glslang gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk-engine-murrine hicolor-icon-theme innoextract lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libxcomposite lib32-libxinerama lib32-libxslt  lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libunwind libva libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors make meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opengl-man-pages pipewire pipewire-alsa pipewire-jack pipewire-pulse power-profiles-daemon python-gobject python-mako samba shellcheck shotwell  sudo systemd terminus-font tesseract-data-eng ttf-liberation udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vulkan-icd-loader w3m wireplumber xdg-utils xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader zenity zstd vlc opencl-clhpp opencl-headers"

javaapps="jre-openjdk"

kdeapps="pyside6 phonon-qt5-gstreamer libpulse noto-fonts noto-fonts-emoji gnu-free-fonts pyside2 cronie tesseract-data-eng qt6-multimedia-ffmpeg kpmcore wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack appstream-qt ark colord-kde gnome-color-manager gnome-disk-utility gnome-menus gtk4 kde-applications-meta kdevelop-python kgamma qt6 plasma plasma-nm kscreen kvantum plasma-meta plasma-wayland-protocols plasma-wayland-session sddm sddm-kcm xdg-desktop-portal-kde libsecret"

desktop0="kde"
native1=yes
swapcheck=2
hibernationpasscheck=1
coffeeon00=yes
webbrowser00=chrome
epicon00=yes
giton00=yes
steamon00=yes
discordon00=yes
lutrison00=yes
officeon00=yes
javaon00=yes
snapon="yes"
fs0="btrfs"
grub0="true"

questionare (){

clear

printf "%b" "\nSet your Username.\n"
read -r user00
printf "%b" "\n$user00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r usercheck
case $usercheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

#

clear

printf "%b" "\nSet your User Password.\n"
read -r userpass00
printf "%b" "\n$userpass00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

clear

printf "%b" "\nSet your Root Password.\n"
read -r userpass01
printf "%b" "\n$userpass01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

clear

printf "%b" "\nSet your PC name.\n"
read -r name00
printf "%b" "\n$name00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

clear

printf "%b" "\nSet your HardDrive Label (OS Partition Label).\n"
read -r name01
printf "%b" "\n$name01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

clear

while [ "$driveXpasscheck" != "1" ]; do
printf "%b" "\nListing Storage Devices for you.\n"
fdisk -l
printf "%b" "\n"
printf "%b" "\nWhich drive do you want Coffee Linux to install to? (Default: 1)\n"
printf "%b" "\n1 - NVME0N1"
printf "%b" "\n2 - NVME1N1"
printf "%b" "\n3 - SDA"
printf "%b" "\n4 - SDB"
printf "%b" "\n5 - VDA"
printf "%b" "\n6 - VDB\n"

read -r driveX
if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
  #*) printf "%b" "\nUnrecognized option, please try again: $user00\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
  #*) printf "%b" "\nUnrecognized option, please try again: $user00\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
  #*) printf "%b" "\nUnrecognized option, please try again: $user00\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
  #*) printf "%b" "\nUnrecognized option, please try again: $user00\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
  #*) printf "%b" "\nUnrecognized option, please try again: $user00\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
  #*) printf "%b" "\nUnrecognized option, please try again: $user00\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" != "1" ] && [ "$driveX" != "2" ] && [ "$driveX" != "3" ] && [ "$driveX" != "4" ] && [ "$driveX" != "5" ] && [ "$driveX" != "6" ]; then
driveX=1
drive="nvme0n1"
boot=p1
swap=p2
system=p3
driveXpasscheck=1

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
done

clear

while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; do
printf "%b" "\nWhat type of GPU do you have? (Default: 1)\n"
printf "%b" "\n1 - AMD\n"
printf "%b" "\n2 - Nvidia\n"
printf "%b" "\n3 - Intel\n"
printf "%b" "\n4 - Virtual GPU (VMware etc.)\n"

read -r gpucheck
case $gpucheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nA good choice.\n" ;;
  3) printf "%b" "\nA good choice.\n" ;;
  4) printf "%b" "\nA good choice.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$gpucheck" = "1" ]; then
gpu0="amd"
fi
if [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
fi
if [ "$gpucheck" = "3" ]; then
gpu0="intel"
fi
if [ "$gpucheck" = "4" ]; then
gpu0="vm"
fi
if [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; then
gpucheck=1
gpu0="amd"
fi
done

while [ "$netcheck00" != "1" ] && [ "$netcheck00" != "2" ] && [ "$netcheck00" != "3" ]; do

clear


printf "%b" "\nWhat type of network do you have? (Default: 1)\n"
printf "%b" "\n1 - Ethernet\n"
printf "%b" "\n2 - Wifi\n"
printf "%b" "\n3 - I have already connected to the internet\n"
read -r netcheck00
case $netcheck00 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  3) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$netcheck00" = "1" ]; then
netpass00=ethernet
fi
if [ "$netcheck00" = "2" ]; then
netpass00=wifi
fi
if [ "$netcheck00" = "3" ]; then
netpass00=ethernet
fi
if [ "$netcheck00" != "3" ] && [ "$netcheck00" != "2" ] && [ "$netcheck00" != "1" ]; then
netcheck00=3
netpass00=ethernet
fi
done

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b" "\nEthernet selected, or already connected, skipping this part.\n"
fi
if [ "$netpass00" = "wifi" ]; then
while [ "$wifipasscheck" != "1" ]; do
clear

rfkill unblock all
iwctl station list
printf "%b" "\nSet your Wifi device ID. (Usually 'wlan0')\n"
read -r wifi00
wifi0=$wifi00
printf "%b" "\n$wifi00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r wifipasscheck
case $wifipasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

done
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b" "\nNo Wifi, skipping this part.\n"
fi

if [ "$netpass00" = "wifi" ]; then
while [ "$ssidcheck" != "1" ]; do
iwctl station "$wifi0" get-networks
printf "%b" "\nSet your Network SSID (Your network name).\n"
read -r ssid00
ssid0=$ssid00
printf "%b" "\n$ssid00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r ssidcheck
case $ssidcheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b" "\nNo Wifi, skipping this part.\n"
fi

if [ "$netpass00" = "wifi" ]; then
while [ "$netpasswordcheck" != "1" ]; do
printf "%b" "\nEnter your Wifi password.\n"
read -r netpassword00
netpassword0=$netpassword00
printf "%b" "\n$netpassword00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r netpasswordcheck
case $netpasswordcheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
fi

questionspassed="yes"

clear

}

setup_install (){

clear

while [ "$command0finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$hibernationpasscheck" = "1" ]; then
HIBERNATING="1"
fi

while [ "$rampasscheck" != "1" ]; do

RAM=$(free -m | grep Mem | awk '{print $2}')

if [ "$RAM" -gt 2048 ] && [ "$RAM" -lt 8192 ]; then # if RAM is between 2 and 8 GB

    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="3"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 8192 ] && [ "$RAM" -lt 16384 ]; then # if RAM is between 8 and 16 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="2"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 32768  ]; then    # if RAM is more than 32 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="1"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$swapcheck" = "1" ]; then
    printf "%b" "\nEnter swap size in GB\n"
    read -r swapsize1
    swapsize="+""$((swapsize1))G"
    swap1=$swapsize
fi
if [ "$swapcheck" = "2" ]; then
    swapsize="+""$((RAM*MULTIPLIER))M"
    swap1=$swapsize
fi

rampasscheck="1"

done

command0finished="1"
else
command0finished="0"
fi
done
command0finished="0"

clear

while [ "$command17finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
#- Set variables for iwctl
clear
if [ "$netpass00" = "wifi" ]; then
rfkill unblock all
printf "%b" "\n" | iwctl device $wifi0 set-property Powered on
printf "%b" "\nPowering on wifi device for a minute..\n"
sleep 5
printf "%b" "\n" | iwctl --passphrase $netpassword0 station $wifi0 connect $ssid0
printf "%b" "\nEnsuring we have a connection...\n"
sleep 10
printf "%b" "\nSetting intial pacman keyring up...\n"
pacman-key --init
pacman-key --populate archlinux
printf "%b" "\nSet keys successfully..\n"
sleep 5
pacman -Syy --noconfirm archlinux-keyring
else
printf "%b" "\nWe are already connected to the internet, preparing for launch..\n"
sleep 10
printf "%b" "\nSetting intial local pacman keyring up...\n"
pacman-key --init
pacman-key --populate archlinux
printf "%b" "\nSet local pacman keys successfully..\n"
sleep 5
pacman -Syy --noconfirm archlinux-keyring
clear
fi

fi
command17finished="1"
done
command17finished="0"

clear

while [ "$command1finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "\nFormatting Partitions\n"
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
printf "%b" "g\nn\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n19\nt\n3\n20\nw\n" | fdisk -W always $drive0
mkfs.vfat -F 32 "$boot0"
mkswap "$swap0"
swapon "$swap0"
mkfs.btrfs -f -L "$drivename0" "$system0"
printf "%b" "\nMounting Disks\n"
mount "$system0" /mnt
mkdir /mnt/boot
mount "$boot0" /mnt/boot
clear

command1finished="1"
else
command1finished="0"
fi
done
command1finished="0"

}

os_install (){

clear

while [ "$pacstrapfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
pacstrap /mnt $baseapps
clear
arch-chroot /mnt pacman -Sy --noconfirm $baseapps2
clear

pacstrapfinished="1"
else
pacstrapfinished="0"
fi

done

clear

while [ "$command2finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt /bin/bash <<"EOT"
printf "%b" "\nSetting Locale\n"
ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc
printf "%b" "\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\n" >> /etc/locale.gen
printf "%b" "\nKEYMAP=us\n" >> /etc/vconsole.conf
printf "%b" "\nLANG=en_US.UTF-8" >> /etc/locale.conf
export LANG=en_US.UTF-8
locale-gen

EOT

#Setup sudo
arch-chroot /mnt /bin/bash <<"EOT"
cd /
printf "%b\n%%"w"heel ALL=(ALL:ALL) NOPASSWD: ALL\n" "$*" > /etc/sudoers.d/wheel
mkinitcpio -P

EOT

cp --dereference /etc/resolv.conf /mnt/etc/
arch-chroot /mnt pacman -Syu --noconfirm
clear

command2finished="1"
else
command2finished="0"
fi
done
command2finished="0"

clear

while [ "$command3finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear
cp /etc/pacman.conf /mnt/etc/pacman.conf
printf "%b" "\nSet Root Password\n"
printf "%b" "$userpass1\n$userpass1\n" | arch-chroot /mnt passwd
printf "%b" "Adding User Account\n"
arch-chroot /mnt useradd -m -G wheel,audio,video,users $user01
printf "%b" "\nSet User Password\n"
printf "%b" "$userpass0\n$userpass0\n" | arch-chroot /mnt passwd $user01
printf "%b" "$hostname0\n" >> /mnt/etc/hostname
printf "%b" "\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0\n" >> /mnt/etc/hosts
printf "%b" "Creating Links\n"
genfstab -U /mnt >> /mnt/etc/fstab
clear

command3finished="1"
else
command3finished="0"
fi
done
command3finished="0"

clear

while [ "$command4finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$desktop0" = "kde" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $kdeapps
clear
sleep 5
printf "%b" "\nCopying yay package..\n"
sleep 5
cp /opt/yay-12.2.0-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b" "\nInstalling yay.\n"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.2.0-1-x86_64.pkg.tar.zst
sleep 2
printf "%b" "\nInstalled yay successfully.\n"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

fi

command4finished="1"
else
command4finished="0"
fi
done

clear

while [ "$pacmanfinished" != "1" ] && [ "$coffeeon00" = "yes" ]; do
if [ "$questionspassed" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $coffeeapps
clear
pacmanfinished="1"
else
pacmanfinished="0"
fi
done

clear

while [ "$command8finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$grub0" = "true" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b" "\nGRUB UEFI for Nvidia selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi
if [ "$gpu0" = "amd" ]; then

printf "%b" "\nGRUB UEFI for AMD selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font efivar

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi
if [ "$gpu0" = "intel" ]; then

printf "%b" "\nGRUB UEFI for Intel selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub
cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi

fi

#-Bootloader-End

command8finished="1"
else
command8finished="0"
fi
done
command8finished="0"

clear

while [ "$command9finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$gpu0" = "nvidia" ]; then
printf "%b" "\nNvidia GPU selected.\nInstalling GPU Drivers first.\n"
arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
 if [ "$grub0" = "false" ]; then
  printf "%b" "\noptions root=LABEL=$drivename0 rw nvidia-drm.modeset=1 lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" >> /mnt/boot/loader/entries/arch.conf
 fi
 if [ "$desktop0" = "sway" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y sway-nvidia
 fi
 if [ "$desktop0" = "swayv2" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y sway-nvidia
 fi
fi
if [ "$gpu0" = "amd" ]; then
printf "%b" "\nAMD GPU selected.\nInstalling amdgpu-fan and corectrl as well\n"
arch-chroot /mnt pacman -Sy --noconfirm lib32-mesa lib32-libva-mesa-driver lib32-mesa-vdpau lib32-vulkan-mesa-layers libva-mesa-driver mesa mesa-utils mesa-vdpau opencl-clover-mesa opencl-rusticl-mesa vulkan-mesa-layers lib32-vulkan-radeon lib32-vulkan-radeon vulkan-radeon xf86-video-amdgpu
 if [ "$grub0" = "false" ]; then
  printf "%b" "\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" >> /mnt/boot/loader/entries/arch.conf
 fi
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl
fi
if [ "$gpu0" = "intel" ]; then
printf "%b" "\nIntel GPU selected.\n"
arch-chroot /mnt pacman -Sy --noconfirm mesa lib32-mesa xorg-server vulkan-intel vulkan-intel lib32-vulkan-intel libva-intel-driver libva-utils
 if [ "$grub0" = "false" ]; then
  printf "%b" "\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" >> /mnt/boot/loader/entries/arch.conf
 fi
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
fi

command9finished="1"
else
command9finished="0"
fi
done
command9finished="0"

clear

while [ "$command5finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear

if [ "$javaon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $javaapps
clear
fi

java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"

arch-chroot /mnt archlinux-java set "$java1"

command5finished="1"
else
command5finished="0"
fi
done
command5finished="0"

clear

while [ "$command18finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$webbrowser00" = "chrome" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
clear
fi

command18finished="1"
else
command18finished="0"
fi
done
command18finished="0"

clear

while [ "$command24finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$officeon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm libreoffice-fresh
clear
fi

command24finished="1"
else
command24finished="0"
fi
done
command24finished="0"

clear

while [ "$command21finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$steamon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm mangohud gamescope steam-native-runtime wine wine-gecko wine-mono winetricks
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ntfix
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protonup-qt
clear
fi

command21finished="1"
else
command21finished="0"
fi
done
command21finished="0"

clear

while [ "$command22finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$discordon00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm discord
clear
fi

command22finished="1"
else
command22finished="0"
fi
done
command22finished="0"

clear

while [ "$command23finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$lutrison00" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm lutris wine wine-gecko wine-mono winetricks
clear
fi

command23finished="1"
else
command23finished="0"
fi
done
command23finished="0"

clear

while [ "$command19finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$epicon00" = "yes" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
clear
fi

command19finished="1"
else
command19finished="0"
fi
done
command19finished="0"

clear

while [ "$command20finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$giton00" = "yes" ]; then
printf "%b" "2\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y github-desktop
clear
fi

command20finished="1"
else
command20finished="0"
fi
done
command20finished="0"

clear

while [ "$command7finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$snapon" = "yes" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
clear
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd
cp /opt/snapd-updater /mnt/opt/
arch-chroot /mnt chmod 755 /opt/snapd-updater
cp /opt/snapd-updater.service /mnt/lib/systemd/system/
arch-chroot /mnt systemctl enable snapd-updater.service

fi

command7finished="1"
else
command7finished="0"
fi
done
command7finished="0"

clear

while [ "$yayinstallfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
 if [ "$coffeeon00" = "yes" ]; then
  arch-chroot /mnt pacman -Rdd --noconfirm archlinux-appstream-data
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y pamac-aur
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-openswap
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y systemd-kcm
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y kcm-grub2
 fi
yayinstallfinished="1"
else
yayinstallfinished="0"
fi
done

clear

printf "%b" "\nActivating Services\n"
arch-chroot /mnt pacman -Sy --noconfirm apparmor
clear
arch-chroot /mnt systemctl enable apparmor
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl enable bluetooth.service
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

while [ "$command11finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "\nAttempting to fix the home directory automatically now...\n"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart
clear
arch-chroot /mnt xdg-user-dirs-update
printf "%b" "Cleaning up\n"

command11finished="1"
else
command11finished="0"
fi
done
command11finished="0"

clear

while [ "$command15finished" != "1" ] && [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$native1" = "yes" ]; then
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
  if [ "$coffeeon00" = "yes" ]; then
   cp -r /opt/* /mnt/opt/
   cp /usr/local/bin/coffeebrewer2 /mnt/usr/local/bin/
   cp /usr/local/bin/coffeebrewer3 /mnt/usr/local/bin/
   arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer2
   arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer3
   mkdir -p /mnt/usr/share/wallpapers/coffee/
   mkdir -p /mnt/usr/share/backgrounds/gnome/
   cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
   cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
   cp /opt/wallpaper-updater /mnt/opt/
   arch-chroot /mnt chmod 755 /opt/wallpaper-updater
   cp /opt/coffee-wallpapers.service /mnt/lib/systemd/system/
   arch-chroot /mnt systemctl enable coffee-wallpapers.service
  fi
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
fi

printf "%b" "\n Did the installer complete sussessfully? (Default: 1)\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's exit, something went wrong...\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$rebootcheck" = "1" ]; then
printf "%b" "\n"
fi
if [ "$rebootcheck" = "2" ]; then
umount -R /mnt
swapoff "$swap0"
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
exit
fi
if [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; then
rebootcheck=1
printf "%b" "\n"
fi

command15finished="1"
else
command15finished="0"
fi
done
command15finished="0"

}

#=================================================
#-Main
#=================================================

#clear

while [ "$installationcheck" != "1" ] && [ "$installationcheck" != "2" ]; do

printf "%b" "\n Would you like to install Coffee Linux? (Default: 1)\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r installationcheck
case $installationcheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's exit.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac


if [ "$installationcheck" = "1" ]; then
questionare
setup_install
os_install

printf "%b" "\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n"
umount -R /mnt
reboot
fi
if [ "$installationcheck" = "2" ]; then
printf "%b" "\nOkay, exiting the installer now..\n"
sleep 5
exit
fi
if [ "$installationcheck" != "1" ] && [ "$installationcheck" != "2" ]; then
installationcheck=1
questionare
setup_install
os_install

printf "%b" "\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n"
umount -R /mnt
reboot

fi
done

#============================
#End-Main
#============================

#End-Script
