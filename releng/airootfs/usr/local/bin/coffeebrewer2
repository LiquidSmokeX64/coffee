#!/bin/sh

baseapps="amd-ucode mkinitcpio texinfo base base-devel dhcpcd intel-ucode iwd linux linux-firmware man-db man-pages nano networkmanager nmap sudo"

baseapps2="git device-mapper gettext xz dosfstools efibootmgr freetype2 fuse2 libisoburn lzop mtools autogen help2man python rsync ttf-dejavu system-config-printer net-tools nfs-utils systemd-resolvconf tcpdump terminus-font testdisk ntfs-3g nvme-cli openconnect open-iscsi openssh open-vm-tools tmux tpm2-tss udftools usb_modeswitch usbmuxd usbutils openvpn partclone pcsclite ppp pptpclient qemu-guest-agent vpnc wireless-regdb wireless_tools wpa_supplicant xfsprogs xl2tpd zsh refind reflector rp-pppoe rsync rxvt-unicode-terminfo sbctl sbsigntools screen sdparm sg3_utils smartmontools sof-firmware squashfs-tools mkinitcpio mkinitcpio-archiso mkinitcpio-nfs-utils modemmanager mokutil mtools apparmor archinstall mlocate arch-install-scripts b43-fwcutter bind brltty broadcom-wl btrfs-progs clonezilla cloud-init cryptsetup darkhttpd ddrescue dhclient diffutils dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools exfatprogs f2fs-tools fatresize fsarchiver gpm gptfdisk grml-zsh-config hdparm hyperv jfsutils kitty-terminfo libfido2 libusb-compat linux linux-headers"

coffeeapps="fwupd fwupd-efi glfw-wayland vulkan-validation-layers npm boost-libs gtk-update-icon-cache hwinfo libpwquality squashfs-tools yaml-cpp boost extra-cmake-modules git rhythmbox alsa-lib alsa-plugins amd-ucode rust archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server blueman bluez-libs cabextract chrony clang cmake colord cronie cups dbus dbus-python dconf directx-headers dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak gettext giflib gimp git glib2 glibc glslang gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk-engine-murrine hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libxcomposite lib32-libxinerama lib32-libxslt  lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libunwind libva libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors make meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse power-profiles-daemon python-gobject python-mako samba shellcheck shotwell sudo systemd terminus-font tesseract-data-eng ttf-liberation udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vulkan-icd-loader w3m wireplumber xdg-utils xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader zenity zstd vlc opencl-clhpp opencl-headers"

gnomeapps="gnome-shell-extension-appindicator libpulse noto-fonts noto-fonts-emoji gnu-free-fonts pyside2 cronie tesseract-data-eng wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack gdm gnome gnome-photos gnome-color-manager gnome-console gnome-extra gnome-firmware gnome-keyring gnome-menus gnome-online-accounts gnome-text-editor gtk4 polkit-gnome xdg-desktop-portal-gnome"

kdeapps="phonon-qt5-gstreamer gnu-free-fonts pyside2 cronie tesseract-data-eng qt6-multimedia-ffmpeg kpmcore wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack appstream-qt ark colord-kde gnome-color-manager gnome-disk-utility gnome-menus gtk4 kde-applications-meta kdevelop-python kgamma5 qt6 plasma plasma-nm kscreen kuserfeedback kvantum plasma-meta plasma-wayland-protocols plasma-wayland-session sddm sddm-kcm xdg-desktop-portal-kde"

cinnamonapps="polkit polkit-gnome gnome-keyring libsecret wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack cinnamon cinnamon-translations geary gnome-calculator gnome-color-manager gnome-disk-utility gnome-keyring gnome-menus gnome-photos gnome-software gnome-terminal gnome-system-monitor gtk3 lightdm lightdm-slick-greeter xdg-desktop-portal-gtk gnome-text-editor"

mateapps="mate-polkit polkit libsecret gtk3 wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack engrampa eom gnome-calculator gnome-color-manager gnome-console gnome-disk-utility gnome-keyring gnome-menus leafpad marco mate mate-applet-dock mate-applet-streamer mate-common mate-extra mate-media mate-netbook mate-power-manager mate-system-monitor mate-terminal mozo orca pluma lightdm lightdm-slick-greeter gnome-text-editor"

xfceapps="polkit polkit-gnome gnome-keyring libsecret gtk3 wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack arc-gtk-theme galculator geary gnome-disk-utility gnome-keyring leafpad lightdm lightdm-slick-greeter pavucontrol thunar-archive-plugin thunar-media-tags-plugin xfce4 xfce4-battery-plugin xfce4-datetime-plugin xfce4-goodies xfce4-mount-plugin xfce4-netload-plugin xfce4-notifyd xfce4-screensaver xfce4-taskmanager xfce4-wavelan-plugin xfce4-weather-plugin xfce4-whiskermenu-plugin xfce4-xkb-plugin xfwm4"

lxdeapps="wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack lxde lxde-common lxdm lxpanel lxsession mousepad xcompmgr xdg-desktop-portal-lxqt"

lxqtapps="wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack lightdm lightdm-gtk-greeter lximage-qt lxqt lxqt-about lxqt-admin lxqt-archiver lxqt-config lxqt-globalkeys lxqt-notificationd lxqt-openssh-askpass lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-runner lxqt-session lxqt-sudo lxqt-themes mousepad obconf-qt oxygen-icons pavucontrol-qt pcmanfm-qt qterminal screengrab sddm xdg-desktop-portal-lxqt"

deepinapps="polkit polkit-gnome gnome-keyring gnome-extra libsecret deepin gtk3 gtk4 deepin-anything-arch deepin-kwin deepin-extra lightdm lightdm-deepin-greeter wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack"

i3apps="polkit polkit-gnome gnome-keyring libsecret gnome-text-editor gnome-console gnome-system-monitor nautilus i3-wm i3lock gtk3 i3status i3blocks micro lightdm lightdm-gtk-greeter rofi feh wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

swayapps="sddm gnome-disk-utility gnome-text-editor htop nemo polkit polkit-gnome gnome-keyring libsecret egl-wayland xorg-xwayland dmenu bemenu bemenu-wayland gtk3 bemenu-x11 bemenu-ncurses i3blocks sway swaybg swayidle swayimg swaylock wlroots seatd wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol wofi gnome-terminal gnome-themes-extra gnome-tweaks j4-dmenu-desktop xdg-desktop-portal-gtk"

cutefishapps="polkit polkit-gnome gnome-keyring libsecret cutefish-calculator gtk3 cutefish-core cutefish-dock cutefish-filemanager cutefish-icons cutefish-launcher cutefish-qt-plugins cutefish-screenlocker cutefish-settings cutefish-statusbar cutefish-terminal cutefish-wallpapers fishui libcutefish sddm rofi feh wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

budgieapps="polkit polkit-gnome gnome-keyring gnome-extra gnome-shell libsecret budgie-control-center gtk3 budgie-desktop budgie-desktop-view budgie-extras budgie-screensaver lightdm lightdm-gtk-greeter rofi gtk3 wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

awesomeapps="polkit polkit-gnome gnome-keyring libsecret awesome xterm gtk3 awesome-terminal-fonts lightdm lightdm-gtk-greeter rofi feh wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

enlightenmentapps="polkit polkit-gnome gnome-keyring libsecret enlightenment gtk3 lightdm lightdm-gtk-greeter rofi wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack pavucontrol dmenu"

questionare (){

declare -A options6=(
    [1]="ethernet"
    [2]="wifi"
    [3]="connected"
)

declare -A adapters=(
    [1]="realtek"
    [2]="other"
)

while true; do
    clear
    echo "What type of network do you have?"
    echo "1 - Ethernet"
    echo "2 - Wifi"
    echo "3 - I have already connected to the internet"

    read -r netcheck00

    if [[ ${options6[$netcheck00]} ]]; then
        netpass00=${options6[$netcheck00]}
        if [[ $netcheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

if [[ $netpass00 == "wifi" ]]; then
    while true; do
        clear

        echo "Is your wifi adapter Realtek?"
        echo "1 - Realtek"
        echo "2 - Other"

        read -r adaptercheck00

        if [[ ${adapters[$adaptercheck00]} ]]; then
            wifiadapter0=${adapters[$adaptercheck00]}
            if [[ $adaptercheck00 -eq 1 ]]; then
                echo "Perfect"
            else
                echo "Let's move on then."
            fi
            break
        else
            echo "Unrecognized option, please try again."
        fi
    done

    while true; do
        clear

        rfkill unblock all
        iwctl station list
        echo "Set your Wifi device ID. (Usually 'wlan0')"

        read -r wifi0

        echo "$wifi0. Is this correct?"
        echo "1 - yes"
        echo "2 - no"

        read -r wifipasscheck

        if [[ $wifipasscheck -eq 1 ]]; then
            echo "Perfect"
            break
        else
            echo "Let's retry."
        fi
    done

    while true; do
        clear

        iwctl station $wifi0 get-networks
        echo "Set your Network SSID (Your network name)."

        read -r ssid0

        echo "$ssid0. Is this correct?"
        echo "1 - yes"
        echo "2 - no"

        read -r ssidcheck

        if [[ $ssidcheck -eq 1 ]]; then
            echo "Perfect"
            break
        else
            echo "Let's retry."
        fi
    done

    while true; do
        clear

        echo "Enter your Wifi password."

        read -r netpassword0

        echo "$netpassword0. Is this correct?"
        echo "1 - yes"
        echo "2 - no"

        read -r netpasswordcheck

        if [[ $netpasswordcheck -eq 1 ]]; then
            echo "Perfect"
            break
        else
            echo "Let's retry."
        fi
    done
fi

clear

while true; do
    echo "Set your Username."
    read -r user00
    echo "$user00. Is this correct?"
    echo "1 - yes"
    echo "2 - no"

    read -r usercheck

    if [[ $usercheck -eq 1 ]]; then
        user01=$user00
        echo "Perfect"
        break
    else
        echo "Let's retry."
    fi
done

clear

while true; do
    echo "Set your User Password."
    read -r userpass00
    echo "$userpass00. Is this correct?"
    echo "1 - yes"
    echo "2 - no"

    read -r userpasscheck

    if [[ $userpasscheck -eq 1 ]]; then
        userpass0=$userpass00
        echo "Perfect"
        break
    else
        echo "Let's retry."
    fi
done

clear

while true; do
    echo "Set your Root Password."
    read -r userpass01
    echo "$userpass01. Is this correct?"
    echo "1 - yes"
    echo "2 - no"

    read -r rootpasscheck

    if [[ $rootpasscheck -eq 1 ]]; then
        userpass1=$userpass01
        echo "Perfect"
        break
    else
        echo "Let's retry."
    fi
done

clear

declare -A options6=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to enable Secure-Boot in the OS? (requires systemd-bootloader)"
    echo "1 - yes"
    echo "2 - no"

    read -r sbpasscheck

    if [[ ${options6[$sbpasscheck]} ]]; then
        sbpass0=${options6[$sbpasscheck]}
        if [[ $sbpasscheck -eq 1 ]]; then
            echo "Perfect"
        else
            echo "No SB, skipping this part."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

if [[ $sbpass0 == "yes" ]]; then
    while true; do
        echo "Set your UEFI/MOK Secure-Boot Password."
        read -r uefipass00
        echo "$uefipass00. Is this correct?"
        echo "1 - yes"
        echo "2 - no"

        read -r uefipasscheck

        if [[ $uefipasscheck -eq 1 ]]; then
            uefipass0=$uefipass00
            echo "Perfect"
            break
        else
            echo "Let's retry."
        fi
    done
fi

clear

while true; do
    echo "Set your PC name."
    read -r name00
    echo "$name00. Is this correct?"
    echo "1 - yes"
    echo "2 - no"

    read -r namepasscheck

    if [[ $namepasscheck -eq 1 ]]; then
        name0=$name00
        echo "Perfect"
        break
    else
        echo "Let's retry."
    fi
done

clear

while true; do
    echo "Set your HardDrive Label (OS Partition Label)."
    read -r name01
    echo "$name01. Is this correct?"
    echo "1 - yes"
    echo "2 - no"

    read -r name2passcheck

    if [[ $name2passcheck -eq 1 ]]; then
        name1=$name01
        echo "Perfect"
        break
    else
        echo "Let's retry."
    fi
done

native1=yes

clear

declare -A drives=(
    [1]="nvme0n1"
    [2]="nvme1n1"
    [3]="sda"
    [4]="sdb"
    [5]="vda"
    [6]="vdb"
)

while true; do
    echo "Listing Storage Devices for you."
    fdisk -l
    echo "Which drive do you want Coffee Linux to install to?"
    echo "1 - NVME0N1"
    echo "2 - NVME1N1"
    echo "3 - SDA"
    echo "4 - SDB"
    echo "5 - VDA"
    echo "6 - VDB"

    read -r driveX

    if [[ ${drives[$driveX]} ]]; then
        drive=${drives[$driveX]}
        if [[ $drive == nvme* ]]; then
            boot=p1
            swap=p2
            system=p3
        else
            boot=1
            swap=2
            system=3
        fi

        echo "$drive. Is this correct?"
        echo "1 - yes"
        echo "2 - no"

        read -r driveXpasscheck

        if [[ $driveXpasscheck -eq 1 ]]; then
            pfx="/dev/"
            drive0=$pfx$drive
            boot0=$drive0$boot
            swap0=$drive0$swap
            system0=$drive0$system
            break
        else
            echo "Let's retry."
        fi
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A options1=(
    [1]="Manual"
    [2]="Auto"
)

while true; do
    echo "Setting up swap size, do you want to manually configure or auto configure it based on your RAM size ?"
    echo "1 - Manual"
    echo "2 - Auto"

    read -r swapcheck

    if [[ ${options1[$swapcheck]} ]]; then
        if [[ $swapcheck -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done


clear

declare -A desktops1=(
    [1]="gnome"
    [2]="kde"
    [3]="cinnamon"
    [4]="mate"
    [5]="lxde"
    [6]="lxqt"
    [7]="xfce"
    [8]="deepin"
    [9]="i3"
    [10]="sway"
    [11]="cutefish"
    [12]="budgie"
    [13]="enlightenment"
    [14]="awesome"
)

while true; do
    echo "What desktop environment do you want?"
    echo "1 - Gnome"
    echo "2 - KDE"
    echo "3 - Cinnamon"
    echo "4 - Mate"
    echo "5 - LXDE"
    echo "6 - LXQT"
    echo "7 - XFCE"
    echo "8 - Deepin - WIP May not work."
    echo "9 - i3"
    echo "10 - Sway"
    echo "11 - Cutefish"
    echo "12 - Budgie"
    echo "13 - Enlightenment"
    echo "14 - Awesome"

    read -r desktopcheck

    if [[ ${desktops1[$desktopcheck]} ]]; then
        desktop0=${desktops1[$desktopcheck]}
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A options2=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to enable hibernation?"
    echo "1 - yes"
    echo "2 - no"

    read -r hibernationpasscheck

    if [[ ${options2[$hibernationpasscheck]} ]]; then
        if [[ $hibernationpasscheck -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A browsers=(
    [1]="chrome"
    [2]="firefox"
    [3]="edge"
)

while true; do
    echo "What type of network do you have?"
    echo "1 - Google Chrome"
    echo "2 - Firefox"
    echo "3 - Microsoft Edge"

    read -r webcheck00

    if [[ ${browsers[$webcheck00]} ]]; then
        webbrowser00=${browsers[$webcheck00]}
        if [[ $webcheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

fi

clear

declare -A options2=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to install Heroic Games Launcher for Epic Games and GoG games?"
    echo "1 - Yes"
    echo "2 - No"

    read -r heroiccheck00

    if [[ ${options2[$heroiccheck00]} ]]; then
        epicon00=${options2[$heroiccheck00]}
        if [[ $heroiccheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done


clear

declare -A options3=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to install Github Desktop app?"
    echo "1 - Yes"
    echo "2 - No"

    read -r githubcheck00

    if [[ ${options3[$githubcheck00]} ]]; then
        giton00=${options3[$githubcheck00]}
        if [[ $githubcheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done


clear

declare -A options4=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to install Steam Desktop?"
    echo "1 - Yes"
    echo "2 - No"

    read -r steamcheck00

    if [[ ${options4[$steamcheck00]} ]]; then
        steamon00=${options4[$steamcheck00]}
        if [[ $steamcheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A options5=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to install Discord app?"
    echo "1 - Yes"
    echo "2 - No"

    read -r discordcheck00

    if [[ ${options5[$discordcheck00]} ]]; then
        discordon00=${options5[$discordcheck00]}
        if [[ $discordcheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A option7=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to install Lutris app?"
    echo "1 - Yes"
    echo "2 - No"

    read -r lutrischeck00

    if [[ ${options7[$lutrischeck00]} ]]; then
        lutrison00=${options7[$lutrischeck00]}
        if [[ $lutrischeck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A option8=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like to install LibreOffice app bundle?\n"
    echo "1 - Yes"
    echo "2 - No"

    read -r officecheck00

    if [[ ${options8[$officecheck00]} ]]; then
        officeon00=${options8[$officecheck00]}
        if [[ $officecheck00 -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A option9=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like Snap-Store support (Snapd)?\n"
    echo "1 - Yes"
    echo "2 - No"

    read -r snapcheck

    if [[ ${options9[$snapcheck]} ]]; then
        snapon=${options9[$snapcheck]}
        if [[ $snapcheck -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

declare -A option10=(
    [1]="yes"
    [2]="no"
)

while true; do
    echo "Would you like VMWare Workstation?\n"
    echo "1 - Yes"
    echo "2 - No"

    read -r vmwarecheck

    if [[ ${options10[$vmwarecheck]} ]]; then
        vmwareon=${options10[$vmwarecheck]}
        if [[ $vmwarecheck -eq 1 ]]; then
            echo "Perfect"
        else
            echo "Let's move on then."
        fi
        break
    else
        echo "Unrecognized option, please try again."
    fi
done

clear

while [[ ! $gpucheck00 =~ ^(1|2|3|4)$ ]]; do
    echo -e "What graphics card type do you have?\n"
    echo -e "1 - AMD"
    echo -e "2 - Nvidia"
    echo -e "3 - Intel"
    echo -e "4 - Virtual GPU (VMware etc.)"
    read -r gpucheck00

    case $gpucheck00 in
        1) echo "Perfect."; gpuon0="amd";;
        2) echo "A good choice."; gpuon0="nvidia";;
        3) echo "A good choice."; gpuon0="intel";;
        4) echo "A good choice."; gpuon0="vm";;
        *) echo "Unrecognized option, please try again: $user00";;
    esac
done

clear

while [[ ! $fscheck =~ ^(1|2)$ ]]; do
    echo -e "Please select your preferred Filesystem type:\n"
    echo -e "1 - Ext4 (Recommended for general use)"
    echo -e "2 - BTRFS (Recommended for advanced users with specific needs)"
    read -r fscheck

    case $fscheck in
        1)
            echo "You've selected Ext4. This is a solid choice for most users."
            fs0="ext4"
            ;;
        2)
            echo "You've selected BTRFS. This filesystem offers advanced features like snapshotting and checksumming."
            fs0="btrfs"
            ;;
        *)
            echo "Invalid option: $fscheck. Please enter either 1 or 2."
            ;;
    esac
done

clear

while [[ ! $grubcheck =~ ^(1|2|3)$ ]]; do
    echo -e "Please select your preferred bootloader:\n"
    echo -e "1 - GRUB UEFI version (Recommended for most users, including those on VMs)"
    echo -e "2 - GRUB BIOS/MBR version (For older systems with BIOS firmware)"
    echo -e "3 - SystemD-Bootloader UEFI-Only (For secure-boot installations on actual hardware. Not recommended for unofficial installs)"
    read -r grubcheck

    case $grubcheck in
        1)
            echo "You've selected the GRUB UEFI version. This is a versatile choice compatible with most systems."
            grub0="true"
            ;;
        2)
            echo "You've selected the GRUB BIOS/MBR version. This is suitable for older systems with BIOS firmware."
            grub0="true2"
            ;;
        3)
            echo "You've selected the SystemD-Bootloader UEFI-Only. This is suitable for secure-boot installations on actual hardware."
            grub0="false"
            ;;
        *)
            echo "Invalid option: $grubcheck. Please enter either 1, 2, or 3."
            ;;
    esac
done

# Set questionspassed to yes after successful completion
questionspassed="yes"

}

set_swap() {
    # Ensure command0finished is not set to 1 prematurely
    command0finished="0"

    while [ "$command0finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Check if hibernation is enabled
            HIBERNATING=${hibernationpasscheck:="0"}

            while [ "$rampasscheck" != "1" ]; do
                # Get total RAM in MB
                RAM=$(free -m | awk '/^Mem:/ {print $2}')

                # Determine multiplier based on RAM size and hibernation status
                if ((RAM > 2048 && RAM < 8192)) || ((RAM > 8192 && RAM < 16384)) || ((RAM > 32768)); then
                    MULTIPLIER=${HIBERNATING:="1"}
                fi

                # Set swap size based on user input or calculated value
                echo -e "Enter swap size in GB or press enter to use the default size:"
                read -r swapsize1

                if [[ $swapsize1 ]]; then
                    swapsize="+${swapsize1}G"
                else
                    swapsize="+$((RAM*MULTIPLIER))M"
                fi

                swap1=$swapsize
                rampasscheck="1"
            done

            command0finished="1"
        fi
    done

    # Reset command0finished for next use
    command0finished="0"
}

clear

set_network() {
    # Ensure command17finished is not set to 1 prematurely
    command17finished="0"

    while [ "$command17finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Initialize pacman keyring and update package databases
            sleep 10
            pacman-key --init
            pacman -Syy

            # Set variables for iwctl
            if [ "$netpass00" = "wifi" ]; then
                # Unblock all devices and power on wifi device
                rfkill unblock all
                printf "%b\n" "$*" | iwctl device $wifi0 set-property Powered on

                # Connect to wifi network
                printf "%b\n" "$*" | iwctl --passphrase $netpassword0 station $wifi0 connect $ssid0

            elif [ "$netpass00" = "ethernet" ]; then
                echo "Ethernet connection detected. No additional setup required."

            elif [ "$netpass00" = "connected" ]; then
                echo "Already connected to the internet. No additional setup required."
            fi

            command17finished="1"
        fi
    done

    # Reset command17finished for next use
    command17finished="0"
}

format_disks() {
    # Ensure command1finished is not set to 1 prematurely
    command1finished="0"

    while [ "$command1finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Formatting Partitions
            echo -e "n\n1\n\n\nt\n20\nw\n" | fdisk -W always -u "$drive0"
            echo -e "n\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n19\nt\n3\n20\nw\n" | fdisk -W always -u "$drive0"

            # Creating filesystems
            mkfs.vfat -F 32 -L BOOT "$boot0"
            mkswap "$swap0"
            swapon "$swap0"

            # Creating filesystem based on user choice
            if [ "$fs0" = "btrfs" ]; then
                mkfs.btrfs -f -L "$drivename0" "$system0"
            elif [ "$fs0" = "ext4" ]; then
                mkfs.ext4 -L "$drivename0" "$system0"
            fi

            # Mounting Disks
            mount "$system0" /mnt
            mkdir -p /mnt/boot
            mount "$boot0" /mnt/boot

            # Updating package databases
            pacman -Syq --noconfirm archlinux-keyring
            pacman -Syyq --noconfirm

            command1finished="1"
        fi
    done

    # Reset command1finished for next use
    command1finished="0"
}

base_install() {
    # Ensure pacstrapfinished is not set to 1 prematurely
    pacstrapfinished="0"

    while [ "$pacstrapfinished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            echo "Installing base applications..."

            # Install base applications
            pacstrap /mnt $baseapps

            echo "Updating package databases and installing additional base applications..."

            # Update package databases and install additional base applications
            arch-chroot /mnt pacman -Sy --noconfirm $baseapps2

            echo "Installation of base applications completed."

            pacstrapfinished="1"
        fi
    done

    # Reset pacstrapfinished for next use
    pacstrapfinished="0"
}

set_locale() {
    # Ensure command2finished is not set to 1 prematurely
    command2finished="0"

    while [ "$command2finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            echo "Setting Locale..."

            arch-chroot /mnt /bin/bash <<EOT
ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc

echo "en_US ISO-8859-1
en_US.UTF-8 UTF-8" >> /etc/locale.gen

echo "KEYMAP=us" >> /etc/vconsole.conf
echo "LANG=en_US.UTF-8" >> /etc/locale.conf

export LANG=en_US.UTF-8
locale-gen

echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel

mkinitcpio -P
EOT

            cp --dereference /etc/resolv.conf /mnt/etc/
            arch-chroot /mnt pacman -Syu --noconfirm

            command2finished="1"
        fi
    done

    # Reset command2finished for next use
    command2finished="0"
}

set_passwords() {
    # Ensure command3finished is not set to 1 prematurely
    command3finished="0"

    while [ "$command3finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            echo "Updating package databases and keyring..."
            arch-chroot /mnt pacman -Sy --noconfirm archlinux-keyring
            cp /etc/pacman.conf /mnt/etc/pacman.conf
            arch-chroot /mnt pacman -Syy --noconfirm

            echo "Setting root password..."
            echo -e "$userpass1\n$userpass1" | arch-chroot /mnt passwd

            echo "Adding user account..."
            arch-chroot /mnt useradd -m -G wheel,audio,video,users $user01

            echo "Setting user password..."
            echo -e "$userpass0\n$userpass0" | arch-chroot /mnt passwd $user01

            echo "Setting hostname and updating hosts file..."
            echo "$hostname0" >> /mnt/etc/hostname
            echo -e "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0" >> /mnt/etc/hosts

            echo "Generating fstab file..."
            genfstab -U /mnt >> /mnt/etc/fstab

            command3finished="1"
        fi
    done

    # Reset command3finished for next use
    command3finished="0"
}

desktop_install() {
    # Ensure command4finished is not set to 1 prematurely
    command4finished="0"

    while [ "$command4finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$desktop0" = "gnome" ]; then
                echo "Installing GNOME desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $gnomeapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Removing gedit and gnome-terminal..."
                arch-chroot /mnt pacman -R --noconfirm gedit gnome-terminal

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                    gpuon0="amd"
                fi

                echo "Enabling gdm..."
                arch-chroot /mnt systemctl enable gdm

                command4finished="1"
            elif [ "$desktop0" = "kde" ]; then
                echo "Installing KDE desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $kdeapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling sddm..."
                arch-chroot /mnt systemctl enable sddm

                command4finished="1"
            elif [ "$desktop0" = "cinnamon" ]; then
                echo "Installing Cinnamon desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $cinnamonapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling lightdm..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "mate" ]; then
                echo "Installing MATE desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $mateapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling lightdm..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "lxde" ]; then
                echo "Installing LXDE desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $lxdeapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling lxdm..."
                arch-chroot /mnt systemctl enable lxdm

                command4finished="1"
            elif [ "$desktop0" = "lxqt" ]; then
                echo "Installing LXQT desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $lxqtapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling lxqt..."
                arch-chroot /mnt systemctl enable sddm

                command4finished="1"
            elif [ "$desktop0" = "xfce" ]; then
                echo "Installing XFCE desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $xfceapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling xfce..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "deepin" ]; then
                echo "Installing Deepin desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $deepinapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling deepin..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "i3" ]; then
                echo "Installing i3 desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $i3apps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling i3..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "sway" ]; then
                echo "Installing Sway desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $swayapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
                cp /opt/config /mnt/etc/sway/config
                # Append the following lines to /mnt/etc/profile
                printf "%b\n\
                # If DISPLAY is not set and XDG_VTNR equals 1\n\
                if [ -z \"\$DISPLAY\" ] && [ \"\$XDG_VTNR\" -eq 1 ]; then\n\
                # Execute sway\n\
                exec sway\n\
                fi\n" "$*" >> /mnt/etc/profile


                if [ "$gpuon0" = "nvidia" ]; then
                # Append the following lines to /mnt/etc/sway/config
                printf "%b\n\
                # Always execute the following command\n\
                exec_always export WLR_NO_HARDWARE_CURSORS=1\n" "$*" >> /mnt/etc/sway/config

                fi
                if [ "$gpuon0" = "vm" ]; then
                # Append the following lines to /mnt/etc/sway/config
                printf "%b\n\
                # Always execute the following command\n\
                exec_always export WLR_NO_HARDWARE_CURSORS=1\n" "$*" >> /mnt/etc/sway/config

                gpuon0="amd"
                fi

                arch-chroot /mnt pacman -Rdd --noconfirm gnome-session

                echo "Enabling sway..."

                command4finished="1"
            elif [ "$desktop0" = "cutefish" ]; then
                echo "Installing Cutefish desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $cutefishapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling cutefish..."
                arch-chroot /mnt systemctl enable sddm

                command4finished="1"
            elif [ "$desktop0" = "budgie" ]; then
                echo "Installing Budgie desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $budgieapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling budgie..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "enlightenment" ]; then
                echo "Installing Enlightenment desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $enlightenmentapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling enlightenment..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"
            elif [ "$desktop0" = "awesome" ]; then
                echo "Installing Awesome desktop environment..."
                arch-chroot /mnt pacman -Sy --noconfirm $awesomeapps

                echo "Copying yay package..."
                cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/

                echo "Installing yay..."
                arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst

                echo "Installed yay successfully."

                echo "Disabling systemd-resolved and systemd-networkd..."
                arch-chroot /mnt systemctl preset-all
                arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

                if [ "$gpuon0" = "vm" ]; then
                  gpuon0="amd"
                fi

                echo "Enabling awesome..."
                arch-chroot /mnt systemctl enable lightdm

                command4finished="1"

            fi
        fi
    done
    if [ $wifiadapter0 = "realtek" ]; then
    # Copy Realtek DKMS packages
    printf "%b\nCopying Realtek DKMS packages..\n" "$*"
    cp /opt/rtw89bt-dkms-1.0.0-1-any.pkg.tar.zst /mnt/opt/
    cp /opt/rtw89-dkms-1.0.2-1-any.pkg.tar.zst /mnt/opt/

    # Install Realtek DKMS packages
    printf "%b\nInstalling Realtek DKMS packages.\n" "$*"
    arch-chroot /mnt pacman -U --noconfirm /opt/rtw89bt-dkms-1.0.0-1-any.pkg.tar.zst
    arch-chroot /mnt pacman -U --noconfirm /opt/rtw89-dkms-1.0.2-1-any.pkg.tar.zst
    printf "%b\nInstalled Realtek DKMS packages successfully.\n" "$*"
    fi
    # Reset command4finished for next use
    command4finished="0"
}

coffee_install() {
    clear

    # Initialize the variable
    pacmanfinished="0"

    # Loop until the installation is finished
    while [ "$pacmanfinished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Install the applications if the questions have been passed
            arch-chroot /mnt pacman -Sy --noconfirm $coffeeapps
            clear

            # Mark the installation as finished
            pacmanfinished="1"
        fi
    done
}

gpu_install() {
    clear

    # Check if the preconditions for installation are met
    if [ "$questionspassed" = "yes" ]; then

        # Install the appropriate drivers based on the GPU
        if [ "$gpuon0" = "nvidia" ]; then
            arch-chroot /mnt pacman -Sy --noconfirm nvidia nvidia-utils nvidia-settings
            clear
        elif [ "$gpuon0" = "amd" ]; then
            arch-chroot /mnt pacman -Sy --noconfirm xf86-video-amdgpu lib32-libva-mesa-driver lib32-mesa-vdpau lib32-vulkan-mesa-layers lib32-vulkan-radeon lib32-vulkan-radeon libva-mesa-driver mesa mesa-utils mesa-vdpau vulkan-mesa-layers vulkan-radeon opencl-clover-mesa opencl-rusticl-mesa
            clear
        elif [ "$gpuon0" = "intel" ]; then
            arch-chroot /mnt pacman -Sy --noconfirm xf86-video-intel
        fi

    else
        echo "Preconditions for installation are not met."
    fi
}

java_install() {
    clear

    # Check if the preconditions for installation are met
    if [ "$questionspassed" = "yes" ]; then

        # Get the current Java version
        java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"

        # Check if a Java version was found
        if [[ -z "$java1" ]] ; then
            echo "Java version not found :("
        else
            # Set the Java version
            arch-chroot /mnt archlinux-java set "$java1"
            echo "Java version set to $java1"
        fi

    else
        echo "Preconditions for installation are not met."
    fi
}

vmware_install() {
    clear

    # Loop until the installation is finished
    while [ "$command6finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ] && [ "$vmwareon" = "yes" ]; then
            # Install VMware Workstation
            printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y vmware-workstation
            clear

            # Create and enable VMware services
            printf "%b1\n[Unit]\nDescription=VMware daemon\nRequires=vmware-usbarbitrator.service\nBefore=vmware-usbarbitrator.service\nAfter=network.target\n[Service]\nExecStart=/etc/init.d/vmware start\nExecStop=/etc/init.d/vmware stop\nPIDFile=/var/lock/subsys/vmware\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware.service
            printf "%b1\n[Unit]\nDescription=VMware USB Arbitrator\nRequires=vmware.service\n[Service]\nExecStart=/usr/bin/vmware-usbarbitrator\nExecStop=/usr/bin/vmware-usbarbitrator --kill\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-usbarbitrator.service
            printf "%b\n[Unit]\nDescription=VMware Networks\nWants=vmware-networks-configuration.service\nAfter=vmware-networks-configuration.service\n[Service]\nType=forking\nExecStartPre=-/sbin/modprobe vmnet\nExecStart=/usr/bin/vmware-networks --start\nExecStop=/usr/bin/vmware-networks --stop\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-networks-server.service

            arch-chroot /mnt systemctl enable vmware-networks-server.service
            arch-chroot /mnt systemctl enable vmware-usbarbitrator.service
            arch-chroot /mnt systemctl enable vmware.service

            # Mark the installation as finished
            command6finished="1"
        else
            command6finished="0"
        fi
    done

    # Reset the variable for the next installation
    command6finished="0"
}


browser_install() {
    clear

    # Initialize the variable
    command18finished="0"

    # Loop until the installation is finished
    while [ "$command18finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Install the appropriate browser based on the user's choice
            if [ "$webbrowser00" = "chrome" ]; then
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
                clear
            elif [ "$webbrowser00" = "firefox" ]; then
                arch-chroot /mnt pacman -Sy --noconfirm firefox
                clear
            elif [ "$webbrowser00" = "edge" ]; then
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y microsoft-edge-stable
                clear
            fi

            # Mark the installation as finished
            command18finished="1"
        fi
    done

    # Reset the variable for the next installation
    command18finished="0"
}

office_install() {
    clear

    # Initialize the variable
    command24finished="0"

    # Loop until the installation is finished
    while [ "$command24finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$officeon00" = "yes" ]; then
                # Install LibreOffice if the user has chosen to do so
                arch-chroot /mnt pacman -Sy --noconfirm libreoffice-fresh
                clear
            fi

            # Mark the installation as finished
            command24finished="1"
        fi
    done

    # Reset the variable for the next installation
    command24finished="0"
}

steam_install() {
    clear

    # Initialize the variable
    command21finished="0"

    # Loop until the installation is finished
    while [ "$command21finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$steamon00" = "yes" ]; then
                # Install the necessary packages for Steam
                arch-chroot /mnt pacman -Sy --noconfirm mangohud gamescope steam wine wine-gecko wine-mono winetricks
                clear

                # Install additional packages using yay
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks game-devices-udev dxvk-bin ntfix
                clear
            fi

            # Mark the installation as finished
            command21finished="1"
        fi
    done

    # Reset the variable for the next installation
    command21finished="0"
}

discord_install() {
    clear

    # Initialize the variable
    command22finished="0"

    # Loop until the installation is finished
    while [ "$command22finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$discordon00" = "yes" ]; then
                # Install Discord if the user has chosen to do so
                arch-chroot /mnt pacman -Sy --noconfirm discord
                clear
            fi

            # Mark the installation as finished
            command22finished="1"
        fi
    done

    # Reset the variable for the next installation
    command22finished="0"
}

lutris_install() {
    clear

    # Initialize the variable
    command23finished="0"

    # Loop until the installation is finished
    while [ "$command23finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$lutrison00" = "yes" ]; then
                # Install Lutris and related packages
                arch-chroot /mnt pacman -Sy --noconfirm lutris wine wine-gecko wine-mono winetricks
                clear

                # Install additional packages using yay
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev dxvk-bin
                clear
            fi

            # Mark the installation as finished
            command23finished="1"
        fi
    done

    # Reset the variable for the next installation
    command23finished="0"
}

heroic_install() {
    clear

    # Initialize the variable
    command19finished="0"

    # Loop until the installation is finished
    while [ "$command19finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$epicon00" = "yes" ]; then
                # Install Heroic Games Launcher and related packages
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
                clear

                arch-chroot /mnt pacman -Sy --noconfirm wine wine-gecko wine-mono winetricks
                clear

                # Install additional packages using yay
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev dxvk-bin
                clear
            elif [ "$epicon00" = "no" ]; then
                printf "%b\nHeroic not selected, moving on." "$*"
                clear
            fi

            # Mark the installation as finished
            command19finished="1"
        fi
    done

    # Reset the variable for the next installation
    command19finished="0"
}

github_install() {
    clear

    # Initialize the variable
    command20finished="0"

    # Loop until the installation is finished
    while [ "$command20finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$giton00" = "yes" ]; then
                # Install GitHub Desktop if the user has chosen to do so
                printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y github-desktop
                clear
            elif [ "$giton00" = "no" ]; then
                printf "%b\nGithub Desktop not selected, moving on." "$*"
                clear
            fi

            # Mark the installation as finished
            command20finished="1"
        fi
    done

    # Reset the variable for the next installation
    command20finished="0"
}

snapd_install() {
    clear

    # Initialize the variable
    command7finished="0"

    # Loop until the installation is finished
    while [ "$command7finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$snapon" = "yes" ]; then
                # Install snapd and snapd-glib using yay
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd snapd-glib
                clear

                # Enable snapd and snapd.apparmor services
                arch-chroot /mnt systemctl enable snapd.apparmor
                arch-chroot /mnt systemctl enable snapd

                # Mark the installation as finished
                command7finished="1"
            fi
        fi
    done

    # Reset the variable for the next installation
    command7finished="0"
}

bootloader_install () {
    clear
    while [ "$command8finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Common packages for all cases
            arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

            if [ $desktop0 = "kde" ]; then
                arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
            fi

            # GRUB UEFI case
            if [ "$grub0" = "true" ]; then
                printf "%b\nGRUB UEFI for %s selected.\n" "$*" "$gpuon0"
                arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

                # GPU specific settings
                if [ "$gpuon0" = "nvidia" ]; then
                    cp /opt/grub-nvidia/grub /mnt/etc/default/
                elif [ "$gpuon0" = "amd" ]; then
                    arch-chroot /mnt pacman -S --noconfirm corectrl
                    cp /opt/grub-amd/grub /mnt/etc/default/
                fi

                # Common GRUB UEFI settings
                arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

            # GRUB BIOS case
            elif [ "$grub0" = "true2" ]; then
                printf "%b\nGRUB BIOS for %s selected.\nInstalling GPU Drivers first.\n" "$*" "$gpuon0"

                # GPU specific settings
                if [ "$gpuon0" = "nvidia" ]; then
                    cp /opt/grub-nvidia/grub /mnt/etc/default/
                elif [ "$gpuon0" = "amd" ]; then
                    arch-chroot /mnt pacman -S --needed --noconfirm corectrl
                    cp /opt/grub-amd/grub /mnt/etc/default/
                fi

                # Common GRUB BIOS settings
                arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

                arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=i386-pc "$drive0"
grub-mkconfig -o /boot/grub/grub.cfg
EOT

            # SystemD-Bootloader UEFI case
            elif [ "$grub0" = "false" ]; then

                printf "%bInstalling SystemD-Bootloader UEFI\n" "$*"

                arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
bootctl install
EOT

                printf "%bdefault arch.conf\ntimeout 5\nconsole-mode max\neditor no\n" "$*" >> /mnt/boot/loader/loader.conf

                if [ "$native1" = "yes" ]; then
                    printf "%btitle Coffee-Linux 'Winey' (24.0.0)\n" "$*" >> /mnt/boot/loader/entries/arch.conf
                fi

                printf "%blinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /amd-ucode.img\ninitrd /initramfs-linux.img\n" "$*" >> /mnt/boot/loader/entries/arch.conf

            fi

            command8finished="1"
        else
            command8finished="0"
        fi
    done

    command8finished="0"
}

bootloader_gpu_install () {
    clear
    while [ "$command9finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            printf "%b\nSystemD-Bootloader UEFI for %s selected.\n" "$*" "$gpuon0"

            # Common settings for both Nvidia and AMD
            if [ "$grub0" = "false" ]; then
                printf "%b\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
            fi

            # GPU specific settings
            if [ "$gpuon0" = "nvidia" ]; then
                if [ "$desktop0" = "sway" ]; then
                    arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y sway-nvidia
                fi
            elif [ "$gpuon0" = "amd" ]; then
                arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
                arch-chroot /mnt pacman -Sy --noconfirm corectrl
            fi

            command9finished="1"
        else
            command9finished="0"
        fi
    done

    command9finished="0"
}

yay_install() {
    clear

    # Loop until the installation is finished
    while [ "$yayinstallfinished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            arch-chroot /mnt pacman -Rdd --noconfirm archlinux-appstream-data

            # List of common packages to install
            packages=("pamac-aur" "ast-firmware" "mkinitcpio-firmware" "text-engine-git" "mkinitcpio-openswap")

            # Install common packages
            for package in "${packages[@]}"; do
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y "$package"
                clear
            done

            # Additional installation for GNOME desktop
            if [ "$desktop0" = "gnome" ]; then
                gnome_packages=("gnome-themes-extra" "humanity-icon-theme" "gnome-shell-extension-ubuntu-dock" "gnome-shell-extension-gtk4-desktop-icons-ng"
                                "yaru-gtk-theme" "yaru-icon-theme" "yaru-gnome-shell-theme" "yaru-session"
                                "yaru-sound-theme" "yaru-unity-theme")

                # Install GNOME packages
                for gnome_package in "${gnome_packages[@]}"; do
                    printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y "$gnome_package"
                    clear
                done

                arch-chroot /mnt pacman -Rdd --noconfirm mutter
                clear

                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mutter-dynamic-buffering
                clear

                printf "%b1\ny\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gdm-settings
                clear

                rm -r /mnt/usr/share/wayland-sessions/gnome*
                rm -r /mnt/usr/share/xsessions/gnome*
            elif [ "$desktop0" = "kde" ]; then
                # Install systemd-kcm if the desktop environment is KDE
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y systemd-kcm

                if [ "$grub0" = "true" ]; then
                # Install kcm-grub2 if GRUB is used as the bootloader
                printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm kcm-grub2
                fi
            elif [ "$desktop0" = "cinnamon" ]; then
                # List of packages to install
                packages=("lightdm-settings" "mint-themes" "mint-x-icons" "mint-y-icons" "mint-backgrounds" "mintlocale" "humanity-icon-theme" "mint-themes-legacy" "mint-artwork")

                # Install packages
                for package in "${packages[@]}"; do
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y "$package"
                clear
                done

                # Remove lightdm-settings
                arch-chroot /mnt pacman -Rdd --noconfirm lightdm-settings
                clear

                # Remove GNOME sessions
                rm -r /mnt/usr/share/wayland-sessions/gnome*
                rm -r /mnt/usr/share/xsessions/gnome*
                clear
            elif [ "$desktop0" = "mate" ]; then
                # List of packages to install
                packages=("lightdm-settings" "mate-screensaver-hacks" "mate-tweak" "mate-menu" "mint-themes" "mint-x-icons" "mint-y-icons" "mint-backgrounds" "mintlocale" "mint-themes-legacy" "mint-artwork")

                # Install packages
                for package in "${packages[@]}"; do
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y "$package"
                clear
                done
            elif [ "$desktop0" = "xfce" ]; then
                # List of packages to install
                packages=("lightdm-settings" "mint-themes" "mint-x-icons" "mint-y-icons" "mint-backgrounds" "mintlocale" "humanity-icon-theme" "mint-themes-legacy" "mint-artwork")

                # Install packages
                for package in "${packages[@]}"; do
                printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y "$package"
                clear
                done
            elif [ "$desktop0" = "lxde" ]; then
                printf "%b1\n" "$*"
            elif [ "$desktop0" = "lxqt" ]; then
                printf "%b1\n" "$*"
            elif [ "$desktop0" = "sway" ]; then
                # Create directory for wayland sessions if it doesn't exist
                mkdir -p /mnt/usr/share/wayland-sessions/

                # Copy the sway desktop entry to the wayland sessions directory
                cp /opt/sway.desktop /mnt/usr/share/wayland-sessions/sway.desktop

                # Make the sway desktop entry executable
                chmod +x /mnt/usr/share/wayland-sessions/sway.desktop

                # Enable sddm service
                arch-chroot /mnt systemctl enable sddm
            fi
            yayinstallfinished="1"
        else
            yayinstallfinished="0"
        fi
    done

    # Reset the variable for the next installation
    yayinstallfinished="0"
}

secureboot_install () {
    # Clear the terminal
    clear

    # Loop until the command is finished
    while [ "$command10finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$sbpass0" = "yes" ]; then
                echo "Generating CoffeeLinux Secure-Boot keys for your machine"

                # Install necessary packages
                arch-chroot /mnt pacman -Sy --noconfirm efitools mokutil sbsigntools apparmor sbctl

                # Install shim-signed and preloader-signed
                printf "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y shim-signed
                printf "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y preloader-signed

                # Reset MOK password
                printf "$uefipass0\n$uefipass0\n" | arch-chroot /mnt mokutil --password
                printf "$uefipass0\n$uefipass0\n" | arch-chroot /mnt mokutil --reset
                printf "$uefipass0\n$uefipass0\n" | arch-chroot /mnt mokutil --password

                # Copy necessary files
                arch-chroot /mnt cp /usr/share/preloader-signed/PreLoader.efi /boot/EFI/systemd
                arch-chroot /mnt cp /usr/share/preloader-signed/HashTool.efi /boot/EFI/systemd
                arch-chroot /mnt cp /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/loader.efi

                # Create new boot entry
                arch-chroot /mnt efibootmgr --unicode --disk "$drive0" --part 1 --create --label "PreLoader" --loader /EFI/systemd/PreLoader.efi

                # Move and copy necessary files
                arch-chroot /mnt mv /boot/EFI/BOOT/BOOTx64.EFI /boot/EFI/BOOT/grubx64.efi
                arch-chroot /mnt cp /usr/share/shim-signed/shimx64.efi /boot/EFI/BOOT/BOOTx64.EFI
                arch-chroot /mnt cp /usr/share/shim-signed/mmx64.efi /boot/EFI/BOOT/

                # Create new boot entry
                arch-chroot /mnt efibootmgr --unicode --disk "$drive0" --part 1 --create --label "Shim" --loader /EFI/BOOT/BOOTx64.EFI

                # Generate and sign keys
                arch-chroot /mnt openssl req -newkey rsa:4096 -nodes -keyout MOK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Machine Owner Key/" -out MOK.crt
                arch-chroot /mnt openssl x509 -outform DER -in MOK.crt -out MOK.cer
                arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux
                arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/EFI/BOOT/grubx64.efi /boot/EFI/BOOT/grubx64.efi

                # Copy necessary files
                cp /opt/999-sign_kernel_for_secureboot.hook /mnt/etc/pacman.d/hooks/999-sign_kernel_for_secureboot.hook
                arch-chroot /mnt cp MOK.cer /boot/
                arch-chroot /mnt cp MOK.crt /boot/
                arch-chroot /mnt cp MOK.key /boot/

                # Update package database
                arch-chroot /mnt pacman -Sy --noconfirm

                # Enable necessary services
                arch-chroot /mnt systemctl enable apparmor
                arch-chroot /mnt systemctl enable systemd-boot-update.service
                arch-chroot /mnt systemctl enable dhcpcd
                arch-chroot /mnt systemctl enable cronie
                arch-chroot /mnt systemctl enable chronyd
                arch-chroot /mnt systemctl enable NetworkManager
                arch-chroot /mnt systemctl enable firewalld
                arch-chroot /mnt systemctl enable cups
                arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service
            elif [ "$sbpass0" = "no" ]; then
                echo "Adding AppArmor"

                # Install necessary packages
                arch-chroot /mnt pacman -Sy --noconfirm apparmor

                # Enable necessary services
                arch-chroot /mnt systemctl enable apparmor
                arch-chroot /mnt systemctl enable dhcpcd
                arch-chroot /mnt systemctl enable cronie
                arch-chroot /mnt systemctl enable chronyd
                arch-chroot /mnt systemctl enable NetworkManager
                arch-chroot /mnt systemctl enable firewalld
                arch-chroot /mnt systemctl enable cups
                arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service
            fi

            command10finished="1"
        else
            command10finished="0"
        fi
    done
    command10finished="0"
}

homedir_fix () {
    # Clear the terminal
    clear

    # Loop until the command is finished
    while [ "$command11finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            echo "Attempting to fix the home directory automatically now..."

            # Install necessary packages
            arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs

            # Install xdg-environment and xdg-autostart
            printf "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
            printf "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart

            # Update user directories
            arch-chroot /mnt xdg-user-dirs-update

            echo "Cleaning up"

            command11finished="1"
        else
            command11finished="0"
        fi
    done
    command11finished="0"
}


lightdm_fix () {
    # Clear the terminal
    clear

    # Loop until the command is finished
    while [ "$command12finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Update package database and upgrade packages
            arch-chroot /mnt pacman -Syu

            # Configure LightDM
            printf "[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" >> /mnt/etc/lightdm/lightdm.conf

            # Enable LightDM service
            arch-chroot /mnt systemctl enable lightdm

            command12finished="1"
        else
            command12finished="0"
        fi
    done
    command12finished="0"
}

lightdm_fix_deepin () {
    # Clear the terminal
    clear

    # Loop until the command is finished
    while [ "$command13finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Update package database and upgrade packages
            arch-chroot /mnt pacman -Syu

            # Configure LightDM for Deepin
            printf "[Seat:*]\ngreeter-session=lightdm-deepin-greeter\n" >> /mnt/etc/lightdm/lightdm.conf

            # Enable LightDM service
            arch-chroot /mnt systemctl enable lightdm

            command13finished="1"
        else
            command13finished="0"
        fi
    done
    command13finished="0"
}

lightdm_fix_xfce () {
    # Clear the terminal
    clear

    # Loop until the command is finished
    while [ "$command14finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            # Configure LightDM for XFCE
            printf "[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" >> /mnt/etc/lightdm/lightdm.conf

            # Enable LightDM service
            arch-chroot /mnt systemctl enable lightdm

            # Set vblank_mode to glx for xfwm4
            arch-chroot /mnt xfconf-query -c xfwm4 -p /general/vblank_mode -s glx

            # Uncomment the line below if you want to remove the default background
            # arch-chroot /mnt rm -R /usr/share/backgrounds/linuxmint/default_background.jpg

            command14finished="1"
        else
            command14finished="0"
        fi
    done
    command14finished="0"
}

success_check () {
    # Clear the terminal
    clear

    # Loop until the command is finished
    while [ "$command15finished" != "1" ]; do
        if [ "$questionspassed" = "yes" ]; then
            if [ "$native1" = "yes" ]; then
                # Create necessary directories
                mkdir -p /mnt/usr/share/wallpapers/coffee/
                mkdir -p /mnt/usr/share/backgrounds/gnome/

                # Copy necessary files
                cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
                cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
                cp /opt/os-release /mnt/etc/
                cp /opt/lsb-release /mnt/etc/
                cp -r /opt/* /mnt/opt/
                cp /usr/local/bin/coffeebrewer2 /mnt/usr/local/bin/

                # Set permissions
                arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer2
            fi

            # Check if the installer completed successfully
            echo "Did the installer complete successfully?"
            echo "1 - yes"
            echo "2 - no"
            read -r rebootcheck
            case $rebootcheck in
                1) echo "Perfect" ;;
                *) echo "Let's exit, something went wrong..." ;;
            esac

            # If the installer did not complete successfully, unmount and exit
            if [ "$rebootcheck" != "1" ]; then
                umount -R /mnt
                swapoff "$swap0"
                printf "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
                exit
            fi

            command15finished="1"
        else
            command15finished="0"
        fi
    done
    command15finished="0"
}


#=================================================
#-Main
#=================================================

#clear

while [ "$command16finished" != "1" ]; do
    # Copy lsb-release to /etc
    cp /opt/lsb-release /etc/lsb-release

    # Ask user if they want to install Coffee Linux
    echo "Would you like to install Coffee Linux?"
    echo "1 - yes"
    echo "2 - no"
    read -r installationcheck
    case $installationcheck in
        1) echo "Perfect" ;;
        *) echo "Let's exit."; exit ;;
    esac

    # If user wants to install, proceed with installation steps
    if [ "$installationcheck" = "1" ]; then
        questionare
        set_swap
        set_network
        format_disks
        base_install
        set_locale
        set_passwords
        desktop_install
        coffee_install
        gpu_install
        java_install
        vmware_install
        browser_install
        office_install
        steam_install
        discord_install
        lutris_install
        heroic_install
        github_install
        snapd_install
        bootloader_install
        bootloader_gpu_install
        yay_install
        secureboot_install
        homedir_fix

        # Choose the correct lightdm fix based on the desktop environment
        if [ "$desktop0" = "cinnamon" ]; then
            lightdm_fix
        elif [ "$desktop0" = "mate" ]; then
            lightdm_fix
        elif [ "$desktop0" = "xfce" ]; then
            lightdm_fix_xfce
        elif [ "$desktop0" = "deepin" ]; then
            lightdm_fix_deepin
        fi

        success_check

        echo "Excellent. Let's proceed to reboot. Please eject/remove the installation medium."

        # Unmount and reboot
        umount -R /mnt
        reboot
    fi
done


#============================
#End-Main
