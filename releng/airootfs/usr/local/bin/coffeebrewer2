#!/bin/sh

baseapps="amd-ucode mkinitcpio texinfo base base-devel dhcpcd intel-ucode iwd linux linux-firmware man-db man-pages nano networkmanager nmap sudo"

baseapps2="git device-mapper gettext xz dosfstools efibootmgr freetype2 fuse2 libisoburn lzop mtools autogen help2man python rsync ttf-dejavu system-config-printer net-tools nfs-utils systemd-resolvconf tcpdump terminus-font testdisk ntfs-3g nvme-cli openconnect open-iscsi openssh open-vm-tools tmux tpm2-tss udftools usb_modeswitch usbmuxd usbutils openvpn partclone pcsclite ppp pptpclient qemu-guest-agent vpnc wireless-regdb wireless_tools wpa_supplicant xfsprogs xl2tpd zsh refind reflector rp-pppoe rsync rxvt-unicode-terminfo sbctl sbsigntools screen sdparm sg3_utils smartmontools sof-firmware squashfs-tools mkinitcpio mkinitcpio-archiso mkinitcpio-nfs-utils modemmanager mokutil mtools apparmor archinstall mlocate arch-install-scripts b43-fwcutter bind brltty broadcom-wl btrfs-progs clonezilla cloud-init cryptsetup darkhttpd ddrescue dhclient diffutils dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools exfatprogs f2fs-tools fatresize fsarchiver gpm gptfdisk grml-zsh-config hdparm hyperv jfsutils kitty-terminfo libfido2 libusb-compat linux linux-headers"

coffeeapps="glfw-wayland mangohud gamescope vulkan-validation-layers npm boost-libs qt6-3d qt6-base gtk-update-icon-cache hwinfo libpwquality qt6-svg solid squashfs-tools yaml-cpp boost extra-cmake-modules git qt6-tools qt6-translations rhythmbox alsa-lib alsa-plugins amd-ucode rust archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server blueman bluez-libs cabextract chrony clang cmake colord cronie cups dbus dbus-python dconf directx-headers discord dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak gettext giflib gimp git glib2 glibc glslang gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk-engine-murrine hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lutris make mesa mesa-utils mesa-vdpau meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba shellcheck shotwell steam-native-runtime sudo systemd terminus-font tesseract-data-eng ttf-liberation udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader zenity zstd vlc opencl-clhpp opencl-clover-mesa opencl-headers opencl-rusticl-mesa"

gnomeapps="libpulse noto-fonts noto-fonts-emoji gtk3 phonon-qt5-gstreamer gnu-free-fonts pyside2 cronie tesseract-data-eng qt6-multimedia-ffmpeg wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack gdm gnome gnome-photos gnome-color-manager gnome-console gnome-extra gnome-firmware gnome-keyring gnome-menus gnome-online-accounts gnome-text-editor gtk4 polkit-gnome xdg-desktop-portal-gnome"

kdeapps="phonon-qt5-gstreamer gnu-free-fonts pyside2 cronie tesseract-data-eng qt6-multimedia-ffmpeg kconfig kcoreaddons ki18n kiconthemes kio kpmcore wireplumber pipewire-pulse pipewire pipewire-alsa pipewire-jack appstream-qt ark colord-kde gnome-color-manager gnome-disk-utility gnome-menus gtk4 kde-applications-meta kdevelop-python kgamma5 knewstuff qt6 plasma plasma-nm kscreen kuserfeedback kvantum plasma-framework plasma-meta plasma-wayland-protocols plasma-wayland-session sddm sddm-kcm xdg-desktop-portal-kde"

questionare (){

while [ "$netcheck00" != "1" ] && [ "$netcheck00" != "2" ]; do

clear

printf "%b\nWhat type of network do you have?\n" "$*"
printf "%b\n1 - Ethernet\n" "$*"
printf "%b\n2 - Wifi\n" "$*"
read -r netcheck00
case $netcheck00 in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again..\n" "$*" ;;
esac
done
if [ "$netcheck00" = "1" ]; then
netpass00=ethernet
elif [ "$netcheck00" = "2" ]; then
netpass00=wifi
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b\nNo Wifi, skipping this part.\n" "$*"
elif [ "$netpass00" = "wifi" ]; then
while [ "$wifipasscheck" != "1" ]; do
clear

while [ "$adaptercheck00" != "1" ] && [ "$adaptercheck00" != "2" ]; do
printf "%b\nIs your wifi adapter Realtek?\n" "$*"
printf "%b\n1 - Realtek\n" "$*"
printf "%b\n2 - Other\n" "$*"
read -r adaptercheck00
printf "%b\n$adaptercheck00 Is this correct?\n" "$*"
case $adaptercheck00 in
1) printf "%b\nPerfect\n" "$*" ;;
2) printf "%b\nLet's move on then.\n" "$*" ;;
*) printf "%b\nUnrecognized option, please try again..\n" "$*" ;;
esac
if [ "$adaptercheck00" = "1" ]; then
wifiadapter0="realtek"
elif [ "$adaptercheck00" = "2" ]; then
wifiadapter0="other"
fi
done
clear

printf "%b\nSet your Wifi device ID. (Usually 'wlan0')\n" "$*"
read -r wifi00
wifi0=$wifi00
printf "%b\n$wifi00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r wifipasscheck
case $wifipasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b\nNo Wifi, skipping this part.\n" "$*"
elif [ "$netpass00" = "wifi" ]; then
while [ "$ssidcheck" != "1" ]; do
printf "%b\nSet your Network SSID (Your network name).\n" "$*"
read -r ssid00
ssid0=$ssid00
printf "%b\n$ssid00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r ssidcheck
case $ssidcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
fi

clear

if [ "$netpass00" = "ethernet" ]; then
printf "%b\nNo Wifi, skipping this part.\n" "$*"
elif [ "$netpass00" = "wifi" ]; then
while [ "$netpasswordcheck" != "1" ]; do
printf "%b\nEnter your Wifi password.\n" "$*"
read -r netpassword00
netpassword0=$netpassword00
printf "%b\n$netpassword00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r netpasswordcheck
case $netpasswordcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
fi

clear

while [ "$usercheck" != "1" ]; do
printf "%b\nSet your Username.\n" "$*"
read -r user00
printf "%b\n$user00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r usercheck
case $usercheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$usercheck" = "1" ]; then 
user01=$user00
fi
#

clear

while [ "$userpasscheck" != "1" ]; do
printf "%b\nSet your User Password.\n" "$*"
read -r userpass00
printf "%b\n$userpass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$userpasscheck" = "1" ]; then 
userpass0=$userpass00
fi
#

clear

while [ "$rootpasscheck" != "1" ]; do
printf "%b\nSet your Root Password.\n" "$*"
read -r userpass01
printf "%b\n$userpass01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$rootpasscheck" = "1" ]; then 
userpass1=$userpass01
fi

clear

while [ "$sbpasscheck" != "1" ] && [ "$sbpasscheck" != "2" ]; do
printf "%b\nWould you like to enable Secure-Boot in the OS? (requires systemd-bootloader)\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r sbpasscheck
case $sbpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$sbpasscheck" = "1" ]; then
sbpass0=yes
elif [ "$sbpasscheck" = "2" ]; then
sbpass0=no
fi
#
if [ "$sbpass0" = "no" ]; then
printf "%b\nNo SB, skipping this part.\n" "$*"
elif [ "$sbpass0" = "yes" ]; then
while [ "$uefipasscheck" != "1" ]; do
printf "%b\nSet your UEFI/MOK Secure-Boot Password.\n" "$*"
read -r uefipass00
printf "%b\n$uefipass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r uefipasscheck
case $uefipasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
fi

if [ "$uefipasscheck" = "1" ]; then 
uefipass0=$uefipass00
fi

clear

while [ "$namepasscheck" != "1" ]; do
printf "%b\nSet your PC name.\n" "$*"
read -r name00
printf "%b\n$name00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

#

clear

while [ "$name2passcheck" != "1" ]; do
printf "%b\nSet your HardDrive Label (OS Partition Label).\n" "$*"
read -r name01
printf "%b\n$name01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi
#

native1=yes

clear

while [ "$driveXpasscheck" != "1" ]; do
printf "%b\nListing Storage Devices for you.\n" "$*"
fdisk -l
printf "%b\n" "$*"
printf "%b\nWhich drive do you want Coffee Linux to install to?\n" "$*"
printf "%b\n1 - NVME0N1" "$*"
printf "%b\n2 - NVME1N1" "$*"
printf "%b\n3 - SDA" "$*"
printf "%b\n4 - SDB" "$*"
printf "%b\n5 - VDA" "$*"
printf "%b\n6 - VDB\n" "$*"

read -r driveX
if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3
elif [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3
elif [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3
elif [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3
elif [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3
elif [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3
fi

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
else
exit
fi

clear

while [ "$swapcheck" != "1" ] && [ "$swapcheck" != "2" ]; do
printf "%b\nSetting up swap size, do you want to manually configure or auto configure it based on your RAM size ?\n" "$*"
printf "%b\n1 - Manual\n" "$*"
printf "%b\n2 - Auto\n" "$*"
read -r swapcheck 
case $swapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

clear

while [ "$desktopcheck" != "1" ] && [ "$desktopcheck" != "2" ]; do

printf "%b\nWhat desktop environment do you want?\n" "$*"
printf "%b\n1 - Gnome\n" "$*"
printf "%b\n2 - KDE\n" "$*"

read -r desktopcheck
case $desktopcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$desktopcheck" = "1" ]; then
desktop0="gnome"

elif [ "$desktopcheck" = "2" ]; then
desktop0="kde"

fi

clear

while [ "$hibernationpasscheck" != "1" ] && [ "$hibernationpasscheck" != "2" ]; do
printf "%b\nWould you like to enable hibernation?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r hibernationpasscheck
case $hibernationpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again.\n" "$*" ;;
esac
done

clear

while [ "$snapcheck" != "1" ] && [ "$snapcheck" != "2" ]; do
printf "%b\nWould you like Snap-Store support (Snapd) ?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r snapcheck
case $snapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$snapcheck" = "1" ]; then
snapon="yes"
elif [ "$snapcheck" = "2" ]; then
snapon="no"
fi

clear

while [ "$vmwarecheck" != "1" ] && [ "$vmwarecheck" != "2" ]; do
printf "%b\nWould you like VMWare Workstation?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r vmwarecheck
case $vmwarecheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$vmwarecheck" = "1" ]; then
vmwareon="yes"
elif [ "$vmwarecheck" = "2" ]; then
vmwareon="no"
fi

clear

while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ]; do
printf "%b\nDo you have an amd or nvidia graphics card? -- Intel ARC not yet supported.\n" "$*"
printf "%b\n1 - AMD\n" "$*"
printf "%b\n2 - Nvidia\n" "$*"
printf "%b\n3 - Virtual GPU (VMware etc.)\n" "$*"

read -r gpucheck
case $gpucheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  3) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$gpucheck" = "1" ]; then
gpu0="amd"
elif [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
elif [ "$gpucheck" = "3" ]; then
gpu0="vm"
fi

clear

while [ "$fscheck" != "1" ] && [ "$fscheck" != "2" ]; do
printf "%b\nWould you like Ext4 or BTRFS Filesystem type?\n" "$*"
printf "%b\n1 - Ext4\n" "$*"
printf "%b\n2 - BTRFS\n" "$*"

read -r fscheck
case $fscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$fscheck" = "1" ]; then
fs0="ext4"
elif [ "$fscheck" = "2" ]; then
fs0="btrfs"
fi

clear

while [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ] && [ "$grubcheck" != "3" ]; do
printf "%b\nWould you like GRUB or SystemD-Bootloader?\nGRUB is more compatible with VMs.\nUnofficial Installs MUST use SystemD and be using actual hardware.\n" "$*"
printf "%b\n1 - GRUB UEFI version\n" "$*"
printf "%b\n2 - GRUB BIOS/MBR version\n" "$*"
printf "%b\n3 - SystemD-Bootloader UEFI-Only (for secure-boot installations.)\n" "$*"
read -r grubcheck
case $grubcheck in
  1) printf "%b\nPerfect.\n" "$*" ;;
  2) printf "%b\nGreat Choice.\n" "$*" ;;
  3) printf "%b\nGood Choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again.\n" "$*" ;;
esac
done

if [ "$grubcheck" = "1" ]; then
grub0="true"
questionspassed="yes"
elif [ "$grubcheck" = "2" ]; then
grub0="true2"
questionspassed="yes"
elif [ "$grubcheck" = "3" ]; then
grub0="false"
questionspassed="yes"
fi

}

set_swap (){

clear

while [ "$command0finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$hibernationpasscheck" = "1" ]; then
HIBERNATING="1"
fi

while [ "$rampasscheck" != "1" ]; do

RAM=$(free -m | grep Mem | awk '{print $2}')

if [ "$RAM" -gt 2048 ] && [ "$RAM" -lt 8192 ]; then # if RAM is between 2 and 8 GB
    
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="3"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 8192 ] && [ "$RAM" -lt 16384 ]; then # if RAM is between 8 and 16 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="2"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 32768  ]; then    # if RAM is more than 32 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="1"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$swapcheck" = "1" ]; then
    printf "%b\nEnter swap size in GB\n" "$*"
    read -r swapsize1
    swapsize="+""$((swapsize1))G"
    swap1=$swapsize
elif [ "$swapcheck" = "2" ]; then
    swapsize="+""$((RAM*MULTIPLIER))M"
    swap1=$swapsize
fi

rampasscheck="1"

done

command0finished="1"
else
command0finished="0"
fi
done
command0finished="0"

}

clear

set_network (){

while [ "$command17finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
#- Set variables for iwctl
if [ "$netpass00" = "wifi" ]; then

rfkill unblock all
printf "%b\n" "$*" | iwctl device $wifi0 set-property Powered on
printf "%b\nPowering on wifi device for a minute..\n" "$*"
sleep 5
printf "%b\n" "$*" | iwctl --passphrase $netpassword0 station $wifi0 connect $ssid0
printf "%b\nEnsuring we have a connection...\n" "$*"
sleep 10
printf "%b\nSetting intial pacman keyring up...\n" "$*"
pacman-key --init
printf "%b\nSet keys successfully..\n" "$*"
sleep 5
pacman -Syy
else
printf "%b\nNo wifi selected, preparing for launch..\n" "$*"
sleep 10
printf "%b\nSetting intial local pacman keyring up...\n" "$*"
pacman-key --init
printf "%b\nSet local pacman keys successfully..\n" "$*"
sleep 5
pacman -Syy
fi

fi
command17finished="1"
done
command17finished="0"
}

format_disks (){

clear

while [ "$command1finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b\nFormatting Partitions\n" "$*"
printf "%bg\nn\n1\n\n\nt\n20\nw\n" "$*" | fdisk -W always "$drive0"
printf "%bg\nn\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n20\nw\n" "$*" | fdisk -W always "$drive0"
mkfs.vfat -F 32 "$boot0"
mkswap "$swap0"
swapon "$swap0"

if [ "$fs0" = "btrfs" ]; then
mkfs.btrfs -f -L "$drivename0" "$system0"
elif [ "$fs0" = "ext4" ]; then
mkfs.ext4 -L "$drivename0" "$system0"
fi
printf "%b\nMounting Disks\n" "$*"
mount "$system0" /mnt
mkdir /mnt/boot
mount "$boot0" /mnt/boot
printf "%b\nEnable Repos\n" "$*"
#printf "%b\n[multilib]\nInclude = /etc/pacman.d/mirrorlist
#printf "%b\n[andontie-aur]\nServer = https://aur.andontie.net/\$arch\nSigLevel = Never\n" "$*" >> /etc/pacman.conf
pacman -Sy --noconfirm archlinux-keyring
pacman -Syy --noconfirm

command1finished="1"
else
command1finished="0"
fi
done
command1finished="0"

}

base_install (){

clear

while [ "$pacstrapfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
#dd if=/dev/sda/arch/x86_64/airootfs.sfs of=$drive0 bs=1M status=progress 
pacstrap /mnt $baseapps
clear
arch-chroot /mnt pacman -Sy --noconfirm $baseapps2
	
if [ $wifiadapter0 = "realtek" ]; then
arch-chroot /mnt /bin/bash <<"EOT"
cd /opt/
git clone https://github.com/lwfinger/rtw89.git
cd /opt/rtw89
make
make install
insmod rtw89core.ko
insmod rtw89pci.ko
insmod rtw_8852b.ko
insmod rtw_8852be.ko
modprobe -v rtw89pci
modprobe -v rtw_8852b
modprobe -v rtw_8852be
cp -r /lib/modules/6.4.11-arch1-1/kernel/drivers/net/wireless/realtek/rtw89/* /lib/firmware/rtw89/
cp -r /lib/modules/6.4.11-arch1-1/kernel/drivers/net/wireless/realtek/rtw89/* /usr/lib/firmware/rtw89/
cp -r /lib/modules/6.4.11-arch1-1/kernel/drivers/net/wireless/realtek/rtw89/* /usr/lib/modules/6.4.11-arch1-1/kernel/drivers/net/wireless/realtek/rtw89/
#insmod /lib/modules/6.4.11-arch1-1/kernel/drivers/net/wireless/realtek/rtw89/rtw_8852be.ko
cd
rm -r /opt/rtw89/
mkinitcpio -P
	
EOT
	
fi

pacstrapfinished="1"
else
pacstrapfinished="0"
fi

done

}

set_locale (){

clear

while [ "$command2finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt /bin/bash <<"EOT"
printf "%b\nSetting Locale\n" "$*"
ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc
printf "%b\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\n" "$*" >> /etc/locale.gen
printf "%b\nKEYMAP=us\n" "$*" >> /etc/vconsole.conf
printf "%b\nLANG=en_US.UTF-8" "$*" >> /etc/locale.conf
export LANG=en_US.UTF-8
locale-gen
cd /
printf "%b\n%%"w"heel ALL=(ALL:ALL) NOPASSWD: ALL\n" "$*" > /etc/sudoers.d/wheel
mkinitcpio -P

EOT

cp --dereference /etc/resolv.conf /mnt/etc/
arch-chroot /mnt pacman -Syu --noconfirm

command2finished="1"
else
command2finished="0"
fi
done
command2finished="0"

}

set_passwords (){

clear

while [ "$command3finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt pacman -Syy --noconfirm
arch-chroot /mnt pacman -Sy --noconfirm archlinux-keyring
cp /etc/pacman.conf /mnt/etc/pacman.conf
arch-chroot /mnt pacman -Syy --noconfirm
printf "%b\nSet Root Password\n" "$*"
printf "%b$userpass1\n$userpass1\n" "$*" | arch-chroot /mnt passwd 
printf "%bAdding User Account\n" "$*"
arch-chroot /mnt useradd -m -G wheel,audio,video,users $user01 
printf "%b\nSet User Password\n" "$*"
printf "%b$userpass0\n$userpass0\n" "$*" | arch-chroot /mnt passwd $user01
printf "%b$hostname0\n" "$*" >> /mnt/etc/hostname
printf "%b\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0\n" "$*" >> /mnt/etc/hosts
printf "%bCreating Links\n" "$*" 
genfstab -U /mnt >> /mnt/etc/fstab

command3finished="1"
else
command3finished="0"
fi
done
command3finished="0"

}

desktop_install (){

clear

while [ "$command4finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$desktop0" = "gnome" ]; then 

clear
arch-chroot /mnt pacman -Sy --noconfirm $gnomeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt pacman -R --noconfirm gedit gnome-terminal
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
#arch-chroot /mnt systemctl enable systemd-user-sessions systemd-logind

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable gdm

elif [ "$desktop0" = "kde" ]; then 

clear

arch-chroot /mnt pacman -Sy --noconfirm $kdeapps
clear
sleep 5
printf "%b\nCopying yay package..\n" "$*"
sleep 5
cp /opt/yay-12.1.2-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b\nInstalling yay.\n" "$*"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.1.2-1-x86_64.pkg.tar.zst
sleep 2
printf "%b\nInstalled yay successfully.\n" "$*"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
#arch-chroot /mnt systemctl enable systemd-user-sessions systemd-logind

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

fi

command4finished="1"
else
command4finished="0"
fi
done
command4finished="0"

}

coffee_install (){

clear

while [ "$pacmanfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $coffeeapps
pacmanfinished="1"
else
pacmanfinished="0"
fi
done

}

java_install (){

clear

while [ "$command5finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"
if [[ -z "$java1" ]] ; then
    echo "I'm broken :("
fi

arch-chroot /mnt archlinux-java set "$java1"

command5finished="1"
else
command5finished="0"
fi
done
command5finished="0"

}

vmware_install (){

clear

while [ "$command6finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$vmwareon" = "yes" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y vmware-workstation
printf "%b1\n[Unit]\nDescription=VMware daemon\nRequires=vmware-usbarbitrator.service\nBefore=vmware-usbarbitrator.service\nAfter=network.target\n[Service]\nExecStart=/etc/init.d/vmware start\nExecStop=/etc/init.d/vmware stop\nPIDFile=/var/lock/subsys/vmware\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware.service

printf "%b1\n[Unit]\nDescription=VMware USB Arbitrator\nRequires=vmware.service\n[Service]\nExecStart=/usr/bin/vmware-usbarbitrator\nExecStop=/usr/bin/vmware-usbarbitrator --kill\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-usbarbitrator.service

printf "%b\n[Unit]\nDescription=VMware Networks\nWants=vmware-networks-configuration.service\nAfter=vmware-networks-configuration.service\n[Service]\nType=forking\nExecStartPre=-/sbin/modprobe vmnet\nExecStart=/usr/bin/vmware-networks --start\nExecStop=/usr/bin/vmware-networks --stop\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-networks-server.service

arch-chroot /mnt systemctl enable vmware-networks-server.service
arch-chroot /mnt systemctl enable vmware-usbarbitrator.service
arch-chroot /mnt systemctl enable vmware.service

fi


command6finished="1"
else
command6finished="0"
fi
done
command6finished="0"

}

snapd_install (){

clear

while [ "$command7finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$snapon" = "yes" ]; then
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd


fi

command7finished="1"
else
command7finished="0"
fi
done
command7finished="0"

}

bootloader_install (){

clear

while [ "$command8finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$grub0" = "true" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b\nGRUB UEFI for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

elif [ "$gpu0" = "amd" ]; then

printf "%b\nGRUB UEFI for AMD selected.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font efivar
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm 
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi

elif [ "$grub0" = "true2" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b\nGRUB BIOS for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
pacman -Sy --noconfirm
mkinitcpio -P
EOT

arch-chroot /mnt grub-install --target=i386-pc "$drive0"
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

elif [ "$gpu0" = "amd" ]; then

printf "%b\nGRUB BIOS for AMD selected.\n" "$*"


arch-chroot /mnt pacman -S --needed --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc "$drive0"
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi

elif [ "$grub0" = "false" ]; then

arch-chroot /mnt /bin/bash <<"EOT"
printf "%bInstalling SystemD-Bootloader UEFI\n" "$*"
mkinitcpio -P
bootctl install
EOT

printf "%bdefault arch.conf\ntimeout 15\nconsole-mode max\neditor no\n" "$*" >> /mnt/boot/loader/loader.conf

if [ "$native1" = "yes" ]; then
printf "%btitle Coffee-Linux 'Verona' (22.0.2)\n" "$*" >> /mnt/boot/loader/entries/arch.conf
#elif [ $native1 = "no" ]; then
#printf "%btitle Coffee-Linux 'Tower' (20.2.4-Unofficial)\n" "$*" >> /mnt/boot/loader/entries/arch.conf
fi

printf "%blinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /amd-ucode.img\ninitrd /initramfs-linux.img\n" "$*" >> /mnt/boot/loader/entries/arch.conf

fi

#-Bootloader-End

command8finished="1"
else
command8finished="0"
fi
done
command8finished="0"


}

gpu_install (){

clear

while [ "$command9finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$gpu0" = "nvidia" ]; then
printf "%b\nSystemD-Bootloader UEFI for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
 if [ "$grub0" = "false" ]; then
  printf "%b\noptions root=LABEL=$drivename0 rw nvidia-drm.modeset=1 lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
 fi
elif [ "$gpu0" = "amd" ]; then
printf "%b\nSystemD-Bootloader UEFI for AMD selected.\nInstalling amdgpu-fan and corectrl" "$*"
 if [ "$grub0" = "false" ]; then
  printf "%b\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
 fi
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl
fi

command9finished="1"
else
command9finished="0"
fi
done
command9finished="0"

}




yay_install (){

clear

while [ "$yayinstallfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm archlinux-appstream-data
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y pamac-aur
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
clear
#printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
clear
#printf "%b1 2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mangohud
#printf "%b3\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y benchmark
#printf "%b3\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gamescope
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ntfix
#printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xone-dkms
#printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xone-dongle-firmware
clear
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
clear
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y github-desktop
clear
#printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-openswap
clear
#printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ckbcomp-bin
clear
  if [ "$desktop0" = "gnome" ]; then
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-themes-extra
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-ubuntu-dock
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-appindicator
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-desktop-icons-ng
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y yaru-gtk-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-icon-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-gnome-shell-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-session
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-sound-theme
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n --answerdiff n --answeredit y --answerupgrade y yaru-unity-theme
     clear
     arch-chroot /mnt pacman -Rdd --noconfirm mutter
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mutter-dynamic-buffering
     clear
     printf "%b1\ny\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gdm-settings
     clear
     rm -r /mnt/usr/share/wayland-sessions/gnome*
     rm -r /mnt/usr/share/xsessions/gnome*
  elif [ "$desktop0" = "kde" ]; then
     clear
     printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y systemd-kcm
     if [ "$grub0" = "true" ]; then
     clear
     printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm kcm-grub2
     fi
  fi
yayinstallfinished="1"
else
yayinstallfinished="0"
fi
done

}

secureboot_install (){

clear

while [ "$command10finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$sbpass0" = "yes" ]; then
printf "%bGenerating CoffeeLinux Secure-Boot keys for your machine\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm efitools mokutil sbsigntools apparmor sbctl
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y shim-signed
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y preloader-signed
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --reset
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password

arch-chroot /mnt cp /usr/share/preloader-signed/PreLoader.efi /boot/EFI/systemd
arch-chroot /mnt cp /usr/share/preloader-signed/HashTool.efi /boot/EFI/systemd
arch-chroot /mnt cp /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/loader.efi
arch-chroot /mnt efibootmgr --unicode --disk "$drive0" --part 1 --create --label "PreLoader" --loader /EFI/systemd/PreLoader.efi

arch-chroot /mnt mv /boot/EFI/BOOT/BOOTx64.EFI /boot/EFI/BOOT/grubx64.efi
arch-chroot /mnt cp /usr/share/shim-signed/shimx64.efi /boot/EFI/BOOT/BOOTx64.EFI
arch-chroot /mnt cp /usr/share/shim-signed/mmx64.efi /boot/EFI/BOOT/
arch-chroot /mnt efibootmgr --unicode --disk "$drive0" --part 1 --create --label "Shim" --loader /EFI/BOOT/BOOTx64.EFI

arch-chroot /mnt openssl req -newkey rsa:4096 -nodes -keyout MOK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Machine Owner Key/" -out MOK.crt
arch-chroot /mnt openssl x509 -outform DER -in MOK.crt -out MOK.cer
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/EFI/BOOT/grubx64.efi /boot/EFI/BOOT/grubx64.efi
cp /opt/999-sign_kernel_for_secureboot.hook /mnt/etc/pacman.d/hooks/999-sign_kernel_for_secureboot.hook
arch-chroot /mnt cp MOK.cer /boot/
arch-chroot /mnt cp MOK.crt /boot/
arch-chroot /mnt cp MOK.key /boot/
arch-chroot /mnt pacman -Sy --noconfirm
arch-chroot /mnt systemctl enable apparmor
arch-chroot /mnt systemctl enable systemd-boot-update.service
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

elif [ "$sbpass0" = "no" ]; then
printf "%b\nAdding AppArmor\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm apparmor
arch-chroot /mnt systemctl enable apparmor
#arch-chroot /mnt systemctl enable systemd-boot-update.service
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

fi

command10finished="1"
else
command10finished="0"
fi
done
command10finished="0"

}


homedir_fix (){

clear

while [ "$command11finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%bAttempting to fix the home directory automatically now...\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart
arch-chroot /mnt xdg-user-dirs-update
printf "%bCleaning up\n" "$*"

command11finished="1"
else
command11finished="0"
fi
done
command11finished="0"

}

success_check (){

clear

while [ "$command15finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$native1" = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
  mkdir -p /mnt/usr/share/backgrounds/gnome/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
  #cp /opt/chrome-egmafekfmcnknbdlbfbhafbllplmjlhn-Default.desktop /mnt/usr/share/applications/chrome-egmafekfmcnknbdlbfbhafbllplmjlhn-Default.desktop
  #chmod +x /mnt/usr/share/applications/chrome-egmafekfmcnknbdlbfbhafbllplmjlhn-Default.desktop
  cp -r /opt/* /mnt/opt/
#  mkdir -p /mnt/etc/neofetch/
#  cp /opt/config.conf /mnt/etc/neofetch/config.conf
  cp /usr/local/bin/coffeebrewer2 /mnt/usr/local/bin/
  arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer2
#  arch-chroot /mnt chmod 755 /home/$user01/.config/neofetch/config.conf
fi

printf "%b\n Did the installer complete sussessfully? \n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's exit, something went wrong...\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$rebootcheck" = "1" ]; then 
#printf "%b\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n" "$*"
printf "%b\n" "$*"
elif [ "$rebootcheck" != "1" ]; then 
umount -R /mnt
swapoff "$swap0"
printf "%bg\nn\n1\n\n\nt\n20\nw\n" "$*" | fdisk -W always "$drive0"
exit
fi

command15finished="1"
else
command15finished="0"
fi
done
command15finished="0"

}

#=================================================
#-Main
#=================================================

clear

while [ "$command16finished" != "1" ]; do
cp /opt/lsb-release /etc/lsb-release

printf "%b\n Would you like to install Coffee Linux? \n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r installationcheck
case $installationcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's exit.\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
if [ "$installationcheck" = "1" ]; then 
questionare
set_swap
set_network
format_disks
base_install
set_locale
set_passwords
desktop_install
coffee_install
java_install
vmware_install
snapd_install
bootloader_install
gpu_install
yay_install
secureboot_install
homedir_fix
success_check
printf "%b\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n" "$*"
installationcheck="1"
command16finished="1"
umount -R /mnt
reboot
else
installationcheck="0"
#-End-Script
exit
fi
done

#============================
#End-Main
