#!/bin/sh


while [ "$rootusercheck" != "1" ]; do
printf "%b\nWARNING: THIS INSTALLER SCRIPT MUST BE RAN AS ROOT USER.\nAre you the root user?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rootusercheck
case $rootusercheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's exit, only root can perform arch-chroot operations\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$rootusercheck" = "1" ]; then 
printf "%b\nExcellent. Let's proceed.\n" "$*"
elif [ "$rootusercheck" != "1" ]; then 
exit
fi
done

while [ "$usercheck" != "1" ]; do
printf "%b\nSet your Username.\n" "$*"
read -r user00
printf "%b\n$user00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r usercheck
case $usercheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$usercheck" = "1" ]; then 
user01=$user00
fi
#
while [ "$userpasscheck" != "1" ]; do
printf "%b\nSet your User Password.\n" "$*"
read -r userpass00
printf "%b\n$userpass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$userpasscheck" = "1" ]; then 
userpass0=$userpass00
fi


#
while [ "$rootpasscheck" != "1" ]; do
printf "%b\nSet your Root Password.\n" "$*"
read -r userpass01
printf "%b\n$userpass01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$rootpasscheck" = "1" ]; then 
userpass1=$userpass01
fi

#

while [ "$sbpasscheck" != "1" ] && [ "$sbpasscheck" != "2" ]; do
printf "%b\nWould you like to enable Secure-Boot in the OS?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r sbpasscheck
case $sbpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$sbpasscheck" = "1" ]; then
sbpass0=yes
elif [ "$sbpasscheck" = "2" ]; then
sbpass0=no
fi
#
if [ "$sbpass0" = "no" ]; then
printf "%b\nNo SB, skipping this part.\n" "$*"
elif [ "$sbpass0" = "yes" ]; then
while [ "$uefipasscheck" != "1" ]; do
printf "%b\nSet your UEFI/MOK Secure-Boot Password.\n" "$*"
read -r uefipass00
printf "%b\n$uefipass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r uefipasscheck
case $uefipasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
fi

if [ "$uefipasscheck" = "1" ]; then 
uefipass0=$uefipass00
fi

while [ "$namepasscheck" != "1" ]; do
printf "%b\nSet your PC name.\n" "$*"
read -r name00
printf "%b\n$name00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

#
while [ "$name2passcheck" != "1" ]; do
printf "%b\nSet your HardDrive Label (OS Partition Label).\n" "$*"
read -r name01
printf "%b\n$name01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi
#
while [ "$nativepasscheck" != "1" ] && [ "$nativepasscheck" != "2" ]; do
printf "%b\nIs this a CoffeeLinux Installer .iso/USB?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r nativepasscheck
case $nativepasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$nativepasscheck" = "1" ]; then
native1=yes
elif [ "$nativepasscheck" = "2" ]; then
native1=no
fi

while [ "$driveXpasscheck" != "1" ]; do
printf "%b\nListing Storage Devices for you.\n" "$*"
fdisk -l
printf "%b\n" "$*"
printf "%b\nWhich drive do you want Coffee Linux to install to?\n" "$*"
printf "%b\n1 - NVME0N1" "$*"
printf "%b\n2 - NVME1N1" "$*"
printf "%b\n3 - SDA" "$*"
printf "%b\n4 - SDB" "$*"
printf "%b\n5 - VDA" "$*"
printf "%b\n6 - VDB\n" "$*"

read -r driveX
if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3
elif [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3
elif [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3
elif [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3
elif [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3
elif [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3
fi

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
else
exit
fi


# Begin calculating Swap

while [ "$hibernationpasscheck" != "1" ] && [ "$hibernationpasscheck" != "2" ]; do
printf "%b\nWould you like to enable hibernation?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r hibernationpasscheck
case $hibernationpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again.\n" "$*" ;;
esac
done

if [ "$hibernationpasscheck" = "1" ]; then
HIBERNATING="1"
fi

while [ "$rampasscheck" != "1" ]; do

RAM=$(free -m | grep Mem | awk '{print $2}')

if [ "$RAM" -gt 2048 ] && [ "$RAM" -lt 8192 ]; then # if RAM is between 2 and 8 GB
    
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="3"
    else
        MULTIPLIER="2"
    fi
fi

if [ "$RAM" -gt 8192 ] && [ "$RAM" -lt 16384 ]; then # if RAM is between 8 and 16 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="2"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 32768  ]; then    # if RAM is more than 32 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="1"
    else
        MULTIPLIER="05"
    fi
fi

rampasscheck="1"

done

while [ "$swapcheck" != "1" ] && [ "$swapcheck" != "2" ]; do
printf "%b\nSetting up swap size, do you want to manually configure or auto configure it based on your RAM size ?\n" "$*"
printf "%b\n1 - Manual\n" "$*"
printf "%b\n2 - Auto\n" "$*"
read -r swapcheck 
case $swapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$swapcheck" = "1" ]; then
    printf "%b\nEnter swap size in GB\n" "$*"
    read -r swapsize1
    swapsize="+""$((swapsize1))G"
    swap1=$swapsize
elif [ "$swapcheck" = "2" ]; then
    swapsize="+""$((RAM*MULTIPLIER))M"
    swap1=$swapsize
fi


while [ "$desktopcheck" != "1" ] && [ "$desktopcheck" != "2" ] && [ "$desktopcheck" != "3" ] && [ "$desktopcheck" != "4" ] && [ "$desktopcheck" != "5" ] && [ "$desktopcheck" != "6" ] && [ "$desktopcheck" != "7" ] && [ "$desktopcheck" != "8" ]; do
#
printf "%b\nWhat desktop environment do you want?\n" "$*"
printf "%b\n1 - Gnome\n" "$*"
printf "%b\n2 - KDE\n" "$*"
printf "%b\n3 - Cinnamon\n" "$*"
printf "%b\n4 - Mate\n" "$*"
printf "%b\n5 - LXDE\n" "$*"
printf "%b\n6 - LXQT\n" "$*"
printf "%b\n7 - XFCE\n" "$*"
printf "%b\n8 - Deepin - WIP May not work. \n" "$*"

read -r desktopcheck
case $desktopcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  3) printf "%b\nA good choice.\n" "$*" ;;
  4) printf "%b\nA good choice.\n" "$*" ;;
  5) printf "%b\nA good choice.\n" "$*" ;;
  6) printf "%b\nA good choice.\n" "$*" ;;
  7) printf "%b\nA good choice.\n" "$*" ;;
  #-8) printf "%b\nA brave choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$desktopcheck" = "1" ]; then
desktop0="gnome"

elif [ "$desktopcheck" = "2" ]; then
desktop0="kde"

elif [ "$desktopcheck" = "3" ]; then
desktop0="cinnamon"

elif [ "$desktopcheck" = "4" ]; then
desktop0="mate"

elif [ "$desktopcheck" = "5" ]; then
desktop0="lxde"

elif [ "$desktopcheck" = "6" ]; then
desktop0="lxqt"

elif [ "$desktopcheck" = "7" ]; then
desktop0="xfce"

elif [ "$desktopcheck" = "8" ]; then
desktop0="deepin"

fi

while [ "$snapcheck" != "1" ] && [ "$snapcheck" != "2" ]; do
printf "%b\nWould you like Snap-Store support (Snapd) ?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r snapcheck
case $snapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$snapcheck" = "1" ]; then
snapon="yes"
elif [ "$snapcheck" = "2" ]; then
snapon="no"
fi

while [ "$vmwarecheck" != "1" ] && [ "$vmwarecheck" != "2" ]; do
printf "%b\nWould you like VMWare Workstation?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r vmwarecheck
case $vmwarecheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$vmwarecheck" = "1" ]; then
vmwareon="yes"
elif [ "$vmwarecheck" = "2" ]; then
vmwareon="no"
fi


while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ]; do
printf "%b\nDo you have an amd or nvidia graphics card? -- Intel ARC not yet supported.\n" "$*"
printf "%b\n1 - AMD\n" "$*"
printf "%b\n2 - Nvidia\n" "$*"

read -r gpucheck
case $gpucheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$gpucheck" = "1" ]; then
gpu0="amd"
elif [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
fi

while [ "$zeroutcheck" != "1" ] && [ "$zeroutcheck" != "2" ]; do
printf "%b\nWould you like to Zero-Out the drive first?\nWARNING Zero-Out will take a long time, but has its benifits.\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"
read -r zeroutcheck
case $zeroutcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$zeroutcheck" = "1" ]; then
zerout0="yes"
elif [ "$zeroutcheck" = "2" ]; then
zerout0="no"
fi

if [ "$zerout0" = "yes" ]; then
printf "%b\nZero-Outing the drive... This will take quite a long time..\n" "$*" 
dd if=/dev/zero of=$drive0 bs=1M status=progress 
elif [ "$zerout0" = "no" ]; then
printf "%b\nZero-Out Skipped.\n" "$*"
fi

while [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ] && [ "$grubcheck" != "3" ]; do
printf "%b\nWould you like GRUB or SystemD-Bootloader?\nGRUB is more compatible with VMs.\nUnofficial Installs MUST use SystemD and be using actual hardware.\n" "$*"
printf "%b\n1 - GRUB UEFI version\n" "$*"
printf "%b\n2 - GRUB BIOS/MBR version\n" "$*"
printf "%b\n3 - SystemD-Bootloader UEFI-Only\n" "$*"
read -r grubcheck
case $grubcheck in
  1) printf "%b\nPerfect.\n" "$*" ;;
  2) printf "%b\nGreat Choice.\n" "$*" ;;
  3) printf "%b\nGood Choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again.\n" "$*" ;;
esac
done

if [ "$grubcheck" = "1" ]; then
grub0="true"
questionspassed="yes"
elif [ "$grubcheck" = "2" ]; then
grub0="true2"
questionspassed="yes"
elif [ "$grubcheck" = "3" ]; then
grub0="false"
questionspassed="yes"
fi

if [ "$questionspassed" = "yes" ]; then
printf "%b\nFormatting Partitions\n" "$*"
printf "%bg\nn\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n19\nw\n" "$*" | fdisk -W always $drive0
mkfs.fat -F32 $boot0
mkswap $swap0
swapon $swap0
mkfs.btrfs -f -L "$drivename0" $system0 
printf "%b\nMounting Disks\n" "$*"
mount $system0 /mnt
mkdir /mnt/boot
mount $boot0 /mnt/boot
printf "%b\nEnable Repos\n" "$*"
#printf "%b\n[multilib]\nInclude = /etc/pacman.d/mirrorlist
#printf "%b\n[andontie-aur]\nServer = https://aur.andontie.net/\$arch\nSigLevel = Never\n" "$*" >> /etc/pacman.conf
pacman -Sy --noconfirm archlinux-keyring
pacman -Syy
pacstrap /mnt amd-ucode apparmor archinstall arch-install-scripts b43-fwcutter base base-devel bind brltty broadcom-wl btrfs-progs clonezilla cloud-init cryptsetup darkhttpd ddrescue dhclient dhcpcd diffutils dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools espeakup ethtool exfatprogs f2fs-tools fatresize fsarchiver gnu-netcat gpart gpm gptfdisk grml-zsh-config grub hdparm hyperv intel-ucode irssi iw iwd jfsutils kitty-terminfo less lftp libfido2 libusb-compat linux linux-atm linux-firmware linux-firmware-marvell livecd-sounds lsscsi lvm2 lynx man-db man-pages mc mdadm memtest86+ mkinitcpio mkinitcpio-archiso mkinitcpio-nfs-utils modemmanager mokutil mtools nano nbd ndisc6 net-tools networkmanager nfs-utils nilfs-utils nmap ntfs-3g nvme-cli openconnect open-iscsi openssh open-vm-tools openvpn partclone parted partimage pcsclite ppp pptpclient pv qemu-guest-agent refind reflector reiserfsprogs rp-pppoe rsync rxvt-unicode-terminfo sbctl sbsigntools screen sdparm sg3_utils smartmontools sof-firmware squashfs-tools sudo syslinux systemd-resolvconf tcpdump terminus-font testdisk texinfo tmux tpm2-tss udftools usb_modeswitch usbmuxd usbutils vim vpnc wireless-regdb wireless_tools wpa_supplicant wvdial xfsprogs xl2tpd zsh

arch-chroot /mnt pacman -Syy
arch-chroot /mnt pacman -Sy --noconfirm archlinux-keyring
cp /etc/pacman.conf /mnt/etc/pacman.conf
arch-chroot /mnt pacman -Syy
printf "%b\nSet Root Password\n" "$*"
printf "%b$userpass1\n$userpass1\n" "$*" | arch-chroot /mnt passwd 
printf "%bAdding User Account\n" "$*"
arch-chroot /mnt useradd -m -G wheel,audio,video,users --badname "$user01" 
printf "%b\nSet User Password\n" "$*"
printf "%b$userpass0\n$userpass0\n" "$*" | arch-chroot /mnt passwd "$user01"
printf "%b$hostname0\n" "$*" >> /mnt/etc/hostname
printf "%b\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0\n" "$*" >> /mnt/etc/hosts
printf "%bCreating Links\n" "$*" 
genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt /bin/bash <<"EOT"
printf "%b\nSetting Locale\n" "$*"
ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc
printf "%b\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\n" "$*" >> /etc/locale.gen
printf "%b\nKEYMAP=us\n" "$*" >> /etc/vconsole.conf
printf "%b\nLANG=en_US.UTF-8" "$*" >> /etc/locale.conf
export LANG=en_US.UTF-8
locale-gen
cd /
printf "%b\n%%"w"heel ALL=(ALL:ALL) NOPASSWD: ALL\n" "$*" > /etc/sudoers.d/wheel
mkinitcpio -P

EOT

cp --dereference /etc/resolv.conf /mnt/etc/
arch-chroot /mnt pacman -Syu --noconfirm
fi

if [ $desktop0 = "gnome" ]; then

arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server bluez-libs cabextract chrony clang cmake colord cronie cups dbus dbus-python dconf directx-headers discord dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak gdm gettext giflib gimp git glib2 glibc glslang gnome gnome-color-manager gnome-console gnome-extra gnome-firmware gnome-keyring gnome-menus gnome-online-accounts gnome-text-editor gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk4 gtk-engine-murrine hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lutris make mesa mesa-utils mesa-vdpau meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse polkit-gnome power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba shellcheck shotwell steam sudo syslinux systemd terminus-font tesseract-data-eng ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-desktop-portal-gnome xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader yay zenity zstd
arch-chroot /mnt pacman -R --noconfirm gedit gnome-terminal

elif [ $desktop0 = "kde" ]; then
arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode appstream-qt archiso archivetools archlinux-wallpaper aria2 ark base-devel bash-completion bash-language-server bluez-libs cabextract chrony clang cmake colord colord-kde cronie cups dbus dbus-python dconf directx-headers discord discount dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules firewalld flatpak gettext giflib gimp git glib2 glibc glslang gnome-color-manager gnome-disk-utility gnome-menus gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk4 gtk-engine-murrine hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils kde-applications-meta kdevelop-python kgamma5 kidletime kirigami2 knewstuff kscreen kuserfeedback kvantum lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lutris make mesa qt6-wayland mesa-utils mesa-vdpau meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse plasma-framework plasma-meta plasma-wayland-protocols plasma-wayland-session power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba sddm sddm-kcm shellcheck steam sudo syslinux systemd terminus-font tesseract-data-eng ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-desktop-portal-kde xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader yay zenity zstd

elif [ $desktop0 = "cinnamon" ]; then
arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode archiso archivetools archlinux-wallpaper aria2 base base-devel bash-completion bash-language-server bluez-libs btrfs-progs cabextract chrony cinnamon cinnamon-translations clang cmake colord cronie cups dbus dbus-python dconf dhcpcd directx-headers discord dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak geary gettext giflib gimp git glib2 glibc glslang gnome-calculator gnome-color-manager gnome-console gnome-disk-utility gnome-keyring gnome-menus gnome-photos gnome-software gnome-system-monitor gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk3 hicolor-icon-theme innoextract intel-ucode iwd jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm lightdm lightdm-slick-greeter linux linux-firmware linux-headers llvm llvm-libs lm_sensors lutris make man-db man-pages mesa mesa-utils mesa-vdpau meson mkinitcpio mpg123 mtools nano ncurses neofetch net-tools networkmanager nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse polkit-gnome power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba shellcheck shotwell steam sudo syslinux systemd terminus-font tesseract-data-eng texinfo ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-desktop-portal-gtk xdg-utils xed xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader yay zenity zstd

elif [ $desktop0 = "mate" ]; then
arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode archiso archivetools archlinux-wallpaper aria2 atril base-devel bash-completion bash-language-server blueman bluez-libs cabextract caja chrony clang cmake colord cpupower cronie cups dbus dbus-python dconf directx-headers discord dkms efibootmgr egl-wayland elfutils engrampa eom exfatprogs expat extra-cmake-modules file-roller firewalld flatpak geary gettext giflib gimp git glib2 glibc glslang gnome-calculator gnome-color-manager gnome-console gnome-disk-utility gnome-keyring gnome-menus gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk3 gtk4 gtk-engine-murrine gtk-engines hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils leafpad lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack  lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm lightdm lightdm-slick-greeter linux-headers llvm llvm-libs lm_sensors lutris make marco mate mate-applet-dock mate-applet-streamer mate-common mate-extra mate-media mate-menu mate-netbook mate-power-manager mate-system-monitor mate-terminal mesa mesa-utils mesa-vdpau meson mkinitcpio mozo mpg123 mtools nano ncurses neofetch network-manager-applet nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src orca pipewire-jack pipewire pipewire-alsa pipewire-pulse pluma polkit-gnome power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba shellcheck shotwell steam sudo syslinux system-config-printer systemd terminus-font tesseract-data-eng ttf-freefont ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-desktop-portal-gtk xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader xscreensaver yay zenity zstd

elif [ $desktop0 = "lxde" ]; then
arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server bluez-libs cabextract chrony clang cmake colord cpupower cronie cups dbus dbus-python dconf directx-headers discord dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak geary gettext giflib gimp git glib2 glibc glslang gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk3 hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lutris lxde lxde-common lxdm lxpanel lxsession make mesa mesa-utils mesa-vdpau meson mkinitcpio mousepad mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal openbox opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba shellcheck shotwell steam sudo syslinux systemd terminus-font tesseract-data-eng ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xcompmgr xdg-desktop-portal-lxqt xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader yay zenity zstd

elif [ $desktop0 = "lxqt" ]; then
arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server bluez-libs breeze-icons cabextract chrony clang cmake colord cpupower cronie cups dbus dbus-python dconf directx-headers discord dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak geary gettext giflib gimp git glib2 glibc glslang gnome-disk-utility gnome-keyring gnome-photos gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk3 hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lutris lximage-qt lxqt lxqt-about lxqt-admin lxqt-archiver lxqt-config lxqt-globalkeys lxqt-notificationd lxqt-openssh-askpass lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-runner lxqt-session lxqt-sudo lxqt-themes make mesa mesa-utils mesa-vdpau meson mkinitcpio mousepad mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer obconf-qt openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src oxygen-icons pavucontrol-qt pcmanfm-qt pipewire pipewire-alsa pipewire-jack pipewire-pulse polkit-gnome power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland qterminal samba screengrab sddm shellcheck shotwell steam sudo syslinux systemd terminus-font tesseract-data-eng ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xautolock xdg-desktop-portal-lxqt xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader xscreensaver yay zenity zstd

elif [ $desktop0 = "xfce" ]; then

arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode arc-gtk-theme archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server bluez-libs cabextract capitaine-cursors chrony clang cmake colord cpupower cronie cups dbus dbus-python dconf directx-headers discord dkms efibootmgr egl-wayland elfutils epdfview exfatprogs expat extra-cmake-modules file-roller firewalld flatpak galculator geary gettext giflib gimp git glib2 glibc glslang gnome-disk-utility gnome-keyring gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk3 hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils leafpad lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm lightdm lightdm-slick-greeter linux-headers llvm llvm-libs lm_sensors lutris make mesa mesa-utils mesa-vdpau meson mkinitcpio mousepad mpg123 mtools nano ncurses neofetch  network-manager-applet nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src parole  pavucontrol pipewire pipewire-alsa pipewire-jack pipewire-pulse polkit-gnome power-profiles-daemon python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland ristretto samba shellcheck shotwell steam sudo syslinux systemd terminus-font tesseract-data-eng thunar-archive-plugin thunar-media-tags-plugin ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-user-dirs-gtk xdg-utils xf86-video-amdgpu xf86-video-vmware xfce4 xfce4-battery-plugin xfce4-datetime-plugin xfce4-goodies xfce4-mount-plugin xfce4-netload-plugin xfce4-notifyd xfce4-pulseaudio-plugin xfce4-screensaver xfce4-taskmanager xfce4-wavelan-plugin xfce4-weather-plugin xfce4-whiskermenu-plugin xfce4-xkb-plugin xfwm4 xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader yay zenity zstd

elif [ $desktop0 = "deepin" ]; then

arch-chroot /mnt pacman -Sy --noconfirm alsa-lib alsa-plugins amd-ucode archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server bluez-libs cabextract chrony clang cmake colord cpupower cronie cups dbus dbus-python dconf deepin deepin-anything-arch deepin-extra directx-headers discord dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak geary gettext giflib gimp git glib2 glibc glslang gnome-calculator gnome-color-manager gnome-console gnome-disk-utility gnome-extra gnome-firmware gnome-keyring gnome-menus gnome-online-accounts gnome-photos gnome-software gnome-system-monitor gnome-text-editor gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk3 gtk4 gtk-engine-murrine hicolor-icon-theme innoextract jdk-openjdk jre-openjdk jre-openjdk-headless kcmutils lib32-alsa-lib lib32-alsa-plugins lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libva-mesa-driver lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mesa-vdpau lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-opencl-mesa lib32-pipewire lib32-pipewire-jack lib32-v4l-utils lib32-vkd3d lib32-vulkan-icd-loader lib32-vulkan-mesa-layers lib32-vulkan-radeon libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libreoffice-fresh libunwind libva libva-mesa-driver libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm lightdm lightdm-deepin-greeter linux-headers llvm llvm-libs lm_sensors lutris make mesa mesa-utils mesa-vdpau meson mkinitcpio mousepad mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opencl-mesa opengl-man-pages openjdk-doc openjdk-src pipewire pipewire-alsa pipewire-jack pipewire-pulse polkit-gnome power-profiles-daemon pulseaudio python-gobject python-mako python-pyqt6 qt6 qt6-imageformats qt6-multimedia-ffmpeg qt6-wayland samba shellcheck shotwell steam sudo syslinux systemd terminus-font tesseract-data-eng ttf-freefont ttf-liberation ttf-ms-fonts ttf-vista-fonts udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch vkd3d vlc vulkan-icd-loader vulkan-mesa-layers vulkan-radeon w3m wine wine-gecko wine-mono winetricks wireplumber xdg-desktop-gnome xdg-utils xf86-video-amdgpu xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader yay zenity zstd
arch-chroot /mnt pacman -R --noconfirm gedit
fi


printf "%bInstalling Coffee Extras\n" "$*"

java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"
if [[ -z $java1 ]] ; then
    echo "I'm broken :("
fi

arch-chroot /mnt archlinux-java set $java1

printf "%b3\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y pamac-aur
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git

if [ $vmwareon = "yes" ]; then
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y vmware-workstation
printf "%b1\n[Unit]\nDescription=VMware daemon\nRequires=vmware-usbarbitrator.service\nBefore=vmware-usbarbitrator.service\nAfter=network.target\n[Service]\nExecStart=/etc/init.d/vmware start\nExecStop=/etc/init.d/vmware stop\nPIDFile=/var/lock/subsys/vmware\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware.service

printf "%b1\n[Unit]\nDescription=VMware USB Arbitrator\nRequires=vmware.service\n[Service]\nExecStart=/usr/bin/vmware-usbarbitrator\nExecStop=/usr/bin/vmware-usbarbitrator --kill\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-usbarbitrator.service

printf "%b\n[Unit]\nDescription=VMware Networks\nWants=vmware-networks-configuration.service\nAfter=vmware-networks-configuration.service\n[Service]\nType=forking\nExecStartPre=-/sbin/modprobe vmnet\nExecStart=/usr/bin/vmware-networks --start\nExecStop=/usr/bin/vmware-networks --stop\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-networks-server.service

arch-chroot /mnt systemctl enable vmware-networks-server.service vmware-usbarbitrator.service vmware.service
fi

#-Bootloader-Start

if [ "$grub0" = "true" ]; then

if [ $gpu0 = "nvidia" ]; then

printf "%b\nGRUB UEFI for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"

arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings grub os-prober
cp /opt/grub-nvidia /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

elif [ $gpu0 = "amd" ]; then

printf "%b\nGRUB UEFI for AMD selected.\n" "$*"

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl grub os-prober
cp /opt/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm 
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi

elif [ "$grub0" = "true2" ]; then

if [ $gpu0 = "nvidia" ]; then

printf "%b\nGRUB BIOS for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"

arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings grub os-prober
cp /opt/grub-nvidia /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
pacman -Sy --noconfirm
mkinitcpio -P
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

elif [ $gpu0 = "amd" ]; then

printf "%b\nGRUB BIOS for AMD selected.\n" "$*"

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl grub os-prober
cp /opt/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install ---target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi

elif [ "$grub0" = "false" ]; then

arch-chroot /mnt /bin/bash <<"EOT"
printf "%bInstalling SystemD-Bootloader UEFI\n" "$*"
mkinitcpio -P
bootctl install
printf "%bdefault arch.conf\ntimeout 5\nconsole-mode max\neditor no\n" "$*" >> /boot/loader/loader.conf
EOT

if [ $native1 = "yes" ]; then
printf "%btitle Coffee-Linux 'Nevermore' (14.0.0)\n" "$*" >> /mnt/boot/loader/entries/arch.conf
elif [ $native1 = "no" ]; then
printf "%btitle Coffee-Linux 'Nevermore' (14.0.0-Unofficial)\n" "$*" >> /mnt/boot/loader/entries/arch.conf
fi

printf "%blinux /vmlinuz-linux\ninitrd /intel-ucode.img\ninitrd /amd-ucode.img\ninitrd /initramfs-linux.img\n" "$*" >> /mnt/boot/loader/entries/arch.conf

if [ $gpu0 = "nvidia" ]; then
printf "%b\nSystemD-Bootloader UEFI for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
printf "%b\noptions root=LABEL=$drivename0 rw nvidia-drm.modeset=1 lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
elif [ $gpu0 = "amd" ]; then
printf "%b\nSystemD-Bootloader UEFI for AMD selected.\nInstalling amdgpu-fan and corectrl" "$*"
printf "%b\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl
fi

fi

#-Bootloader-End

if [ $sbpass0 = "yes" ]; then
printf "%bGenerating CoffeeLinux Secure-Boot keys for your machine\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm efitools mokutil sbsigntools apparmor sbctl
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y shim-signed
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y preloader-signed
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --reset
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password

arch-chroot /mnt cp /usr/share/preloader-signed/PreLoader.efi /boot/EFI/systemd
arch-chroot /mnt cp /usr/share/preloader-signed/HashTool.efi /boot/EFI/systemd
arch-chroot /mnt cp /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/loader.efi
arch-chroot /mnt efibootmgr --unicode --disk $drive0 --part 1 --create --label "PreLoader" --loader /EFI/systemd/PreLoader.efi

arch-chroot /mnt mv /boot/EFI/BOOT/BOOTx64.EFI /boot/EFI/BOOT/grubx64.efi
arch-chroot /mnt cp /usr/share/shim-signed/shimx64.efi /boot/EFI/BOOT/BOOTx64.EFI
arch-chroot /mnt cp /usr/share/shim-signed/mmx64.efi /boot/EFI/BOOT/
arch-chroot /mnt efibootmgr --unicode --disk $drive0 --part 1 --create --label "Shim" --loader /EFI/BOOT/BOOTx64.EFI

arch-chroot /mnt openssl req -newkey rsa:4096 -nodes -keyout MOK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Machine Owner Key/" -out MOK.crt
arch-chroot /mnt openssl x509 -outform DER -in MOK.crt -out MOK.cer
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/EFI/BOOT/grubx64.efi /boot/EFI/BOOT/grubx64.efi
cp /opt/999-sign_kernel_for_secureboot.hook /mnt/etc/pacman.d/hooks/999-sign_kernel_for_secureboot.hook
arch-chroot /mnt cp MOK.cer /boot/
arch-chroot /mnt cp MOK.crt /boot/
arch-chroot /mnt cp MOK.key /boot/
arch-chroot /mnt pacman -Sy
arch-chroot /mnt systemctl enable apparmor systemd-boot-update.service dhcpcd cronie chronyd NetworkManager firewalld
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y microsoft-edge-stable
printf "%b2 7\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mangohud
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gamescope
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ntfix

elif [ $sbpass0 = "no" ]; then
printf "%b\nAdding AppArmor\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm apparmor
arch-chroot /mnt systemctl enable apparmor systemd-boot-update.service dhcpcd cronie chronyd NetworkManager firewalld
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y microsoft-edge-stable
printf "%b2 7\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mangohud
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gamescope
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ntfix

fi

if [ $desktop0 = "gnome" ]; then

if [ $native1 = "yes" ]; then

  rm -R /mnt/usr/share/backgrounds/gnome/ 
  mkdir -p /mnt/usr/share/backgrounds/gnome/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
fi

printf "%bInstalling Coffee-QOL-Extras\n" "$*"

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gnome-themes-extra
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-ubuntu-dock
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-appindicator
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gnome-shell-extension-desktop-icons-ng
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y yaru-gtk-theme
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y yaru-icon-theme
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y yaru-gnome-shell-theme
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y yaru-session
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y yaru-sound-theme
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y yaru-unity-theme
printf "%b1\ny\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gdm-settings
arch-chroot /mnt pacman -Syu
rm -r /mnt/usr/share/xsessions/gnome*
rm -r /mnt/usr/share/wayland-sessions/gnome*
arch-chroot /mnt systemctl enable gdm

osfinished="yes"

elif [ $desktop0 = "kde" ]; then  

printf "%b\nInstalling Coffee-QOL-Extras\n" "$*" 
 
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y systemd-kcm

if [ $native1 = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
fi

printf "%bEnsuring correct DM is set.\n" "$*"  
arch-chroot /mnt pacman -Syu
arch-chroot /mnt systemctl enable sddm

osfinished="yes"

elif [ $desktop0 = "cinnamon" ]; then

printf "%bInstalling Coffee-QOL-Extras\n" "$*"

if [ $native1 = "yes" ]; then
mkdir -p /mnt/usr/share/backgrounds/gnome/
cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-themes
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-x-icons
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-y-icons
printf "%b5\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-backgrounds
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mintlocale
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y humanity-icon-theme
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-themes-legacy
#arch-chroot /mnt sudo -Su $user01 yay --nodiffmenu --noremovemake --answerclean y  --answerdiff y --answeredit y --answerupgrade y gnome-calendar-linuxmint &&
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-artwork
printf "%bEnsuring correct DM is set.\n" "$*"
arch-chroot /mnt pacman -Syu
printf "%b\n[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm

osfinished="yes"

elif [ $desktop0 = "xfce" ]; then

printf "%bInstalling Coffee-QOL-Extras\n" "$*"

if [ $native1 = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-themes
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-x-icons
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-y-icons
printf "%b5\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-backgrounds
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mintlocale
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-themes-legacy
#arch-chroot /mnt sudo -Su $user01 yay --nodiffmenu --noremovemake --answerclean y  --answerdiff y --answeredit y --answerupgrade y gnome-calendar-linuxmint
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-artwork
printf "%bEnsuring correct DM is set.\n" "$*"
arch-chroot /mnt pacman -Syu

printf "%b\n[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm
arch-chroot /mnt xfconf-query -c xfwm4 -p /general/vblank_mode -s glx

osfinished="yes"

elif [ $desktop0 = "mate" ]; then

printf "%bInstalling Coffee-QOL-Extras\n" "$*"

if [ $native1 = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
fi

printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y lightdm-settings
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mate-screensaver-hacks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mate-tweak
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-themes
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-x-icons
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-y-icons
printf "%b5\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mint-backgrounds
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mintlocale
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-themes-legacy
#arch-chroot /mnt sudo -Su $user01 yay --nodiffmenu --noremovemake --answerclean y  --answerdiff y --answeredit y --answerupgrade y gnome-calendar-linuxmint &&
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y mint-artwork
printf "%bEnsuring correct DM is set.\n" "$*"
arch-chroot /mnt pacman -Syu
printf "%b\n[Seat:*]\ngreeter-session=lightdm-slick-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm

osfinished="yes"

elif [ $desktop0 = "lxde" ]; then

printf "%bInstalling Coffee-QOL-Extras\n" "$*"

if [ $native1 = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
fi

printf "%bEnsuring correct DM is set.\n" "$*"
arch-chroot /mnt pacman -Syu
arch-chroot /mnt systemctl enable lxdm

osfinished="yes"

elif [ $desktop0 = "lxqt" ]; then

printf "%bInstalling Coffee-QOL-Extras\n" "$*"

if [ $native1 = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
fi

printf "%bEnsuring correct DM is set.\n" "$*"
arch-chroot /mnt pacman -Syu
arch-chroot /mnt systemctl enable sddm

osfinished="yes"

elif [ $desktop0 = "deepin" ]; then

if [ $native1 = "yes" ]; then
 mkdir -p /mnt/usr/share/wallpapers/coffee/
 cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
fi

printf "%bEnsuring correct DM is set.\n" "$*"
arch-chroot /mnt pacman -Syu
printf "%b\n[Seat:*]\ngreeter-session=lightdm-deepin-greeter\n" "$*" >> /mnt/etc/lightdm/lightdm.conf
arch-chroot /mnt systemctl enable lightdm
osfinished="yes"
fi

if [ $osfinished = "yes" ]; then

if [ $snapon = "yes" ]; then
printf "%b3\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd
fi

printf "%bAttempting to fix the home directory automatically now...\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
arch-chroot /mnt xdg-user-dirs-update
printf "%bCleaning up\n" "$*"

if [ $native1 = "yes" ]; then
cp /opt/os-release /mnt/etc/
cp /opt/lsb-release /mnt/etc/
cp /opt/logo /mnt/opt/
cp /opt/config.conf /mnt/opt/
mkdir -p /mnt/home/"$user01"/.config/neofetch/
cp /opt/config.conf /mnt/home/"$user01"/.config/neofetch/config.conf
cp /usr/local/bin/coffee-manager /mnt/usr/local/bin/
#cp /usr/local/bin/coffeebrewer /mnt/opt/
arch-chroot /mnt chmod a+x /usr/local/bin/coffee-manager
fi
fi

printf "%b\n Did the installer complete sussessfully? \n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's exit, something went wrong...\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$rebootcheck" = "1" ]; then 
printf "%b\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n" "$*"
elif [ "$rebootcheck" != "1" ]; then 
exit
fi

if [ "$osfinished" = "yes" ]; then
umount -R /mnt
reboot
fi

