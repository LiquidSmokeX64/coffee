#!/bin/sh

questionare (){

while [ "$usercheck" != "1" ]; do
printf "%b\nEnter your Username for post installation setup..\n" "$*"
read -r user00
printf "%b\n$user00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r usercheck
case $usercheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$usercheck" = "1" ]; then 
user01=$user00
fi
#
while [ "$userpasscheck" != "1" ]; do
printf "%b\nEnter your User Password for post installation setup..\n" "$*"
read -r userpass00
printf "%b\n$userpass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$userpasscheck" = "1" ]; then 
userpass0=$userpass00
fi

#
while [ "$rootpasscheck" != "1" ]; do
printf "%b\neEnter your Root Password for post installation setup..\n" "$*"
read -r userpass01
printf "%b\n$userpass01. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$rootpasscheck" = "1" ]; then 
userpass1=$userpass01
fi

while [ "$sbpasscheck" != "1" ] && [ "$sbpasscheck" != "2" ]; do
printf "%b\nWould you like to enable Secure-Boot in the OS?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r sbpasscheck
case $sbpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nLet's move on then.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$sbpasscheck" = "1" ]; then
sbpass0=yes
elif [ "$sbpasscheck" = "2" ]; then
sbpass0=no
fi
#
if [ "$sbpass0" = "no" ]; then
printf "%b\nNo SB, skipping this part.\n" "$*"
elif [ "$sbpass0" = "yes" ]; then
while [ "$uefipasscheck" != "1" ]; do
printf "%b\nSet your UEFI/MOK Secure-Boot Password.\n" "$*"
read -r uefipass00
printf "%b\n$uefipass00. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r uefipasscheck
case $uefipasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
fi

if [ "$uefipasscheck" = "1" ]; then 
uefipass0=$uefipass00
fi

while [ "$driveXpasscheck" != "1" ]; do
printf "%b\nListing Storage Devices for you.\n" "$*"
fdisk -l
printf "%b\n" "$*"
printf "%b\nWhich drive do you want Coffee Linux to install secure-boot to?\n" "$*"
printf "%b\n1 - NVME0N1" "$*"
printf "%b\n2 - NVME1N1" "$*"
printf "%b\n3 - SDA" "$*"
printf "%b\n4 - SDB" "$*"
printf "%b\n5 - VDA" "$*"
printf "%b\n6 - VDB\n" "$*"

read -r driveX
if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3
elif [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3
elif [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3
elif [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3
elif [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3
elif [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3
fi

printf "%b\n$drive. Is this correct?\n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's retry\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
native1="yes"
fi

while [ "$snapcheck" != "1" ] && [ "$snapcheck" != "2" ]; do
printf "%b\nWould you like Snap-Store support (Snapd) ?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r snapcheck
case $snapcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$snapcheck" = "1" ]; then
snapon="yes"
elif [ "$snapcheck" = "2" ]; then
snapon="no"
fi

while [ "$vmwarecheck" != "1" ] && [ "$vmwarecheck" != "2" ]; do
printf "%b\nWould you like VMWare Workstation?\n" "$*"
printf "%b\n1 - Yes\n" "$*"
printf "%b\n2 - No\n" "$*"

read -r vmwarecheck
case $vmwarecheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done

if [ "$vmwarecheck" = "1" ]; then
vmwareon="yes"
elif [ "$vmwarecheck" = "2" ]; then
vmwareon="no"
fi


while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ]; do
printf "%b\nDo you have an amd or nvidia graphics card? -- Intel ARC not yet supported.\n" "$*"
printf "%b\n1 - AMD\n" "$*"
printf "%b\n2 - Nvidia\n" "$*"
printf "%b\n3 - Virtual GPU (VMware etc.)\n" "$*"

read -r gpucheck
case $gpucheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  2) printf "%b\nA good choice.\n" "$*" ;;
  3) printf "%b\nA good choice.\n" "$*" ;;
  *) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
done
if [ "$gpucheck" = "1" ]; then
gpu0="amd"
questionspassed="yes"
elif [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
questionspassed="yes"
elif [ "$gpucheck" = "3" ]; then
gpu0="vm"
questionspassed="yes"
fi

}

java_install (){

while [ "$command5finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"
if [[ -z "$java1" ]] ; then
    echo "I'm broken :("
fi

arch-chroot /mnt archlinux-java set "$java1"

command5finished="1"
else
command5finished="0"
fi
done
command5finished="0"

}

vmware_install (){

while [ "$command6finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ $vmwareon = "yes" ]; then
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y vmware-workstation
printf "%b1\n[Unit]\nDescription=VMware daemon\nRequires=vmware-usbarbitrator.service\nBefore=vmware-usbarbitrator.service\nAfter=network.target\n[Service]\nExecStart=/etc/init.d/vmware start\nExecStop=/etc/init.d/vmware stop\nPIDFile=/var/lock/subsys/vmware\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware.service

printf "%b1\n[Unit]\nDescription=VMware USB Arbitrator\nRequires=vmware.service\n[Service]\nExecStart=/usr/bin/vmware-usbarbitrator\nExecStop=/usr/bin/vmware-usbarbitrator --kill\nRemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-usbarbitrator.service

printf "%b\n[Unit]\nDescription=VMware Networks\nWants=vmware-networks-configuration.service\nAfter=vmware-networks-configuration.service\n[Service]\nType=forking\nExecStartPre=-/sbin/modprobe vmnet\nExecStart=/usr/bin/vmware-networks --start\nExecStop=/usr/bin/vmware-networks --stop\n[Install]\nWantedBy=multi-user.target\n" "$*" >> /mnt/etc/systemd/system/vmware-networks-server.service

arch-chroot /mnt systemctl enable vmware-networks-server.service
arch-chroot /mnt systemctl enable vmware-usbarbitrator.service
arch-chroot /mnt systemctl enable vmware.service

fi


command6finished="1"
else
command6finished="0"
fi
done
command6finished="0"

}

snapd_install (){

while [ "$command7finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ $snapon = "yes" ]; then
printf "%b3\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd

fi

command7finished="1"
else
command7finished="0"
fi
done
command7finished="0"

}

gpu_install (){

while [ "$command9finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ $gpu0 = "nvidia" ]; then
printf "%b\nSystemD-Bootloader UEFI for Nvidia selected.\nInstalling GPU Drivers first.\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm nvidia-open opencl-nvidia nvidia-utils nvidia-settings
printf "%b\noptions rw nvidia-drm.modeset=1 lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
elif [ $gpu0 = "amd" ]; then
printf "%b\nSystemD-Bootloader UEFI for AMD selected.\nInstalling amdgpu-fan and corectrl" "$*"
printf "%b\noptions rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" "$*" >> /mnt/boot/loader/entries/arch.conf
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl
fi

command9finished="1"
else
command9finished="0"
fi
done
command9finished="0"

}

yay_install (){
while [ "$yayinstallfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
printf "%b3\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y pamac-aur
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ckbcomp
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-openswap
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
printf "%b2 7\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mangohud
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y gamescope
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ntfix
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y systemd-kcm
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y swaysettings-git
printf "%b2\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y github-desktop
yayinstallfinished="1"
else
yayinstallfinished="0"
fi
done

}

secureboot_install (){

while [ "$command10finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ $sbpass0 = "yes" ]; then

printf "%bGenerating CoffeeLinux Secure-Boot keys for your machine\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm efitools mokutil sbsigntools apparmor sbctl
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y shim-signed
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y preloader-signed
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --reset
printf "%b$uefipass0\n$uefipass0\n" "$*" | arch-chroot /mnt mokutil --password

arch-chroot /mnt cp /usr/share/preloader-signed/PreLoader.efi /boot/EFI/systemd
arch-chroot /mnt cp /usr/share/preloader-signed/HashTool.efi /boot/EFI/systemd
arch-chroot /mnt cp /boot/EFI/systemd/systemd-bootx64.efi /boot/EFI/systemd/loader.efi
arch-chroot /mnt efibootmgr --unicode --disk $drive0 --part 1 --create --label "PreLoader" --loader /EFI/systemd/PreLoader.efi

arch-chroot /mnt mv /boot/EFI/BOOT/BOOTx64.EFI /boot/EFI/BOOT/grubx64.efi
arch-chroot /mnt cp /usr/share/shim-signed/shimx64.efi /boot/EFI/BOOT/BOOTx64.EFI
arch-chroot /mnt cp /usr/share/shim-signed/mmx64.efi /boot/EFI/BOOT/
arch-chroot /mnt efibootmgr --unicode --disk $drive0 --part 1 --create --label "Shim" --loader /EFI/BOOT/BOOTx64.EFI

arch-chroot /mnt openssl req -newkey rsa:4096 -nodes -keyout MOK.key -new -x509 -sha256 -days 3650 -subj "/CN=my Machine Owner Key/" -out MOK.crt
arch-chroot /mnt openssl x509 -outform DER -in MOK.crt -out MOK.cer
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/vmlinuz-linux /boot/vmlinuz-linux
arch-chroot /mnt sbsign --key MOK.key --cert MOK.crt --output /boot/EFI/BOOT/grubx64.efi /boot/EFI/BOOT/grubx64.efi
cp /opt/999-sign_kernel_for_secureboot.hook /mnt/etc/pacman.d/hooks/999-sign_kernel_for_secureboot.hook
arch-chroot /mnt cp MOK.cer /boot/
arch-chroot /mnt cp MOK.crt /boot/
arch-chroot /mnt cp MOK.key /boot/

arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

elif [ $sbpass0 = "no" ]; then
printf "%b\nAdding AppArmor\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm apparmor
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

fi

command10finished="1"
else
command10finished="0"
fi
done
command10finished="0"

}


homedir_fix (){

while [ "$command11finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%bAttempting to fix the home directory automatically now...\n" "$*"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
printf "%b1\n" "$*" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --nodiffmenu --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart
arch-chroot /mnt xdg-user-dirs-update
printf "%bCleaning up\n" "$*"

command11finished="1"
else
command11finished="0"
fi
done
command11finished="0"

}

success_check (){

while [ "$command15finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$native1" = "yes" ]; then
  mkdir -p /mnt/usr/share/wallpapers/coffee/
#  mkdir -p /mnt/usr/share/backgrounds/gnome/
  cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
#  cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
  cp -r /opt/* /mnt/opt/
  cp /opt/sway.desktop /mnt/usr/share/wayland-sessions/
  cp /usr/local/bin/coffeebrewer /mnt/usr/local/bin/
  arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer
  arch-chroot /mnt chmod 755 /usr/share/wayland-sessions/sway.desktop
fi

printf "%b\n Did the installer complete sussessfully? \n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's exit, something went wrong...\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac

if [ "$rebootcheck" = "1" ]; then 
printf "%b\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n" "$*"
elif [ "$rebootcheck" != "1" ]; then 
umount -R /mnt
swapoff $swap0
exit
fi

command15finished="1"
else
command15finished="0"
fi
done
command15finished="0"

}

#=================================================
#-Main
#=================================================
while [ "$command16finished" != "1" ]; do

printf "%b\n Would you like to install Coffee Linux? \n" "$*"
printf "%b\n1 - yes\n" "$*"
printf "%b\n2 - no\n" "$*"
read -r installationcheck
case $installationcheck in
  1) printf "%b\nPerfect\n" "$*" ;;
  *) printf "%b\nLet's exit.\n" "$*" ;;
  #*) printf "%b\nUnrecognized option, please try again: $user00\n" "$*" ;;
esac
if [ "$installationcheck" = "1" ]; then 
questionare
java_install
vmware_install
snapd_install
gpu_install
yay_install
secureboot_install
homedir_fix
success_check
installationcheck="1"
command16finished="1"
umount -R /mnt
reboot
else
installationcheck="0"
#-End-Script
exit
fi
done

#============================
#End-Main
