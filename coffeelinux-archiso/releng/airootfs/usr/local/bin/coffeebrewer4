#!/bin/sh

basearch="amd-ucode base base-devel broadcom-wl dbus-broker-units dhcpcd gobject-introspection intel-ucode iptables iwd linux linux-firmware man-db man-pages mkinitcpio nano networkmanager nmap sudo texinfo"

coffeeos="amd-ucode apparmor appstream-qt arch-install-scripts archinstall archiso archivetools archlinux-wallpaper aria2 ark autogen b43-fwcutter bash-completion bash-language-server bind bluez-libs boost boost-libs brltty btrfs-progs cabextract chafa chrony clang clonezilla cloud-init cmake colord colord-kde cronie cryptsetup cups darkhttpd dbus dbus-python dconf ddcutil ddrescue device-mapper dhclient diffutils directx-headers dkms dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools egl-wayland elfutils exfatprogs expat extra-cmake-modules f2fs-tools fastfetch fatresize firewalld flatpak freetype2 fsarchiver fuse2 fwupd fwupd-efi gettext giflib gimp git glfw-wayland glib2 glibc glslang gnome-disk-utility gnu-free-fonts gnutls go gpm gptfdisk grml-zsh-config gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer hdparm help2man hicolor-icon-theme hwinfo hyperv innoextract jfsutils kde-applications-meta kdevelop-python kgamma kitty-terminfo kpmcore kscreen kvantum libclc libdrm libelf libfido2 libglvnd libisoburn libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpwquality libsecret libunwind libusb-compat libva libva-utils libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lzop make maliit-keyboard meson mkinitcpio-archiso mkinitcpio-nfs-utils mlocate modemmanager mokutil mpg123 mtools nano ncurses net-tools nfs-utils nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra npm ntfs-3g ntfsprogs ntp nullmailer nvme-cli onboard open-iscsi open-vm-tools openal opencl-clhpp opencl-headers opencl-icd-loader openconnect opengl-man-pages openssh openvpn partclone pcsclite phonon-qt5-vlc phonon-qt6 phonon-qt6-vlc pipewire pipewire-alsa pipewire-jack pipewire-pulse plasma plasma-meta plasma-nm plasma-wayland-protocols plasma-workspace power-profiles-daemon ppp pptpclient pyside6 python python-gobject python-mako qemu-guest-agent qt5-wayland qt6 qt6-multimedia-ffmpeg qt6-virtualkeyboard qt6-wayland realtime-privileges refind reflector rp-pppoe rsync rtkit rust rxvt-unicode-terminfo sbctl sbsigntools screen sddm sddm-kcm sdparm sg3_utils shellcheck smartmontools sof-firmware squashfs-tools system-config-printer systemd systemd-resolvconf tcpdump terminus-font tesseract-data-eng testdisk tmux tpm2-tss ttf-dejavu ttf-liberation udev udftools ufw unrar unzip usb_modeswitch usbmuxd usbutils v4l-utils valgrind vlc vpnc w3m wget wireless-regdb wireless_tools wireplumber wpa_supplicant xdg-desktop-portal-kde xdg-utils xfconf xfsprogs xl2tpd xorg xorg-apps xorg-server xorg-xwayland xorgproto xreader xz yaml-cpp zenity zsh zstd"

javaapps="jre-openjdk"

configuration (){

clear

while [ "$branchcheck00" != "1" ] && [ "$branchcheck00" != "2" ]; do

printf "%b" "\nWhat type of installation do you want? (Default: 1)\n"
printf "%b" "\n1 - Stable\n"
printf "%b" "\n2 - Testing/Beta\n"

read -r branchcheck00
case $branchcheck00 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$branchcheck00" = "1" ]; then
branchpass00=stable
cp /opt/pacman-stable.conf /etc/pacman.conf
fi
if [ "$branchcheck00" = "2" ]; then
branchpass00=beta
cp /opt/pacman-unstable.conf /etc/pacman.conf
fi
if [ "$branchcheck00" != "1" ] && [ "$branchcheck00" != "2" ]; then
branchcheck00=1
branchpass00=stable
cp /opt/pacman-stable.conf /etc/pacman.conf
fi
done

clear

clear

while [ "$handheldcheck00" != "1" ] && [ "$handheldcheck00" != "2" ]; do

printf "%b" "\nIs the destination device a Handheld PC (Default: 1)\n"
printf "%b" "\n1 - No\n"
printf "%b" "\n2 - Yes\n"

read -r handheldcheck00
case $handheldcheck00 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$handheldcheck00" = "1" ]; then
handheldpass00=nope
printf "%b" "\nGot it. Moving on.."
fi
if [ "$handheldcheck00" = "2" ]; then
handheldpass00=yup
printf "%b" "\nGot it. Moving on.."
fi
if [ "$handheldcheck00" != "1" ] && [ "$handheldcheck00" != "2" ]; then
handheldcheck00=1
handheldpass00=nope
printf "%b" "\nGot it. Moving on.."
fi
done

clear

while [ "$usercheck02" != "1" ] && [ "$usercheck02" != "2" ]; do

printf "%b" "\nWould you like to set your username? (Default: 1)\n"
printf "%b" "\n1 - Yes\n"
printf "%b" "\n2 - No (Username will be 'default')\n"
read -r usercheck02
case $usercheck02 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

clear

if [ "$usercheck02" = "1" ]; then
while [ "$usercheck" != "1" ]; do
printf "%b" "\nSet your Username.\n"
read -r user00
printf "%b" "\n$user00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r usercheck
case $usercheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
if [ "$usercheck" = "1" ]; then
user01=$user00
fi

fi
if [ "$usercheck02" = "2" ]; then

usercheck=1
user00=default
user01=$user00

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

fi
if [ "$usercheck02" != "1" ] && [ "$usercheck02" != "2" ]; then

while [ "$usercheck" != "1" ]; do
printf "%b" "\nSet your Username.\n"
read -r user00
printf "%b" "\n$user00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r usercheck
case $usercheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

usercheck02=1

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

fi
done
#

clear

while [ "$userpasscheck00" != "1" ] && [ "$userpasscheck00" != "2" ]; do

printf "%b" "\nWould you like to set your user password? (Default: 1)\n"
printf "%b" "\n1 - Yes\n"
printf "%b" "\n2 - No (default password will be 'coffee')\n"
read -r userpasscheck00
case $userpasscheck00 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

clear

if [ "$userpasscheck00" = "1" ]; then
while [ "$userpasscheck" != "1" ]; do
printf "%b" "\nSet your User Password.\n"
read -r userpass00
printf "%b" "\n$userpass00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

fi
if [ "$userpasscheck00" = "2" ]; then

userpass00=coffee
userpasscheck=1

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

fi
if [ "$userpasscheck00" != "1" ] && [ "$userpasscheck00" != "2" ]; then

while [ "$userpasscheck" != "1" ]; do
printf "%b" "\nSet your User Password.\n"
read -r userpass00
printf "%b" "\n$userpass00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

userpasscheck00=1

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

fi
done
#

clear

while [ "$rootpasscheck00" != "1" ] && [ "$rootpasscheck00" != "2" ]; do

printf "%b" "\nWould you like to set your root password? (Default: 1)\n"
printf "%b" "\n1 - Yes\n"
printf "%b" "\n2 - No (Root password will be 'coffee')\n"
read -r rootpasscheck00
case $rootpasscheck00 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

clear

if [ "$rootpasscheck00" = "1" ]; then
while [ "$rootpasscheck" != "1" ]; do
printf "%b" "\nSet your Root Password.\n"
read -r userpass01
printf "%b" "\n$userpass01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

fi
if [ "$rootpasscheck00" = "2" ]; then

userpass01=coffee
rootpasscheck=1

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

fi
if [ "$rootpasscheck00" != "1" ] && [ "$rootpasscheck00" != "2" ]; then

while [ "$rootpasscheck" != "1" ]; do
printf "%b" "\nSet your Root Password.\n"
read -r userpass01
printf "%b" "\n$userpass01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

rootpasscheck00=1

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

fi
done

clear

while [ "$namepasscheck00" != "1" ] && [ "$namepasscheck00" != "2" ]; do

printf "%b" "\nWould you like to set your PC Name? (Default: 1)\n"
printf "%b" "\n1 - Yes\n"
printf "%b" "\n2 - No (Computer name will be 'coffeelinux')\n"
read -r namepasscheck00
case $namepasscheck00 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

clear

if [ "$namepasscheck00" = "1" ]; then
while [ "$namepasscheck" != "1" ]; do
printf "%b" "\nSet your PC name.\n"
read -r name00
printf "%b" "\n$name00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

fi
if [ "$namepasscheck00" = "2" ]; then

name00=coffeelinux
namepasscheck=1

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

fi
if [ "$namepasscheck00" != "1" ] && [ "$namepasscheck00" != "2" ]; then

while [ "$namepasscheck" != "1" ]; do
printf "%b" "\nSet your PC name.\n"
read -r name00
printf "%b" "\n$name00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

namepasscheck00=1

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

fi
done
#

clear

while [ "$name2passcheck02" != "1" ] && [ "$name2passcheck02" != "2" ]; do

printf "%b" "\nWould you like to set your Hard Drive Label? (Default: 1)\n"
printf "%b" "\n1 - Yes\n"
printf "%b" "\n2 - No (Drive name will be 'coffeedisk')\n"
read -r name2passcheck02
case $name2passcheck02 in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's move on then.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

clear

if [ "$name2passcheck02" = "1" ]; then
while [ "$name2passcheck" != "1" ]; do
printf "%b" "\nSet your HardDrive Label (OS Partition Label).\n"
read -r name01
printf "%b" "\n$name01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done
if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

fi
if [ "$name2passcheck02" = "2" ]; then

name01=coffeedisk
name2passcheck=1

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

fi
if [ "$name2passcheck02" != "1" ] && [ "$name2passcheck02" != "2" ]; then

while [ "$name2passcheck" != "1" ]; do
printf "%b" "\nSet your HardDrive Label (OS Partition Label).\n"
read -r name01
printf "%b" "\n$name01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

name2passcheck02=1

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

fi
done

clear

while [ "$driveXpasscheck" != "1" ]; do
printf "%b" "\nListing Storage Devices for you.\n"
fdisk -l
printf "%b" "\n"
printf "%b" "\nWhich drive do you want Coffee Linux to install to? (Default: 1)\n"
printf "%b" "\n1 - NVME0N1"
printf "%b" "\n2 - NVME1N1"
printf "%b" "\n3 - SDA"
printf "%b" "\n4 - SDB"
printf "%b" "\n5 - VDA"
printf "%b" "\n6 - VDB\n"

read -r driveX
if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3


printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3


printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" != "1" ] && [ "$driveX" != "2" ] && [ "$driveX" != "3" ] && [ "$driveX" != "4" ] && [ "$driveX" != "5" ] && [ "$driveX" != "6" ]; then
driveX=1
drive="nvme0n1"
boot=p1
swap=p2
system=p3
driveXpasscheck=1

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
done

clear

while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; do
printf "%b" "\nWhat type of GPU do you have? (Default: 1)\n"
printf "%b" "\n1 - AMD\n"
printf "%b" "\n2 - Nvidia\n"
printf "%b" "\n3 - Intel\n"
printf "%b" "\n4 - Virtual GPU (VMware etc.)\n"

read -r gpucheck
case $gpucheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nA good choice.\n" ;;
  3) printf "%b" "\nA good choice.\n" ;;
  4) printf "%b" "\nA good choice.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$gpucheck" = "1" ]; then
gpu0="amd"
fi
if [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
fi
if [ "$gpucheck" = "3" ]; then
gpu0="intel"
fi
if [ "$gpucheck" = "4" ]; then
gpu0="vm"
fi
if [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; then
gpucheck=1
gpu0="amd"
fi
done

clear

native1=yes
desktop0="kde"
swapcheck=2
hibernationpasscheck=1
coffeeon00=yes
webbrowser00=chrome
steamon00=yes
fs0=btrfs

clear

while [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ]; do
printf "%b" "\nWould you like GRUB or SystemD-Bootloader?\nGRUB is more compatible with VMs. (Default: 1)\n"
printf "%b" "\n1 - GRUB UEFI version\n"
printf "%b" "\n2 - GRUB BIOS/MBR version\n"
read -r grubcheck
case $grubcheck in
  1) printf "%b" "\nPerfect.\n" ;;
  2) printf "%b" "\nGreat Choice.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$grubcheck" = "1" ]; then
grub0="true"
questionspassed="yes"
fi
if [ "$grubcheck" = "2" ]; then
grub0="true2"
questionspassed="yes"
fi

clear
if [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ]; then
grubcheck=1
grub0=true
questionspassed=yes
fi
done

}

set_swap (){

clear

while [ "$command0finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$hibernationpasscheck" = "1" ]; then
HIBERNATING="1"
fi

while [ "$rampasscheck" != "1" ]; do

RAM=$(free -m | grep Mem | awk '{print $2}')

if [ "$RAM" -gt 2048 ] && [ "$RAM" -lt 8192 ]; then # if RAM is between 2 and 8 GB

    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="3"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 8192 ] && [ "$RAM" -lt 16384 ]; then # if RAM is between 8 and 16 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="2"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$RAM" -gt 32768  ]; then    # if RAM is more than 32 GB
    if [ "$HIBERNATING" = "1" ]; then
        MULTIPLIER="1"
    else
        MULTIPLIER="1"
    fi
fi

if [ "$swapcheck" = "1" ]; then
    printf "%b" "\nEnter swap size in GB\n"
    read -r swapsize1
    swapsize="+""$((swapsize1))G"
    swap1=$swapsize
fi
if [ "$swapcheck" = "2" ]; then
    swapsize="+""$((RAM*MULTIPLIER))M"
    swap1=$swapsize
fi

rampasscheck="1"

done

command0finished="1"
else
command0finished="0"
fi
done
command0finished="0"

}

clear

format_disks (){

clear

while [ "$command1finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "\nFormatting Partitions\n"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n19\nt\n3\n20\nw\n" | fdisk -W always $drive0
mkfs.vfat -F 32 "$boot0"
mkswap "$swap0"
swapon "$swap0"

if [ "$fs0" = "btrfs" ]; then
mkfs.btrfs -f -L "$drivename0" "$system0"
fi
if [ "$fs0" = "ext4" ]; then
mkfs.ext4 -L "$drivename0" "$system0"
fi
printf "%b" "\nMounting Disks\n"
mount "$system0" /mnt
mkdir /mnt/boot
mount "$boot0" /mnt/boot
clear

command1finished="1"
else
command1finished="0"
fi
done
command1finished="0"

}

baseos_install (){

clear

while [ "$pacstrapfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
pacstrap /mnt $basearch
clear

pacstrapfinished="1"
else
pacstrapfinished="0"
fi

done

}

preset_locale (){

clear

while [ "$command2finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

rm /mnt/etc/locale.gen
rm /mnt/etc/locale.conf
rm /mnt/etc/vconsole.conf
rm /mnt/etc/sudoers.d/wheel

arch-chroot /mnt /bin/bash <<"EOT"
printf "%b" "\nSetting Locale\n"
ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc
printf "%b" "\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\n" >> /etc/locale.gen
printf "%b" "\nKEYMAP=us\n" >> /etc/vconsole.conf
printf "%b" "\nLANG=en_US.UTF-8" >> /etc/locale.conf
export LANG=en_US.UTF-8
locale-gen
cd /
printf "%b\n%%"w"heel ALL=(ALL:ALL) NOPASSWD: ALL\n" "$*" > /etc/sudoers.d/wheel
mkinitcpio -P

EOT

cp --dereference /etc/resolv.conf /mnt/etc/
arch-chroot /mnt pacman -Syu --noconfirm
clear

command2finished="1"
else
command2finished="0"
fi
done
command2finished="0"

}

set_passwords (){

clear

while [ "$command3finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear
cp /etc/pacman.conf /mnt/etc/pacman.conf
printf "%b" "\nSet Root Password\n"
printf "%b" "$userpass1\n$userpass1\n" | arch-chroot /mnt passwd
printf "%b" "Adding User Account\n"
arch-chroot /mnt useradd -m -G wheel,audio,video,users $user01
printf "%b" "\nSet User Password\n"
printf "%b" "$userpass0\n$userpass0\n" | arch-chroot /mnt passwd $user01
printf "%b" "$hostname0\n" >> /mnt/etc/hostname
printf "%b" "\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0\n" >> /mnt/etc/hosts
printf "%b" "Creating Links\n"
genfstab -U /mnt >> /mnt/etc/fstab
clear

command3finished="1"
else
command3finished="0"
fi
done
command3finished="0"

}

mainos_install (){

clear

while [ "$command4finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $coffeeos
arch-chroot /mnt pacman -Rdd --noconfirm kmix
arch-chroot /mnt pacman -Rdd --noconfirm blueman
arch-chroot /mnt usermod -aG realtime $user01
rm /mnt/etc/pipewire/pipewire.conf
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/pipewire/pipewire.conf -P /mnt/etc/pipewire/
rm /usr/local/bin/coffee-barista
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/usr/local/bin/coffee-barista -P /usr/local/bin/
chmod 755 /usr/local/bin/coffee-barista
rm /opt/coffee-updater
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/coffee-updater -P /opt/
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
cp /opt/pipewire/pipewire.conf /mnt/etc/pipewire/

#Install Yay for AUR support
clear
printf "%b" "\nCopying yay package..\n"
clear
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/yay-12.4.2-1-x86_64.pkg.tar.zst -P /opt/
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/yay-debug-12.4.2-1-x86_64.pkg.tar.zst -P /opt/
cp /opt/yay-12.4.2-1-x86_64.pkg.tar.zst /mnt/opt/
cp /opt/yay-debug-12.4.2-1-x86_64.pkg.tar.zst /mnt/opt/
clear
printf "%b" "\nInstalling yay.\n"
clear
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.4.2-1-x86_64.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm /opt/yay-debug-12.4.2-1-x86_64.pkg.tar.zst
clear
printf "%b" "\nInstalled yay successfully.\n"
clear

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

fi

command4finished="1"
else
command4finished="0"
fi
done

}

bootloader_install (){

clear

while [ "$command8finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$grub0" = "true" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b" "\nGRUB UEFI for Nvidia selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-nvidia/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-nvidia/grub -P /opt/grub-nvidia/
cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi
if [ "$gpu0" = "amd" ]; then

printf "%b" "\nGRUB UEFI for AMD selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font efivar

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-amd/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-amd/grub -P /opt/grub-amd/
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi
if [ "$gpu0" = "intel" ]; then

printf "%b" "\nGRUB UEFI for Intel selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-intel/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-intel/grub -P /opt/grub-intel/
cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi

fi
if [ "$grub0" = "true2" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b" "\nGRUB BIOS for Nvidia selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-nvidia/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-nvidia/grub -P /opt/grub-nvidia/
cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
pacman -Sy --noconfirm
mkinitcpio -P
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi
if [ "$gpu0" = "amd" ]; then

printf "%b" "\nGRUB BIOS for AMD selected.\n"


arch-chroot /mnt pacman -S --needed --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-amd/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-amd/grub -P /opt/grub-amd/
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi
if [ "$gpu0" = "intel" ]; then

printf "%b" "\nGRUB BIOS for Intel selected.\n"

arch-chroot /mnt pacman -S --needed --noconfirm libadwaita grub os-prober breeze-grub terminus-font

if [ "$desktop0" = "kde" ]; then
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks
fi

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-intel/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-intel/grub -P /opt/grub-intel/
cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi

fi

#-Bootloader-End

command8finished="1"
else
command8finished="0"
fi
done
command8finished="0"

}

gpu_install (){

clear

while [ "$command9finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$gpu0" = "nvidia" ]; then
printf "%b" "\nNvidia GPU selected.\nInstalling GPU Drivers first.\n"
arch-chroot /mnt pacman -Sy --noconfirm nvidia nvidia-prime opencl-nvidia nvidia-utils nvidia-settings vulkan-validation-layers vkd3d vulkan-icd-loader
 if [ "$grub0" = "false" ]; then
  printf "%b" "\noptions root=LABEL=$drivename0 rw nvidia_drm.modeset=1 lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" >> /mnt/boot/loader/entries/arch.conf
 fi
fi
if [ "$gpu0" = "amd" ]; then
printf "%b" "\nAMD GPU selected.\nInstalling amdgpu-fan and corectrl as well\n"
arch-chroot /mnt pacman -Sy --noconfirm libva-mesa-driver mesa mesa-utils mesa-vdpau opencl-clover-mesa opencl-rusticl-mesa vulkan-mesa-layers vulkan-radeon xf86-video-amdgpu vulkan-validation-layers vkd3d vulkan-icd-loader
 if [ "$grub0" = "false" ]; then
  printf "%b" "\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" >> /mnt/boot/loader/entries/arch.conf
 fi
arch-chroot /mnt pacman -Sy --noconfirm corectrl
fi
if [ "$gpu0" = "intel" ]; then
printf "%b" "\nIntel GPU selected.\n"
arch-chroot /mnt pacman -Sy --noconfirm mesa xorg-server vulkan-intel vulkan-intel libva-intel-driver libva-utils vulkan-validation-layers vkd3d vulkan-icd-loader
 if [ "$grub0" = "false" ]; then
  printf "%b" "\noptions root=LABEL=$drivename0 rw lsm=landlock,lockdown,yama,integrity,apparmor,bpf\n" >> /mnt/boot/loader/entries/arch.conf
 fi
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
fi

command9finished="1"
else
command9finished="0"
fi
done
command9finished="0"

}

postos_install (){

clear

while [ "$command18finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear
arch-chroot /mnt pacman -Sy --noconfirm $javaapps
java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"
arch-chroot /mnt archlinux-java set "$java1"

clear

if [ "$webbrowser00" = "chrome" ]; then
if [ "$branchpass00" = "stable" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
clear
fi
if [ "$branchpass00" = "beta" ]; then
printf "%b" "3\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
clear
fi

arch-chroot /mnt pacman -Sy --noconfirm libreoffice-fresh discord mangohud lutris gamescope steam-native-runtime wine wine-gecko wine-mono winetricks
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protonup-qt
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
clear
printf "%b" "2\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y github-desktop
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
clear
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd
rm /opt/snapd-updater.service
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/snapd-updater.service -P /opt/
cp /opt/snapd-updater /mnt/opt/
arch-chroot /mnt chmod 755 /opt/snapd-updater
cp /opt/snapd-updater.service /mnt/lib/systemd/system/
arch-chroot /mnt systemctl enable snapd-updater.service
clear
fi
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y pamac-aur
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-openswap
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y faudio
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y minecraft-launcher
clear

command18finished="1"
else
command18finished="0"
fi
done
command18finished="0"

}


handheld_install (){
if [ "$handheldpass00" = "yup" ]; then
  #Autologin User
  rm -r /mnt/etc/sddm.conf.d/autologin.conf
  mkdir -p /mnt/etc/sddm.conf.d/
  printf "%b" "\n[General]\nDisplayServer=wayland\n\n[Autologin]\nUser=$user00\nSession=plasma.desktop\nRelogin=true" > /mnt/etc/sddm.conf.d/autologin.conf
  #Setup OSKB for Handheld PCs
  rm -r /mnt/etc/sddm.conf.d/virtualkbd.conf
  printf "%b" "\n[General]\nInputMethod=maliit-keyboard" > /mnt/etc/sddm.conf.d/virtualkbd.conf
  cp /etc/xdg/kwinrc /mnt/etc/xdg/kwinrc
  arch-chroot /mnt chmod 755 /etc/xdg/kwinrc
  clear
  #Install Handheld Device Daemon
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y hhd
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y adjustor
  clear
  printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y hhd-ui
  clear
  arch-chroot /mnt systemctl enable hhd@$user01
  clear
fi
}


services_starter(){

arch-chroot /mnt pacman -Sy --noconfirm apparmor
clear
arch-chroot /mnt systemctl enable apparmor
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl enable bluetooth.service
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service pipewire-alsa.service wireplumber.service
arch-chroot /mnt systemctl enable rtkit-daemon.service
}

homedir_fix (){

clear

while [ "$command11finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "\nAttempting to fix the home directory automatically now...\n"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart
clear
arch-chroot /mnt xdg-user-dirs-update
printf "%b" "Cleaning up\n"

command11finished="1"
else
command11finished="0"
fi
done
command11finished="0"

}

success_check (){

clear

while [ "$command15finished" != "1" ] && [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$native1" = "yes" ]; then
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
  if [ "$coffeeon00" = "yes" ]; then
   cp -r /opt/* /mnt/opt/
   cp /usr/local/bin/coffeebrewer4 /mnt/usr/local/bin/
   cp /usr/local/bin/coffee-barista /mnt/usr/local/bin/
   arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer4
   arch-chroot /mnt chmod 755 /usr/local/bin/coffee-barista
   rm /opt/backgrounds/coffee/adwaita-l.jpg
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-l.jpg -P /opt/backgrounds/coffee/
   rm /opt/backgrounds/coffee/adwaita-d.jpg
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-d.jpg -P /opt/backgrounds/coffee/
   rm /opt/backgrounds/coffee/adwaita-l.jxl
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-l.jxl -P /opt/backgrounds/coffee/
   rm /opt/backgrounds/coffee/adwaita-d.jxl
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-d.jxl -P /opt/backgrounds/coffee/
   mkdir -p /mnt/usr/share/wallpapers/coffee/
   mkdir -p /mnt/usr/share/backgrounds/gnome/
   cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
   cp /opt/backgrounds/coffee/* /mnt/usr/share/backgrounds/gnome/
   rm /opt/coffee-keeper
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/coffee-keeper -P /opt/
   cp /opt/coffee-keeper /mnt/opt/
   arch-chroot /mnt chmod 755 /opt/coffee-keeper
   rm /opt/coffee-injector
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/coffee-injector -P /opt/
   cp /opt/coffee-injector /mnt/opt/
   arch-chroot /mnt chmod 755 /opt/coffee-injector
   rm /opt/coffee-keeper.service
   rm /lib/systemd/system/coffee-keeper.service
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/coffee-keeper.service -P /opt/
   cp /opt/coffee-keeper.service /mnt/lib/systemd/system/
   arch-chroot /mnt chmod 755 /lib/systemd/system/coffee-keeper.service
   arch-chroot /mnt systemctl enable coffee-keeper.service
   rm /mnt/etc/bin/issue
   cp /opt/issue /mnt/etc/
   arch-chroot /mnt chmod 755 /etc/issue
   rm /mnt/usr/local/bin/coffee-updater
   cp /opt/coffee-updater /mnt/usr/local/bin/
   arch-chroot /mnt chmod 755 /usr/local/bin/coffee-updater
   rm /mnt/usr/share/applications/coffee-updater.desktop
   cp /opt/coffee-updater.desktop /mnt/usr/share/applications/
   arch-chroot /mnt chmod 755 /usr/share/applications/coffee-updater.desktop
   rm /mnt/usr/local/bin/coffee-filter
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/usr/local/bin/coffee-filter -P /mnt/usr/local/bin/
   arch-chroot /mnt chmod 755 /usr/local/bin/coffee-filter
   rm /mnt/usr/share/applications/coffee-filter.desktop
   wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/usr/share/applications/coffee-filter.desktop -P /mnt/usr/share/applications/
   arch-chroot /mnt chmod 755 /usr/share/applications/coffee-filter.desktop


   if [ "$steamon00" = "yes" ]; then
   rm /mnt/usr/share/applications/steam-native.desktop
   fi
   rm /mnt/usr/share/applications/stoken-gui-small.desktop
  fi
  if [ "$branchpass00" = "stable" ]; then
  cp /opt/pacman-stable.conf /etc/pacman.conf
  fi
  if [ "$branchpass00" = "beta" ]; then
  cp /opt/pacman-stable.conf /etc/pacman.conf
  fi
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
fi

clear
printf "%b" "\nDid the installer complete successfully? (Default: 1)\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's exit, something went wrong...\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$rebootcheck" = "1" ]; then
printf "%b" "\n"
fi
if [ "$rebootcheck" = "2" ]; then
  if [ "$branchpass00" = "stable" ]; then
  cp /opt/pacman-stable.conf /etc/pacman.conf
  fi
  if [ "$branchpass00" = "beta" ]; then
  cp /opt/pacman-stable.conf /etc/pacman.conf
  fi
umount -R /mnt
swapoff "$swap0"
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
exit
fi
if [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; then
rebootcheck=1
printf "%b" "\n"
fi

command15finished="1"
else
command15finished="0"
fi
done
command15finished="0"

}

#=================================================
#-Main
#=================================================

cp /opt/os-release /etc/
cp /opt/lsb-release /etc/

clear

configuration
set_swap
format_disks
baseos_install
preset_locale
set_passwords
mainos_install
bootloader_install
gpu_install
postos_install
handheld_install
services_starter
homedir_fix
success_check
umount -R /mnt
printf "%b" "Let's proceed to reboot.\nPlease eject/remove the installation medium.\n"
printf "%b" "\n#######Press enter to continue.#######.\n"
read -r endcheck00
printf "%b" "\nYou typed $endcheck00...\n\n"
clear
reboot

#============================
#End-Main
#============================

#End-Script
