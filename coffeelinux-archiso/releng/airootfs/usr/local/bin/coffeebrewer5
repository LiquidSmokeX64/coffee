#!/bin/bash
set -e

# ==============================================================================
# CoffeeBrewer5 - AI Optimized Installation Script for CoffeeLinux
# ==============================================================================

# --- Global Variables ---
BASE_PACKAGES="amd-ucode base base-devel broadcom-wl dbus-broker-units dhcpcd gobject-introspection intel-ucode iptables iwd linux linux-firmware man-db man-pages mkinitcpio nano networkmanager nmap sudo texinfo"

GAMING_PACKAGES="vulkan-icd-loader lib32-vulkan-icd-loader mesa lib32-mesa vulkan-validation-layers vkd3d lib32-vkd3d gamemode mangohud lib32-gamemode vulkan-radeon lib32-vulkan-radeon intel-media-driver xf86-video-amdgpu xf86-video-intel libva-mesa-driver lib32-libva-mesa-driver libvdpau lib32-libvdpau opencl-icd-loader lib32-opencl-icd-loader opencl-clover-mesa lib32-opencl-clover-mesa wine wine-mono wine-gecko winetricks steam-native-runtime joystick libusb libusb-compat openal libpulse lib32-libpulse pipewire pipewire-alsa pipewire-jack pipewire-pulse wireplumber"

COFFEE_PACKAGES="arch-install-scripts archinstall archiso archivetools archlinux-wallpaper aria2 ark autogen b43-fwcutter bash-completion bash-language-server bind bluez-libs boost boost-libs brltty btrfs-progs cabextract chafa chrony clang clonezilla cloud-init cmake colord colord-kde cronie cryptsetup cups darkhttpd dbus dbus-python dconf ddcutil ddrescue device-mapper dhclient diffutils directx-headers dkms dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools egl-wayland elfutils exfatprogs expat extra-cmake-modules f2fs-tools fastfetch fatresize firewalld flatpak freetype2 fsarchiver fuse2 fwupd fwupd-efi gettext giflib gimp git glfw-wayland glib2 glibc glslang gnome-disk-utility gnu-free-fonts gnutls go gpm gptfdisk grml-zsh-config gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer hdparm help2man hicolor-icon-theme hwinfo hyperv innoextract jfsutils kde-applications-meta kdevelop-python kgamma kitty-terminfo kpmcore kscreen kvantum libclc libdrm libelf libfido2 libglvnd libisoburn libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpwquality libsecret libunwind libusb-compat libva libva-utils libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors lzop make maliit-keyboard meson mkinitcpio-archiso mkinitcpio-nfs-utils mlocate modemmanager mokutil mpg123 mtools nano ncurses net-tools nfs-utils nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra npm ntfs-3g ntfsprogs ntp nullmailer nvme-cli onboard open-iscsi open-vm-tools openal opencl-clhpp opencl-headers openconnect opengl-man-pages openssh openvpn partclone pcsclite phonon-qt5-vlc phonon-qt6 phonon-qt6-vlc pipewire-alsa pipewire-jack pipewire-pulse plasma plasma-meta plasma-nm plasma-wayland-protocols plasma-workspace power-profiles-daemon ppp pptpclient pyside6 python python-gobject python-mako qemu-guest-agent qt5-wayland qt6 qt6-multimedia-ffmpeg qt6-virtualkeyboard qt6-wayland realtime-privileges refind reflector rp-pppoe rsync rust rtkit rxvt-unicode-terminfo sbctl sbsigntools screen sddm sddm-kcm sdparm sg3_utils shellcheck smartmontools sof-firmware squashfs-tools system-config-printer systemd systemd-resolvconf tcpdump terminus-font tesseract-data-eng testdisk tmux tpm2-tss ttf-dejavu ttf-liberation udev udftools ufw unrar unzip usb_modeswitch usbmuxd usbutils v4l-utils valgrind vlc vpnc w3m wget wireless-regdb wireless_tools wireplumber wpa_supplicant xdg-desktop-portal-kde xdg-utils xfconf xfsprogs xl2tpd xorg xorg-apps xorg-server xorg-xwayland xorgproto xreader xz yaml-cpp zenity zsh zstd"

JAVA_PACKAGES="jre-openjdk"
HANDHELD="no"
USERNAME="default"
USER_PASSWORD="coffee"
ROOT_PASSWORD="coffee"
HOSTNAME="coffeelinux"
DRIVE_LABEL="coffeedisk"
DRIVE="/dev/nvme0n1"
BOOT_PART="p1"
SWAP_PART="p2"
SYSTEM_PART="p3"
GPU="amd"
BOOTLOADER="grub-uefi"
FILESYSTEM="btrfs"

# --- Helper Functions ---

prompt() {
    if [ -n "$2" ]; then
        printf "%b" "$1\n%b\n> " "$1" "$2"
    else
        printf "%b" "$1\n> " "$1"
    fi
}

ask_yes_no() {
    read -rp "$1 (y/N) > " answer
    [[ "$answer" =~ ^[Yy]$ ]]
}

ask_choice() {
    read -rp "$1 (Default: $2)\n$3\n> " choice
    if [ -z "$choice" ]; then
        echo "$2"
    else
        echo "$choice"
    fi
}

ask_input() {
    read -rp "$1 (Default: '$2') > " input
    if [ -z "$input" ]; then
        echo "$2"
    else
        echo "$input"
    fi
}



# --- Configuration ---

configure_branch() {
  clear
  local branch_choice
  branch_choice=$(ask_choice "Choose installation branch" "stable" "1 - Stable, or 2 - Testing/Beta")
  case "$branch_choice" in
    1|stable) cp /opt/pacman-stable.conf /etc/pacman.conf; prompt "Stable branch selected." ;;
    2|beta) cp /opt/pacman-unstable.conf /etc/pacman.conf; prompt "Testing/Beta branch selected." ;;
    *) cp /opt/pacman-stable.conf /etc/pacman.conf; prompt "Unrecognized option, defaulting to stable." ;;
  esac
}

configure_handheld() {
  clear
  if ask_yes_no "Is the destination device a Handheld PC?"; then
    HANDHELD="yes"
    prompt "Handheld mode enabled."
  else
    HANDHELD="no"
    prompt "Desktop mode."
  fi
}

configure_user() {
  clear
  USERNAME=$(ask_input "Set your username" "default")
}

configure_password() {
  clear
  USER_PASSWORD=$(ask_input "Set your user password" "coffee")
}

configure_root_password() {
  clear
  ROOT_PASSWORD=$(ask_input "Set your root password" "coffee")
}

configure_hostname() {
  clear
  HOSTNAME=$(ask_input "Set your PC name" "coffeelinux")
}

configure_drive_label() {
  clear
  DRIVE_LABEL=$(ask_input "Set your hard drive label (OS partition)" "coffeedisk")
}

configure_drive() {
  clear
  prompt "Listing storage devices:"
  fdisk -l
  local drive_choice
  drive_choice=$(ask_choice "Choose the drive to install to" "nvme0n1" "1 - NVME0N1, 2 - NVME1N1, 3 - SDA, or 4 - SDB\n5 - VDA\n6 - VDB")
  case "$drive_choice" in
    1) DRIVE="/dev/nvme0n1"; BOOT_PART="p1"; SWAP_PART="p2"; SYSTEM_PART="p3" ;;
    2) DRIVE="/dev/nvme1n1"; BOOT_PART="p1"; SWAP_PART="p2"; SYSTEM_PART="p3" ;;
    3) DRIVE="/dev/sda"; BOOT_PART="1"; SWAP_PART="2"; SYSTEM_PART="3" ;;
    4) DRIVE="/dev/sdb"; BOOT_PART="1"; SWAP_PART="2"; SYSTEM_PART="3" ;;
    5) DRIVE="/dev/vda"; BOOT_PART="1"; SWAP_PART="2"; SYSTEM_PART="3" ;;
    6) DRIVE="/dev/vdb"; BOOT_PART="1"; SWAP_PART="2"; SYSTEM_PART="3" ;;
    *) DRIVE="/dev/nvme0n1"; BOOT_PART="p1"; SWAP_PART="p2"; SYSTEM_PART="p3"; prompt "Unrecognized option, defaulting to /dev/nvme0n1." ;;
  esac
}

configure_gpu() {
  clear
  local gpu_choice
  gpu_choice=$(ask_choice "Choose your GPU type" "amd" "1 - AMD, 2 - Nvidia, 3 - Intel, or 4 - Virtual GPU (VMware etc.)")
  case "$gpu_choice" in
    1|amd) GPU="amd" ;;
    2|nvidia) GPU="nvidia" ;;
    3|intel) GPU="intel" ;;
    4|vm) GPU="vm"; GPU="amd" ;; # Treat VM as AMD for broader compatibility
    *) GPU="amd"; prompt "Unrecognized option, defaulting to AMD." ;;
  esac
}

configure_bootloader() {
  clear
  local bootloader_choice
  bootloader_choice=$(ask_choice "Choose bootloader" "grub-uefi" "1 - GRUB UEFI version, or 2 - GRUB BIOS/MBR version")
  case "$bootloader_choice" in
    1) BOOTLOADER="grub-uefi" ;;
    2) BOOTLOADER="grub-bios" ;;
    *) BOOTLOADER="grub-uefi"; prompt "Unrecognized option, defaulting to GRUB UEFI." ;;
  esac
}

configure_filesystem() {
  clear
  local fs_choice
  fs_choice=$(ask_choice "Choose filesystem for the root partition" "btrfs" "1 - BTRFS, or 2 - EXT4")
  case "$fs_choice" in
    1|btrfs) FILESYSTEM="btrfs" ;;
    2|ext4) FILESYSTEM="ext4" ;;
    *) FILESYSTEM="btrfs"; prompt "Unrecognized option, defaulting to BTRFS." ;;
  esac
}

# --- Installation Steps ---

set_swap() {
  clear
  local ram_gb
  ram_gb=$(free -m | grep Mem | awk '{print $2}')
  local swap_size_mb
  local hibernate
  hibernate=$(ask_yes_no "Enable hibernation?")

  if [[ "$ram_gb" -gt 2048 && "$ram_gb" -lt 8192 ]]; then
    swap_multiplier=$((hibernate ? 3 : 1))
  elif [[ "$ram_gb" -gt 8192 && "$ram_gb" -lt 16384 ]]; then
    swap_multiplier=$((hibernate ? 2 : 1))
  else
    swap_multiplier=1
  fi

  local swap_choice
  swap_choice=$(ask_choice "Set swap size" "$((ram_gb * swap_multiplier))M" "Enter size in MB (e.g., 2048 for 2GB)")
  if [[ "$swap_choice" =~ ^[0-9]+$ ]]; then
    swap_size_mb="+$swap_choice""M"
  else
    swap_size_mb="+$((ram_gb * swap_multiplier))M"
    prompt "Using default swap size: $((ram_gb * swap_multiplier))MB"
  fi
  SWAP_SIZE="$swap_size_mb"
}

format_disks() {
  clear
  prompt "Formatting partitions..."
  printf "%b" "g\nn\n1\n\n+2G\nn\n2\n\n$SWAP_SIZE\nn\n3\n\n\nt\n1\nef\nt\n2\n82\nt\n3\n83\nw\n" | fdisk -W always "$DRIVE"
  mkfs.vfat -F 32 "${DRIVE}${BOOT_PART}"
  mkswap "${DRIVE}${SWAP_PART}"
  swapon "${DRIVE}${SWAP_PART}"

  if [ "$FILESYSTEM" = "btrfs" ]; then
    mkfs.btrfs -f -L "$DRIVE_LABEL" "${DRIVE}${SYSTEM_PART}"
  elif [ "$FILESYSTEM" = "ext4" ]; then
    mkfs.ext4 -L "$DRIVE_LABEL" "${DRIVE}${SYSTEM_PART}"
  fi

  prompt "Mounting disks..."
  mount "${DRIVE}${SYSTEM_PART}" /mnt
  mkdir -p /mnt/boot
  mount "${DRIVE}${BOOT_PART}" /mnt/boot
}

baseos_install() {
  clear
  prompt "Installing base OS packages..."
  pacstrap /mnt "$BASE_PACKAGES"
}

preset_locale() {
  clear
  prompt "Setting locale..."
  rm -f /mnt/etc/locale.gen /mnt/etc/locale.conf /mnt/etc/vconsole.conf /mnt/etc/sudoers.d/wheel
  arch-chroot /mnt /bin/bash -c "
    ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
    hwclock --systohc
    echo 'en_US ISO-8859-1\nen_US.UTF-8 UTF-8' >> /etc/locale.gen
    echo 'KEYMAP=us' >> /etc/vconsole.conf
    echo 'LANG=en_US.UTF-8' >> /etc/locale.conf
    export LANG=en_US.UTF-8
    locale-gen
    cd /
    echo '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' > /etc/sudoers.d/wheel
    mkinitcpio -P
  "
  cp --dereference /etc/resolv.conf /mnt/etc/
  arch-chroot /mnt pacman -Syu --noconfirm
}

set_passwords() {
  clear
  prompt "Setting passwords and hostname..."
  cp /etc/pacman.conf /mnt/etc/pacman.conf
  printf "%s\n%s\n" "$ROOT_PASSWORD" "$ROOT_PASSWORD" | arch-chroot /mnt passwd root
  arch-chroot /mnt useradd -m -G wheel,audio,video,users "$USERNAME"
  printf "%s\n%s\n" "$USER_PASSWORD" "$USER_PASSWORD" | arch-chroot /mnt passwd "$USERNAME"
  echo "$HOSTNAME" > /mnt/etc/hostname
  printf "%b" "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $HOSTNAME" >> /mnt/etc/hosts
  genfstab -U /mnt >> /mnt/etc/fstab
}

mainos_install() {
  clear
  prompt "Installing CoffeeOS and gaming packages..."
  arch-chroot /mnt pacman -Sy --noconfirm "$COFFEE_PACKAGES" "$GAMING_PACKAGES"
  arch-chroot /mnt pacman -Rdd --noconfirm kmix blueman rust # Remove potentially conflicting or less needed packages
  arch-chroot /mnt usermod -a -G realtime "$USERNAME"
  arch-chroot /mnt usermod -a -G input "$USERNAME"
  arch-chroot /mnt usermod -a -G plugdev "$USERNAME"

  # Configure PipeWire
  rm -rf /mnt/etc/pipewire
  mkdir -p /mnt/etc/pipewire
  wget -q -O /mnt/etc/pipewire/pipewire.conf https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/pipewire/pipewire.conf
  arch-chroot /mnt systemctl preset-all
  arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd
  arch-chroot /mnt systemctl enable pipewire.service pipewire-pulse.service pipewire-alsa.service wireplumber.service rtkit-daemon.service

  # Install Yay for AUR support
  prompt "Installing yay for AUR support..."
  arch-chroot /mnt pacman -Sy --noconfirm git base-devel
  arch-chroot /mnt git clone https://aur.archlinux.org/yay.git /tmp/yay
  arch-chroot /mnt bash -c "cd /tmp/yay && makepkg -si --noconfirm  "
  rm -rf /tmp/yay

  # Install GPU drivers
  case "$GPU" in
    nvidia)
      prompt "Installing Nvidia drivers..."
      arch-chroot /mnt pacman -Sy --noconfirm nvidia nvidia-prime opencl-nvidia nvidia-utils nvidia-settings lib32-nvidia-utils
      cp /opt/grub-nvidia/grub /mnt/etc/default/
      ;;
    amd)
      prompt "Installing AMD drivers and tools..."
      arch-chroot /mnt pacman -Sy --noconfirm mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon vulkan-mesa-layers lib32-vulkan-mesa-layers corectrl
      cp /opt/grub-amd/grub /mnt/etc/default/
      ;;
    intel)
      prompt "Installing Intel drivers..."
      arch-chroot /mnt pacman -Sy --noconfirm mesa lib32-mesa xf86-video-intel vulkan-intel lib32-vulkan-intel intel-media-driver
      cp /opt/grub-amd/grub /mnt/etc/default/
      ;;
  esac

  # Enable SDDM for Plasma
  arch-chroot /mnt systemctl enable sddm
}

bootloader_install() {
  clear
  prompt "Installing bootloader ($BOOTLOADER)..."
  case "$BOOTLOADER" in
    grub-uefi)
      arch-chroot /mnt pacman -Sy --noconfirm efibootmgr grub os-prober
      arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
      arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      ;;
    grub-bios)
      arch-chroot /mnt pacman -Sy --noconfirm grub os-prober
      arch-chroot /mnt grub-install --target=i386-pc "$DRIVE"
      arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      ;;
  esac
}

postos_install() {
  clear
  prompt "Installing additional packages and configurations..."
  arch-chroot /mnt pacman -Sy --noconfirm "$JAVA_PACKAGES" libreoffice-fresh mangohud lutris gamescope steam-native-runtime wine wine-gecko wine-mono
  arch-chroot /mnt pacman -S --noconfirm joystick libusb libusb-compat openal libpulse lib32-libpulse pipewire pipewire-alsa pipewire-jack pipewire-pulse wireplumber

  # Install AUR packages using yay with explicit answers to prompts
  arch-chroot /mnt su - "$USERNAME" -c "yay -S --noconfirm --answerclean a --answerdiff n --answeredit n --answerupgrade y protontricks heroic-games-launcher github-desktop snapd snapd-glib pamac-aur ast-firmware mkinitcpio-firmware text-engine-git mkinitcpio-openswap minecraft-launcher faudio lib32-faudio dxvk-bin google-chrome discord game-devices-udev rtkit"

  # Enable Snapd
  arch-chroot /mnt systemctl enable snapd.apparmor
  arch-chroot /mnt systemctl enable snapd

  # Install Coffee-specific utilities
  arch-chroot /mnt pacman -Sy --noconfirm wget
  wget -q -O /mnt/usr/bin/steamos-update https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/steamos/steamos-update
  wget -q -O /mnt/usr/bin/steamos-select-branch https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/steamos/steamos-select-branch
  wget -q -O /mnt/usr/bin/steamos-session-select https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/steamos/steamos-session-select
  wget -q -O /mnt/usr/bin/jupiter-biosupdate https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/steamos/jupiter-biosupdate
  wget -q -O /mnt/usr/bin/gamescope-session https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/steamos/gamescope-session
  wget -q -O /mnt/usr/share/applications/SteamOS.desktop https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/steamos/SteamOS.desktop
   wget -q -O /usr/local/bin/coffee-barista https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/usr/local/bin/coffee-barista
  wget -q -O /mnt/usr/local/bin/coffee-barista https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/usr/local/bin/coffee-barista
  wget -q -O /mnt/usr/local/bin/coffee-filter https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/usr/local/bin/coffee-filter
  wget -q -O /mnt/opt/coffee-updater https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/coffee-updater
  wget -q -O /mnt/opt/snapd-updater https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/snapd-updater
  wget -q -O /mnt/lib/systemd/system/snapd-updater.service https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/snapd-updater.service
  wget -q -O /mnt/opt/coffee-keeper https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/coffee-keeper
  wget -q -O /mnt/lib/systemd/system/coffee-keeper.service https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/coffee-keeper.service
  wget -q -O /mnt/opt/coffee-injector https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/coffee-injector
  wget -q -O /mnt/etc/issue https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/issue
  wget -q -O /mnt/usr/share/applications/coffee-updater.desktop https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/coffee-updater.desktop
  wget -q -O /mnt/usr/share/applications/coffee-filter.desktop https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/usr/share/applications/coffee-filter.desktop
  wget -q -O /mnt/usr/share/wallpapers/coffee/adwaita-l.jpg https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-l.jpg
  wget -q -O /mnt/usr/share/wallpapers/coffee/adwaita-d.jpg https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-d.jpg
  wget -q -O /mnt/usr/share/wallpapers/coffee/adwaita-l.jxl https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-l.jxl
  wget -q -O /mnt/usr/share/wallpapers/coffee/adwaita-d.jxl https://raw.githubusercontent.com/LiquidSmokeX64/coffee/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-d.jxl
  mkdir -p /mnt/usr/share/backgrounds/gnome/
  cp -r /mnt/usr/share/wallpapers/coffee/* /mnt/usr/share/backgrounds/gnome/

  arch-chroot /mnt chmod +x /usr/bin/steamos-select-branch /usr/bin/steamos-update /usr/bin/steamos-session-select /usr/bin/gamescope-session /usr/bin/jupiter-biosupdate /usr/local/bin/coffee-barista /usr/local/bin/coffee-filter /opt/coffee-updater /opt/snapd-updater /opt/coffee-keeper /opt/coffee-injector
  arch-chroot /mnt chmod 755 /usr/share/applications/SteamOS.desktop /usr/share/applications/coffee-updater.desktop /usr/share/applications/coffee-filter.desktop
  arch-chroot /mnt chmod 755 /lib/systemd/system/snapd-updater.service /lib/systemd/system/coffee-keeper.service
  arch-chroot /mnt chmod 755 /etc/issue

  arch-chroot /mnt systemctl enable snapd-updater.service coffee-keeper.service
}

handheld_install() {
  if [ "$HANDHELD" = "yes" ]; then
    prompt "Configuring for handheld PC..."
    # --- ROG Ally X Specific Configuration ---
    detect_ally_x() {
      if grep -q "ASUS ROG Ally X" /sys/devices/virtual/dmi/id/product_name; then
        echo "ROG Ally X detected."
        return 0
      else
        echo "ROG Ally X not detected."
        return 1
      fi
    }

    if detect_ally_x; then
      prompt "Applying ROG Ally X specific settings..."
      # Safest option: Append IOMMU parameters to grub.
      if grep -q '^GRUB_CMDLINE_LINUX_DEFAULT=' /mnt/etc/default/grub; then
        sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"$/GRUB_CMDLINE_LINUX_DEFAULT="\1 amd_iommu=on iommu=pt"/g' /mnt/etc/default/grub
        arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      fi
      prompt "IOMMU enabled for ROG Ally X."

      # You can add more Ally X specific configurations here in the future
      # such as installing specific power management tools or controller drivers
    fi
    # --- End ROG Ally X Specific Configuration ---
    # Autologin User
    mkdir -p /mnt/etc/sddm.conf.d/
    printf "[General]\nDisplayServer=x11\n\n[Autologin]\nUser=%s\nSession=plasmax11\nRelogin=true" "$USERNAME" > /mnt/etc/sddm.conf.d/autologin.conf
    # Setup OSKB for Handheld PCs
    printf "[General]\nInputMethod=onboard" > /mnt/etc/sddm.conf.d/virtualkbd.conf
    mkdir -p /mnt/etc/xdg
    cp /etc/xdg/kwinrc /mnt/etc/xdg/kwinrc
    arch-chroot /mnt chmod 755 /etc/xdg/kwinrc
    # Install Handheld Device Daemon
    arch-chroot /mnt pacman -Sy --noconfirm hhd adjustor hhd-ui
    arch-chroot /mnt systemctl enable "hhd@$USERNAME"
  fi
}

services_starter() {
  clear
  prompt "Enabling system services..."
  arch-chroot /mnt systemctl enable apparmor dhcpcd cronie chronyd NetworkManager firewalld cups bluetooth.service pipewire.service pipewire-pulse.service pipewire-alsa.service wireplumber.service rtkit-daemon.service
}

homedir_fix() {
  clear
  prompt "Fixing home directory permissions..."
  arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs xdg-environment xdg-autostart
  arch-chroot /mnt xdg-user-dirs-update --set-all
}

success_check() {
  clear
  prompt "Installation complete!"
  cp /opt/os-release /mnt/etc/
  cp /opt/lsb-release /mnt/etc/
  cp -r /opt/* /mnt/opt/
  cp /usr/local/bin/coffeebrewer5 /mnt/usr/local/bin/
  cp /usr/local/bin/coffee-barista /mnt/usr/local/bin/
  arch-chroot /mnt chmod +x /usr/local/bin/coffeebrewer5 /usr/local/bin/coffee-barista
  cp /opt/pacman-stable.conf /mnt/etc/pacman.conf # Ensure pacman.conf is correct in the installed system
  if ask_yes_no "Reboot now?"; then
    umount -R /mnt
    swapoff "${DRIVE}${SWAP_PART}"
    prompt "Please eject/remove the installation medium."
    reboot
  else
    prompt "Installation finished. Remember to unmount and reboot manually."
  fi
}

# ==============================================================================
# --- Main Script ---
# ==============================================================================

cp /opt/os-release /etc/
cp /opt/lsb-release /etc/

configure_branch
configure_handheld
configure_user
configure_password
configure_root_password
configure_hostname
configure_drive_label
configure_drive
configure_gpu
configure_bootloader
configure_filesystem
set_swap
format_disks
baseos_install
preset_locale
set_passwords
mainos_install
bootloader_install
postos_install
handheld_install
services_starter
homedir_fix
success_check

# ==============================================================================
# --- End of Script ---
# ==============================================================================
