#!/bin/sh

baseapps="iptables dbus-broker-units amd-ucode mkinitcpio texinfo base base-devel dhcpcd intel-ucode iwd linux linux-firmware man-db man-pages nano networkmanager nmap sudo gobject-introspection"

baseapps2="git device-mapper gettext xz dosfstools efibootmgr freetype2 fuse2 libisoburn lzop mtools autogen help2man python rsync ttf-dejavu system-config-printer net-tools nfs-utils systemd-resolvconf tcpdump terminus-font testdisk ntfs-3g nvme-cli openconnect open-iscsi openssh open-vm-tools tmux tpm2-tss udftools usb_modeswitch usbmuxd usbutils openvpn partclone pcsclite ppp pptpclient qemu-guest-agent vpnc wireless-regdb wireless_tools wpa_supplicant xfsprogs xl2tpd zsh refind reflector rp-pppoe rsync rxvt-unicode-terminfo sbctl sbsigntools screen sdparm sg3_utils smartmontools sof-firmware squashfs-tools mkinitcpio mkinitcpio-archiso mkinitcpio-nfs-utils modemmanager mokutil mtools apparmor archinstall mlocate arch-install-scripts b43-fwcutter bind brltty broadcom-wl btrfs-progs clonezilla cloud-init cryptsetup darkhttpd ddrescue dhclient diffutils dmidecode dmraid dnsmasq dosfstools e2fsprogs edk2-shell efibootmgr efitools exfatprogs f2fs-tools fatresize fsarchiver gpm gptfdisk grml-zsh-config hdparm hyperv jfsutils kitty-terminfo libfido2 libusb-compat linux linux-headers"

coffeeapps="pavucontrol wget fwupd fwupd-efi glfw-wayland npm boost-libs gtk-update-icon-cache hwinfo libpwquality squashfs-tools yaml-cpp boost extra-cmake-modules git rhythmbox alsa-lib alsa-utils alsa-plugins amd-ucode rust archiso archivetools archlinux-wallpaper aria2 base-devel bash-completion bash-language-server bluez-libs cabextract chrony clang cmake colord cronie cups dbus dbus-python dconf directx-headers dkms efibootmgr egl-wayland elfutils exfatprogs expat extra-cmake-modules file-roller firewalld flatpak gettext giflib gimp git glib2 glibc glslang gnu-free-fonts gnutls go gst-libav gst-plugin-pipewire gst-plugins-bad gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-ugly gstreamer gtk-engine-murrine hicolor-icon-theme innoextract lib32-giflib lib32-gnutls lib32-gst-plugins-base-libs lib32-libjpeg-turbo lib32-libldap lib32-libpng lib32-libpulse lib32-libva lib32-libxcomposite lib32-libxinerama lib32-libxslt lib32-mpg123 lib32-ncurses lib32-openal lib32-opencl-icd-loader lib32-v4l-utils libclc libdrm libelf libglvnd libjpeg-turbo libldap libnotify libomxil-bellagio libpng libpulse libunwind libva libva-utils libva-vdpau-driver libvdpau libx11 libxcomposite libxdamage libxinerama libxml2 libxrandr libxshmfence libxslt libxxf86vm linux-headers llvm llvm-libs lm_sensors make meson mkinitcpio mpg123 mtools nano ncurses neofetch nftables nitrogen nm-connection-editor noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra ntfsprogs ntp nullmailer openal opencl-icd-loader opengl-man-pages pipewire pipewire-alsa pipewire-pulse power-profiles-daemon python-gobject python-mako samba shellcheck shotwell sudo systemd terminus-font tesseract-data-eng ttf-liberation udev ufw unrar unzip v4l-utils valgrind virtualbox virtualbox-guest-utils virtualbox-host-modules-arch w3m wireplumber xdg-utils xorg xorg-apps xorgproto xorg-server xorg-xwayland xreader zenity zstd vlc opencl-clhpp opencl-headers lib32-amdvlk"

javaapps="jre-openjdk"

kdeapps="lib32-pipewire-jack pipewire-jack phonon-qt6-vlc phonon-qt5-vlc phonon-qt6 pyside6 libpulse noto-fonts noto-fonts-emoji gnu-free-fonts cronie tesseract-data-eng qt6-multimedia-ffmpeg kpmcore wireplumber pipewire-pulse pipewire pipewire-alsa appstream-qt ark colord-kde gnome-color-manager gnome-disk-utility gnome-menus gtk4 kde-applications-meta kdevelop-python kgamma qt6 plasma plasma-nm kscreen kvantum plasma-meta plasma-wayland-protocols plasma-workspace sddm sddm-kcm xdg-desktop-portal-kde libsecret"

questions(){

clear

cp /opt/pacman-stable.conf /etc/pacman.conf

clear

while [ "$usercheck" != "1" ]; do
printf "%b" "\nSet your Username.\n"
read -r user00
printf "%b" "\n$user00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r usercheck
case $usercheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

if [ "$usercheck" = "1" ]; then
user01=$user00
fi

#

clear

while [ "$userpasscheck" != "1" ]; do
printf "%b" "\nSet your User Password.\n"
read -r userpass00
printf "%b" "\n$userpass00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r userpasscheck
case $userpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

if [ "$userpasscheck" = "1" ]; then
userpass0=$userpass00
fi

#

clear

while [ "$rootpasscheck" != "1" ]; do
printf "%b" "\nSet your Root Password.\n"
read -r userpass01
printf "%b" "\n$userpass01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rootpasscheck
case $rootpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

if [ "$rootpasscheck" = "1" ]; then
userpass1=$userpass01
fi

clear

while [ "$namepasscheck" != "1" ]; do
printf "%b" "\nSet your PC name.\n"
read -r name00
printf "%b" "\n$name00. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r namepasscheck
case $namepasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

if [ "$namepasscheck" = "1" ]; then
name0=$name00
fi

clear

while [ "$name2passcheck" != "1" ]; do
printf "%b" "\nSet your HardDrive Label (OS Partition Label).\n"
read -r name01
printf "%b" "\n$name01. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r name2passcheck
case $name2passcheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac
done

if [ "$name2passcheck" = "1" ]; then
name1=$name01
fi

clear

while [ "$driveX" != "1" ] && [ "$driveX" != "2" ] && [ "$driveX" != "3" ] && [ "$driveX" != "4" ] && [ "$driveX" != "5" ] && [ "$driveX" != "6" ]; do
printf "%b" "\nListing Storage Devices for you.\n"
fdisk -l
printf "%b" "\n"
printf "%b" "\nWhich drive do you want Coffee Linux to install to?\n"
printf "%b" "\n1 - NVME0N1"
printf "%b" "\n2 - NVME1N1"
printf "%b" "\n3 - SDA"
printf "%b" "\n4 - SDB"
printf "%b" "\n5 - VDA"
printf "%b" "\n6 - VDB\n"

read -r driveX

if [ "$driveX" = "1" ]; then
drive="nvme0n1"
boot=p1
swap=p2
system=p3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "2" ]; then
drive="nvme1n1"
boot=p1
swap=p2
system=p3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "3" ]; then
drive="sda"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "4" ]; then
drive="sdb"
boot=1
swap=2
system=3

printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "5" ]; then
drive="vda"
boot=1
swap=2
system=3


printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
if [ "$driveX" = "6" ]; then
drive="vdb"
boot=1
swap=2
system=3


printf "%b" "\n$drive. Is this correct?\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r driveXpasscheck
case $driveXpasscheck in
  1) printf "%b" "\nPerfect\n" ;;
  *) printf "%b" "\nLet's retry\n" ;;
esac

if [ "$driveXpasscheck" = "1" ]; then
pfx="/dev/"
drive0=$pfx$drive
boot0=$drive0$boot
swap0=$drive0$swap
system0=$drive0$system
hostname0=$name0
drivename0=$name1
fi

fi
done

clear

printf "%b" "\nEnter swap size in GB (Usually double your RAM GB)\n"
read -r swapsize1
swapsize="+""$((swapsize1))G"
swap1=$swapsize

clear

while [ "$gpucheck" != "1" ] && [ "$gpucheck" != "2" ] && [ "$gpucheck" != "3" ] && [ "$gpucheck" != "4" ]; do
printf "%b" "\nWhat type of GPU do you have?\n"
printf "%b" "\n1 - AMD\n"
printf "%b" "\n2 - Nvidia\n"
printf "%b" "\n3 - Intel\n"
printf "%b" "\n4 - Virtual GPU (VMware etc.)\n"

read -r gpucheck
case $gpucheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nA good choice.\n" ;;
  3) printf "%b" "\nA good choice.\n" ;;
  4) printf "%b" "\nA good choice.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$gpucheck" = "1" ]; then
gpu0="amd"
fi
if [ "$gpucheck" = "2" ]; then
gpu0="nvidia"
fi
if [ "$gpucheck" = "3" ]; then
gpu0="intel"
fi
if [ "$gpucheck" = "4" ]; then
gpu0="vm"
fi
done

clear

while [ "$grubcheck" != "1" ] && [ "$grubcheck" != "2" ]; do
printf "%b" "\nWould you like GRUB for UEFI or GRUB for BIOS (Default: 1)\n"
printf "%b" "\n1 - GRUB UEFI version\n"
printf "%b" "\n2 - GRUB BIOS/MBR version\n"
read -r grubcheck
case $grubcheck in
  1) printf "%b" "\nPerfect.\n" ;;
  2) printf "%b" "\nGreat Choice.\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$grubcheck" = "1" ]; then
grub0="true"
questionspassed="yes"
fi
if [ "$grubcheck" = "2" ]; then
grub0="true2"
questionspassed="yes"
fi

done

}

clear

format_disks (){

clear

while [ "$command1finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "\nFormatting Partitions\n"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n+2G\nn\n2\n\n$swap1\nn\n3\n\n\nt\n1\n1\nt\n2\n19\nt\n3\n20\nw\n" | fdisk -W always $drive0
mkfs.vfat -F 32 "$boot0"
mkswap "$swap0"
swapon "$swap0"

mkfs.btrfs -f -L "$drivename0" "$system0"
printf "%b" "\nMounting Disks\n"
mount "$system0" /mnt
mkdir /mnt/boot
mount "$boot0" /mnt/boot
clear

command1finished="1"
fi
done

}

base_install (){

clear

while [ "$pacstrapfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
pacstrap /mnt $baseapps
clear
arch-chroot /mnt pacman -Sy --noconfirm $baseapps2
clear

pacstrapfinished="1"
fi
done

}

set_locale (){

clear

while [ "$command2finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

rm /mnt/etc/locale.gen
rm /mnt/etc/locale.conf
rm /mnt/etc/vconsole.conf
rm /mnt/etc/sudoers.d/wheel

arch-chroot /mnt /bin/bash <<"EOT"
printf "%b" "\nSetting Locale\n"
ln -sf ../usr/share/zoneinfo/America/Los_Angeles /etc/localtime
hwclock --systohc
printf "%b" "\nen_US ISO-8859-1\nen_US.UTF-8 UTF-8\n" >> /etc/locale.gen
printf "%b" "\nKEYMAP=us\n" >> /etc/vconsole.conf
printf "%b" "\nLANG=en_US.UTF-8" >> /etc/locale.conf
export LANG=en_US.UTF-8
locale-gen
cd /
printf "%b\n%%"w"heel ALL=(ALL:ALL) NOPASSWD: ALL\n" "$*" > /etc/sudoers.d/wheel
mkinitcpio -P

EOT

cp --dereference /etc/resolv.conf /mnt/etc/
arch-chroot /mnt pacman -Syu --noconfirm
clear

command2finished="1"
fi
done

}

set_passwords (){

clear

while [ "$command3finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

clear
cp /etc/pacman.conf /mnt/etc/pacman.conf
printf "%b" "\nSet Root Password\n"
printf "%b" "$userpass1\n$userpass1\n" | arch-chroot /mnt passwd
printf "%b" "Adding User Account\n"
arch-chroot /mnt useradd -m -G wheel,video,users,input,tty $user01
printf "%b" "\nSet User Password\n"
printf "%b" "$userpass0\n$userpass0\n" | arch-chroot /mnt passwd $user01
printf "%b" "$hostname0\n" >> /mnt/etc/hostname
printf "%b" "\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $hostname0\n" >> /mnt/etc/hosts
printf "%b" "Creating Links\n"
genfstab -U /mnt >> /mnt/etc/fstab
clear

command3finished="1"
fi
done

}

desktop_install (){

clear

while [ "$command4finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $kdeapps
rm /usr/local/bin/coffee-barista
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/usr/local/bin/coffee-barista -P /usr/local/bin/
chmod 755 /usr/local/bin/coffee-barista
rm /opt/coffee-updater
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/coffee-updater -P /opt/

clear
sleep 5
printf "%b" "\nCopying yay package..\n"
sleep 5
rm /opt/yay-12.3.5-1-x86_64.pkg.tar.zst
rm /opt/yay-debug-12.3.5-1-x86_64.pkg.tar.zst
rm /opt/yay-12.4.1-1-x86_64.pkg.tar.zst
rm /opt/yay-debug-12.4.1-1-x86_64.pkg.tar.zst
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/yay-12.4.1-1-x86_64.pkg.tar.zst -P /opt/
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/yay-debug-12.4.1-1-x86_64.pkg.tar.zst -P /opt/
cp /opt/yay-12.4.1-1-x86_64.pkg.tar.zst /mnt/opt/
cp /opt/yay-debug-12.4.1-1-x86_64.pkg.tar.zst /mnt/opt/
printf "%b" "\nInstalling yay.\n"
arch-chroot /mnt pacman -U --noconfirm /opt/yay-12.4.1-1-x86_64.pkg.tar.zst
arch-chroot /mnt pacman -U --noconfirm /opt/yay-debug-12.4.1-1-x86_64.pkg.tar.zst
sleep 2
printf "%b" "\nInstalled yay successfully.\n"
clear
arch-chroot /mnt systemctl preset-all
arch-chroot /mnt systemctl disable systemd-resolved systemd-networkd

if [ "$gpu0" = "vm" ]; then
gpu0="amd"
fi

arch-chroot /mnt systemctl enable sddm

command4finished="1"
fi
done

}

coffee_install (){

clear

while [ "$pacmanfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
arch-chroot /mnt pacman -Sy --noconfirm $coffeeapps
arch-chroot /mnt pacman -Rdd --noconfirm kmix
arch-chroot /mnt pacman -Rdd --noconfirm blueman
clear
pacmanfinished="1"
fi
done

}

bootloader_install (){

clear

while [ "$command8finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$grub0" = "true" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b" "\nGRUB UEFI for Nvidia selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-nvidia/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-nvidia/grub -P /opt/grub-nvidia/
cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi
if [ "$gpu0" = "amd" ]; then

printf "%b" "\nGRUB UEFI for AMD selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font efivar

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-amd/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-amd/grub -P /opt/grub-amd/
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi
if [ "$gpu0" = "intel" ]; then

printf "%b" "\nGRUB UEFI for Intel selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font efivar

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-intel/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-intel/grub -P /opt/grub-intel/
cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg
EOT

fi

fi
if [ "$grub0" = "true2" ]; then

if [ "$gpu0" = "nvidia" ]; then

printf "%b" "\nGRUB BIOS for Nvidia selected.\n"

arch-chroot /mnt pacman -S --noconfirm libadwaita grub os-prober breeze-grub terminus-font
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-nvidia/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-nvidia/grub -P /opt/grub-nvidia/
cp /opt/grub-nvidia/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
pacman -Sy --noconfirm
mkinitcpio -P
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi
if [ "$gpu0" = "amd" ]; then

printf "%b" "\nGRUB BIOS for AMD selected.\n"


arch-chroot /mnt pacman -S --needed --noconfirm libadwaita corectrl grub os-prober breeze-grub terminus-font
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-amd/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-amd/grub -P /opt/grub-amd/
cp /opt/grub-amd/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi
if [ "$gpu0" = "intel" ]; then

printf "%b" "\nGRUB BIOS for Intel selected.\n"

arch-chroot /mnt pacman -S --needed --noconfirm libadwaita grub os-prober breeze-grub terminus-font
arch-chroot /mnt pacman -Rdd --noconfirm grub2-editor-frameworks

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm update-grub

rm /opt/grub-intel/grub
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/grub-intel/grub -P /opt/grub-intel/
cp /opt/grub-intel/grub /mnt/etc/default/

arch-chroot /mnt /bin/bash <<"EOT"
mkinitcpio -P
pacman -Sy --noconfirm
EOT

arch-chroot /mnt grub-install --target=i386-pc $drive0
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

fi

fi

command8finished="1"
fi
done

}

gpu_install (){

clear

while [ "$command9finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

if [ "$gpu0" = "nvidia" ]; then
printf "%b" "\nNvidia GPU selected.\nInstalling GPU Drivers first.\n"
arch-chroot /mnt pacman -Sy --noconfirm nvidia-open-dkms nvidia-prime lib32-nvidia-utils opencl-nvidia nvidia-utils nvidia-settings vulkan-validation-layers vkd3d vulkan-icd-loader lib32-vkd3d lib32-vulkan-icd-loader
fi
if [ "$gpu0" = "amd" ]; then
printf "%b" "\nAMD GPU selected.\nInstalling amdgpu-fan and corectrl as well\n"
arch-chroot /mnt pacman -Sy --noconfirm lib32-mesa lib32-amdvlk lib32-libva-mesa-driver lib32-mesa-vdpau lib32-vulkan-mesa-layers libva-mesa-driver mesa mesa-utils mesa-vdpau opencl-clover-mesa opencl-rusticl-mesa vulkan-mesa-layers lib32-vulkan-radeon lib32-vulkan-radeon vulkan-radeon xf86-video-amdgpu vulkan-validation-layers vkd3d vulkan-icd-loader lib32-vkd3d lib32-vulkan-icd-loader
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
arch-chroot /mnt pacman -Sy --noconfirm corectrl
fi
if [ "$gpu0" = "intel" ]; then
printf "%b" "\nIntel GPU selected.\n"
arch-chroot /mnt pacman -Sy --noconfirm mesa lib32-mesa xorg-server vulkan-intel vulkan-intel lib32-vulkan-intel libva-intel-driver libva-utils vulkan-validation-layers vkd3d vulkan-icd-loader lib32-vkd3d lib32-vulkan-icd-loader
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y amdgpu-fan
fi

command9finished="1"
fi
done

}

java_install (){

clear

while [ "$command5finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

arch-chroot /mnt pacman -Sy --noconfirm $javaapps
clear

java1="$(arch-chroot /mnt sudo -Su "$user01" archlinux-java get 2>/dev/null)"

arch-chroot /mnt archlinux-java set "$java1"

command5finished="1"
fi
done

}

snapd_install (){

clear

while [ "$command7finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y snapd-glib
clear
arch-chroot /mnt systemctl enable snapd.apparmor
arch-chroot /mnt systemctl enable snapd
cp /opt/snapd-updater /mnt/opt/
arch-chroot /mnt chmod 755 /opt/snapd-updater
cp /opt/snapd-updater.service /mnt/lib/systemd/system/
arch-chroot /mnt systemctl enable snapd-updater.service

command7finished="1"
fi
done

}

apps_install (){

clear

while [ "$yayinstallfinished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a --answerdiff n --answeredit y --answerupgrade y google-chrome
clear
arch-chroot /mnt pacman -Sy --noconfirm discord libreoffice-fresh lutris mangohud gamescope steam-native-runtime wine wine-gecko wine-mono winetricks
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protontricks
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y game-devices-udev
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y dxvk-bin
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y protonup-qt
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y heroic-games-launcher
clear
printf "%b" "2\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y github-desktop
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean n  --answerdiff n --answeredit y --answerupgrade y pamac-aur
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y ast-firmware
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-firmware
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y text-engine-git
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y mkinitcpio-openswap
clear
yayinstallfinished="1"
fi
done

}

services_starter(){

arch-chroot /mnt pacman -Sy --noconfirm apparmor
clear
arch-chroot /mnt systemctl enable apparmor
arch-chroot /mnt systemctl enable dhcpcd
arch-chroot /mnt systemctl enable cronie
arch-chroot /mnt systemctl enable chronyd
arch-chroot /mnt systemctl enable NetworkManager
arch-chroot /mnt systemctl enable firewalld
arch-chroot /mnt systemctl enable cups
arch-chroot /mnt systemctl enable bluetooth.service
arch-chroot /mnt systemctl --global enable pipewire.service pipewire-pulse.service wireplumber.service

}


homedir_fix (){

clear

while [ "$command11finished" != "1" ]; do
if [ "$questionspassed" = "yes" ]; then

printf "%b" "\nAttempting to fix the home directory automatically now...\n"
arch-chroot /mnt pacman -Sy --noconfirm xdg-user-dirs
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-environment
clear
printf "%b" "1\n" | arch-chroot /mnt sudo -Su "$user01" yay --noconfirm --diffmenu=false --noremovemake --answerclean a  --answerdiff n --answeredit y --answerupgrade y xdg-autostart
clear
arch-chroot /mnt xdg-user-dirs-update
printf "%b" "Cleaning up\n"

command11finished="1"
fi
done

}

success_check (){

clear

while [ "$command15finished" != "1" ] && [ "$rebootcheck" != "1" ] && [ "$rebootcheck" != "2" ]; do
if [ "$questionspassed" = "yes" ]; then

cp /opt/os-release /mnt/etc/
cp /opt/lsb-release /mnt/etc/
cp -r /opt/* /mnt/opt/
cp /usr/local/bin/coffeebrewer3 /mnt/usr/local/bin/
cp /usr/local/bin/coffee-barista /mnt/usr/local/bin/
arch-chroot /mnt chmod 755 /usr/local/bin/coffeebrewer3
arch-chroot /mnt chmod 755 /usr/local/bin/coffee-barista
rm /opt/backgrounds/coffee/adwaita-l.jpg
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-l.jpg -P /opt/backgrounds/coffee/
rm /opt/backgrounds/coffee/adwaita-d.jpg
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-d.jpg -P /opt/backgrounds/coffee/
rm /opt/backgrounds/coffee/adwaita-l.jxl
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-l.jxl -P /opt/backgrounds/coffee/
rm /opt/backgrounds/coffee/adwaita-d.jxl
wget -L https://raw.githubusercontent.com/Project-X-Mods/coffeelinux/master/coffeelinux-archiso/releng/airootfs/opt/backgrounds/coffee/adwaita-d.jxl -P /opt/backgrounds/coffee/
mkdir -p /mnt/usr/share/wallpapers/coffee/
cp /opt/backgrounds/coffee/* /mnt/usr/share/wallpapers/coffee/
cp /opt/coffee-injector /mnt/opt/
arch-chroot /mnt chmod 755 /opt/coffee-keeper
cp /opt/coffee-keeper /mnt/opt/
arch-chroot /mnt chmod 755 /opt/coffee-injector
cp /opt/coffee-keeper.service /mnt/lib/systemd/system/
arch-chroot /mnt systemctl enable coffee-keeper.service
cp /opt/issue /mnt/etc/issue
cp /opt/coffee-updater /mnt/usr/local/bin/
arch-chroot /mnt chmod 755 /usr/local/bin/coffee-updater
cp /opt/coffee-updater.desktop /mnt/usr/share/applications/
arch-chroot /mnt chmod 755 /usr/share/applications/coffee-updater.desktop
rm /mnt/usr/share/applications/steam-native.desktop
rm /mnt/usr/share/applications/stoken-gui-small.desktop
cp /opt/pacman-stable.conf /etc/pacman.conf
cp /opt/os-release /mnt/etc/
cp /opt/lsb-release /mnt/etc/

clear
printf "%b" "\n Did the installer complete sussessfully? (Default: 1)\n"
printf "%b" "\n1 - yes\n"
printf "%b" "\n2 - no\n"
read -r rebootcheck
case $rebootcheck in
  1) printf "%b" "\nPerfect\n" ;;
  2) printf "%b" "\nLet's exit, something went wrong...\n" ;;
  *) printf "%b" "\nUnrecognized option, selecting default..\n" ;;
esac

if [ "$rebootcheck" = "1" ]; then
printf "%b" "\n"
fi

if [ "$rebootcheck" = "2" ]; then
cp /opt/pacman-stable.conf /etc/pacman.conf
umount -R /mnt
swapoff "$swap0"
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
printf "%b" "g\nn\n1\n\n\nt\n20\nw\n" | fdisk -W always "$drive0"
clear
exit
fi

command15finished="1"
fi
done

}

#=================================================
#-Main
#=================================================

cp /opt/os-release /etc/
cp /opt/lsb-release /etc/

clear

questions
format_disks
base_install
set_locale
set_passwords
desktop_install
coffee_install
bootloader_install
secureboot_install
gpu_install
java_install
snapd_install
apps_install
services_starter
homedir_fix
success_check
printf "%b" "\nExcellent. Let's proceed to reboot.\nPlease eject/remove the installation medium.\n"
umount -R /mnt
reboot

#============================
#End-Main
#============================

#End-Script
